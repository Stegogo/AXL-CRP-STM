
F103C8T6_ACL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a6c  08006a6c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006a6c  08006a6c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a6c  08006a6c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  20000060  08006ad4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  08006ad4  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e24  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bdb  00000000  00000000  00036ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0003aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001010  00000000  00000000  0003bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b39a  00000000  00000000  0003cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187a6  00000000  00000000  00058342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095621  00000000  00000000  00070ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059b8  00000000  00000000  0010610c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010bac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080069c8 	.word	0x080069c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080069c8 	.word	0x080069c8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2iz>:
 8000884:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800088c:	d215      	bcs.n	80008ba <__aeabi_d2iz+0x36>
 800088e:	d511      	bpl.n	80008b4 <__aeabi_d2iz+0x30>
 8000890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000898:	d912      	bls.n	80008c0 <__aeabi_d2iz+0x3c>
 800089a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008aa:	fa23 f002 	lsr.w	r0, r3, r2
 80008ae:	bf18      	it	ne
 80008b0:	4240      	negne	r0, r0
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d105      	bne.n	80008cc <__aeabi_d2iz+0x48>
 80008c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008c4:	bf08      	it	eq
 80008c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ca:	4770      	bx	lr
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <__aeabi_frsub>:
 80008d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008d8:	e002      	b.n	80008e0 <__addsf3>
 80008da:	bf00      	nop

080008dc <__aeabi_fsub>:
 80008dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008e0 <__addsf3>:
 80008e0:	0042      	lsls	r2, r0, #1
 80008e2:	bf1f      	itttt	ne
 80008e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008e8:	ea92 0f03 	teqne	r2, r3
 80008ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008f4:	d06a      	beq.n	80009cc <__addsf3+0xec>
 80008f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008fe:	bfc1      	itttt	gt
 8000900:	18d2      	addgt	r2, r2, r3
 8000902:	4041      	eorgt	r1, r0
 8000904:	4048      	eorgt	r0, r1
 8000906:	4041      	eorgt	r1, r0
 8000908:	bfb8      	it	lt
 800090a:	425b      	neglt	r3, r3
 800090c:	2b19      	cmp	r3, #25
 800090e:	bf88      	it	hi
 8000910:	4770      	bxhi	lr
 8000912:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000916:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800091a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000926:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800092a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800092e:	bf18      	it	ne
 8000930:	4249      	negne	r1, r1
 8000932:	ea92 0f03 	teq	r2, r3
 8000936:	d03f      	beq.n	80009b8 <__addsf3+0xd8>
 8000938:	f1a2 0201 	sub.w	r2, r2, #1
 800093c:	fa41 fc03 	asr.w	ip, r1, r3
 8000940:	eb10 000c 	adds.w	r0, r0, ip
 8000944:	f1c3 0320 	rsb	r3, r3, #32
 8000948:	fa01 f103 	lsl.w	r1, r1, r3
 800094c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000950:	d502      	bpl.n	8000958 <__addsf3+0x78>
 8000952:	4249      	negs	r1, r1
 8000954:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000958:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800095c:	d313      	bcc.n	8000986 <__addsf3+0xa6>
 800095e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000962:	d306      	bcc.n	8000972 <__addsf3+0x92>
 8000964:	0840      	lsrs	r0, r0, #1
 8000966:	ea4f 0131 	mov.w	r1, r1, rrx
 800096a:	f102 0201 	add.w	r2, r2, #1
 800096e:	2afe      	cmp	r2, #254	; 0xfe
 8000970:	d251      	bcs.n	8000a16 <__addsf3+0x136>
 8000972:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000976:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097a:	bf08      	it	eq
 800097c:	f020 0001 	biceq.w	r0, r0, #1
 8000980:	ea40 0003 	orr.w	r0, r0, r3
 8000984:	4770      	bx	lr
 8000986:	0049      	lsls	r1, r1, #1
 8000988:	eb40 0000 	adc.w	r0, r0, r0
 800098c:	3a01      	subs	r2, #1
 800098e:	bf28      	it	cs
 8000990:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000994:	d2ed      	bcs.n	8000972 <__addsf3+0x92>
 8000996:	fab0 fc80 	clz	ip, r0
 800099a:	f1ac 0c08 	sub.w	ip, ip, #8
 800099e:	ebb2 020c 	subs.w	r2, r2, ip
 80009a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80009a6:	bfaa      	itet	ge
 80009a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009ac:	4252      	neglt	r2, r2
 80009ae:	4318      	orrge	r0, r3
 80009b0:	bfbc      	itt	lt
 80009b2:	40d0      	lsrlt	r0, r2
 80009b4:	4318      	orrlt	r0, r3
 80009b6:	4770      	bx	lr
 80009b8:	f092 0f00 	teq	r2, #0
 80009bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009c0:	bf06      	itte	eq
 80009c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009c6:	3201      	addeq	r2, #1
 80009c8:	3b01      	subne	r3, #1
 80009ca:	e7b5      	b.n	8000938 <__addsf3+0x58>
 80009cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009d4:	bf18      	it	ne
 80009d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009da:	d021      	beq.n	8000a20 <__addsf3+0x140>
 80009dc:	ea92 0f03 	teq	r2, r3
 80009e0:	d004      	beq.n	80009ec <__addsf3+0x10c>
 80009e2:	f092 0f00 	teq	r2, #0
 80009e6:	bf08      	it	eq
 80009e8:	4608      	moveq	r0, r1
 80009ea:	4770      	bx	lr
 80009ec:	ea90 0f01 	teq	r0, r1
 80009f0:	bf1c      	itt	ne
 80009f2:	2000      	movne	r0, #0
 80009f4:	4770      	bxne	lr
 80009f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80009fa:	d104      	bne.n	8000a06 <__addsf3+0x126>
 80009fc:	0040      	lsls	r0, r0, #1
 80009fe:	bf28      	it	cs
 8000a00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a04:	4770      	bx	lr
 8000a06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a0a:	bf3c      	itt	cc
 8000a0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bxcc	lr
 8000a12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a1e:	4770      	bx	lr
 8000a20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a24:	bf16      	itet	ne
 8000a26:	4608      	movne	r0, r1
 8000a28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a2c:	4601      	movne	r1, r0
 8000a2e:	0242      	lsls	r2, r0, #9
 8000a30:	bf06      	itte	eq
 8000a32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a36:	ea90 0f01 	teqeq	r0, r1
 8000a3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a3e:	4770      	bx	lr

08000a40 <__aeabi_ui2f>:
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	e004      	b.n	8000a50 <__aeabi_i2f+0x8>
 8000a46:	bf00      	nop

08000a48 <__aeabi_i2f>:
 8000a48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a4c:	bf48      	it	mi
 8000a4e:	4240      	negmi	r0, r0
 8000a50:	ea5f 0c00 	movs.w	ip, r0
 8000a54:	bf08      	it	eq
 8000a56:	4770      	bxeq	lr
 8000a58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	e01c      	b.n	8000a9e <__aeabi_l2f+0x2a>

08000a64 <__aeabi_ul2f>:
 8000a64:	ea50 0201 	orrs.w	r2, r0, r1
 8000a68:	bf08      	it	eq
 8000a6a:	4770      	bxeq	lr
 8000a6c:	f04f 0300 	mov.w	r3, #0
 8000a70:	e00a      	b.n	8000a88 <__aeabi_l2f+0x14>
 8000a72:	bf00      	nop

08000a74 <__aeabi_l2f>:
 8000a74:	ea50 0201 	orrs.w	r2, r0, r1
 8000a78:	bf08      	it	eq
 8000a7a:	4770      	bxeq	lr
 8000a7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__aeabi_l2f+0x14>
 8000a82:	4240      	negs	r0, r0
 8000a84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a88:	ea5f 0c01 	movs.w	ip, r1
 8000a8c:	bf02      	ittt	eq
 8000a8e:	4684      	moveq	ip, r0
 8000a90:	4601      	moveq	r1, r0
 8000a92:	2000      	moveq	r0, #0
 8000a94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a98:	bf08      	it	eq
 8000a9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aa2:	fabc f28c 	clz	r2, ip
 8000aa6:	3a08      	subs	r2, #8
 8000aa8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000aac:	db10      	blt.n	8000ad0 <__aeabi_l2f+0x5c>
 8000aae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ab8:	f1c2 0220 	rsb	r2, r2, #32
 8000abc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ac0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac4:	eb43 0002 	adc.w	r0, r3, r2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f102 0220 	add.w	r2, r2, #32
 8000ad4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ad8:	f1c2 0220 	rsb	r2, r2, #32
 8000adc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ae0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ae4:	eb43 0002 	adc.w	r0, r3, r2
 8000ae8:	bf08      	it	eq
 8000aea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aee:	4770      	bx	lr

08000af0 <ADXL_Init>:

/** Initializes the ADXL unit
* @param adxl, structure of ADXL_InitTypeDef: 
*/
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{ 
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    // CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	484d      	ldr	r0, [pc, #308]	; (8000c34 <ADXL_Init+0x144>)
 8000afe:	f001 faf5 	bl	80020ec <HAL_GPIO_WritePin>
    // Unknown delay should apply
    osDelay(5);
 8000b02:	2005      	movs	r0, #5
 8000b04:	f003 fb4d 	bl	80041a2 <osDelay>
    uint8_t testval = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
    // The Device Address register is constant, i.e. = 0xE5
    readRegister(DEVID,&testval,1);
 8000b0c:	f107 030f 	add.w	r3, r7, #15
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 fa47 	bl	8000fa8 <readRegister>
    if (testval != 0xE5) return ADXL_ERR;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2be5      	cmp	r3, #229	; 0xe5
 8000b1e:	d001      	beq.n	8000b24 <ADXL_Init+0x34>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e082      	b.n	8000c2a <ADXL_Init+0x13a>
    // Init. of BW_RATE and DATAFORMAT registers
    adxlBW(adxl);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 fa7f 	bl	8001028 <adxlBW>
    adxlFormat(adxl);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fac0 	bl	80010b0 <adxlFormat>

    // Settings gains 
    if (adxl->Resolution == RESOLUTION_10BIT)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d13f      	bne.n	8000bb8 <ADXL_Init+0xc8>
    {
        switch (adxl->Range) 
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d846      	bhi.n	8000bce <ADXL_Init+0xde>
 8000b40:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <ADXL_Init+0x58>)
 8000b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b46:	bf00      	nop
 8000b48:	08000b59 	.word	0x08000b59
 8000b4c:	08000b71 	.word	0x08000b71
 8000b50:	08000b89 	.word	0x08000b89
 8000b54:	08000ba1 	.word	0x08000ba1
        {
            case RANGE_2G:  GAINX = GAINY = GAINZ = 1/255.0f;  break;
 8000b58:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <ADXL_Init+0x148>)
 8000b5a:	4a38      	ldr	r2, [pc, #224]	; (8000c3c <ADXL_Init+0x14c>)
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <ADXL_Init+0x148>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <ADXL_Init+0x150>)
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <ADXL_Init+0x150>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <ADXL_Init+0x154>)
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e02e      	b.n	8000bce <ADXL_Init+0xde>
            case RANGE_4G:  GAINX = GAINY = GAINZ = 1/127.0f;  break;
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <ADXL_Init+0x148>)
 8000b72:	4a35      	ldr	r2, [pc, #212]	; (8000c48 <ADXL_Init+0x158>)
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <ADXL_Init+0x148>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <ADXL_Init+0x150>)
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <ADXL_Init+0x150>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <ADXL_Init+0x154>)
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e022      	b.n	8000bce <ADXL_Init+0xde>
            case RANGE_8G:  GAINX = GAINY = GAINZ = 1/63.0f;   break;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <ADXL_Init+0x148>)
 8000b8a:	4a30      	ldr	r2, [pc, #192]	; (8000c4c <ADXL_Init+0x15c>)
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <ADXL_Init+0x148>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <ADXL_Init+0x150>)
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <ADXL_Init+0x150>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <ADXL_Init+0x154>)
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e016      	b.n	8000bce <ADXL_Init+0xde>
            case RANGE_16G: GAINX = GAINY = GAINZ = 1/31.0f;   break;                              
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <ADXL_Init+0x148>)
 8000ba2:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <ADXL_Init+0x160>)
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <ADXL_Init+0x148>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <ADXL_Init+0x150>)
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <ADXL_Init+0x150>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <ADXL_Init+0x154>)
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e00a      	b.n	8000bce <ADXL_Init+0xde>
        }
    } 
    else 
    {
        GAINX = GAINY = GAINZ = 1/255.0f;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <ADXL_Init+0x148>)
 8000bba:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <ADXL_Init+0x14c>)
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <ADXL_Init+0x148>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <ADXL_Init+0x150>)
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <ADXL_Init+0x150>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <ADXL_Init+0x154>)
 8000bcc:	6013      	str	r3, [r2, #0]
    }
    // Setting AutoSleep and Link bits
    uint8_t reg;
    readRegister(POWER_CTL,&reg,1);
 8000bce:	f107 030e 	add.w	r3, r7, #14
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	202d      	movs	r0, #45	; 0x2d
 8000bd8:	f000 f9e6 	bl	8000fa8 <readRegister>
    
    if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	79db      	ldrb	r3, [r3, #7]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d105      	bne.n	8000bf0 <ADXL_Init+0x100>
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	73bb      	strb	r3, [r7, #14]
 8000bee:	e004      	b.n	8000bfa <ADXL_Init+0x10a>
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	f023 0310 	bic.w	r3, r3, #16
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	73bb      	strb	r3, [r7, #14]
    if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5);   else reg &= ~(1 << 5);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7a1b      	ldrb	r3, [r3, #8]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d105      	bne.n	8000c0e <ADXL_Init+0x11e>
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	73bb      	strb	r3, [r7, #14]
 8000c0c:	e004      	b.n	8000c18 <ADXL_Init+0x128>
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	f023 0320 	bic.w	r3, r3, #32
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	73bb      	strb	r3, [r7, #14]
    writeRegister(POWER_CTL,reg);
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	202d      	movs	r0, #45	; 0x2d
 8000c1e:	f000 f993 	bl	8000f48 <writeRegister>
    
    adxlInterrupt(adxl);            
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f8d9 	bl	8000dda <adxlInterrupt>
    
    return ADXL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40010800 	.word	0x40010800
 8000c38:	2000009c 	.word	0x2000009c
 8000c3c:	3b808081 	.word	0x3b808081
 8000c40:	20000098 	.word	0x20000098
 8000c44:	20000094 	.word	0x20000094
 8000c48:	3c010204 	.word	0x3c010204
 8000c4c:	3c820821 	.word	0x3c820821
 8000c50:	3d042108 	.word	0x3d042108

08000c54 <ADXL_getAccel>:
		      uint16_t acc[3];
		      ADXL_getAccel(acc,OUTPUT_SIGNED);
		      and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
    uint8_t data[6]={0,0,0,0,0,0};	
 8000c60:	4a41      	ldr	r2, [pc, #260]	; (8000d68 <ADXL_getAccel+0x114>)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c6a:	6018      	str	r0, [r3, #0]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	8019      	strh	r1, [r3, #0]
    readRegister(DATA0,data,6);
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2206      	movs	r2, #6
 8000c76:	4619      	mov	r1, r3
 8000c78:	2032      	movs	r0, #50	; 0x32
 8000c7a:	f000 f995 	bl	8000fa8 <readRegister>

    if (outputType == OUTPUT_SIGNED)
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d125      	bne.n	8000cd0 <ADXL_getAccel+0x7c>
    {
        int16_t * acc = Data;	
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	613b      	str	r3, [r7, #16]
        // Two's Complement
        acc[0] = (int16_t) ((data[1]*256+data[0]));
 8000c88:	7a7b      	ldrb	r3, [r7, #9]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	7a3b      	ldrb	r3, [r7, #8]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	801a      	strh	r2, [r3, #0]
        acc[1] = (int16_t) ((data[3]*256+data[2]));
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	7abb      	ldrb	r3, [r7, #10]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4413      	add	r3, r2
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	b212      	sxth	r2, r2
 8000cb4:	801a      	strh	r2, [r3, #0]
        acc[2] = (int16_t) ((data[5]*256+data[4]));
 8000cb6:	7b7b      	ldrb	r3, [r7, #13]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	b212      	sxth	r2, r2
 8000ccc:	801a      	strh	r2, [r3, #0]
        float * fdata = Data;
        fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
        fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
        fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
    }
}
 8000cce:	e046      	b.n	8000d5e <ADXL_getAccel+0x10a>
    else if (outputType == OUTPUT_FLOAT)
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d143      	bne.n	8000d5e <ADXL_getAccel+0x10a>
        float * fdata = Data;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	617b      	str	r3, [r7, #20]
        fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8000cda:	7a7b      	ldrb	r3, [r7, #9]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	7a3b      	ldrb	r3, [r7, #8]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff feab 	bl	8000a48 <__aeabi_i2f>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <ADXL_getAccel+0x118>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	f7ff fb52 	bl	80003a4 <__aeabi_fmul>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	601a      	str	r2, [r3, #0]
        fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	7abb      	ldrb	r3, [r7, #10]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe94 	bl	8000a48 <__aeabi_i2f>
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <ADXL_getAccel+0x11c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	1d1c      	adds	r4, r3, #4
 8000d28:	4611      	mov	r1, r2
 8000d2a:	f7ff fb3b 	bl	80003a4 <__aeabi_fmul>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6023      	str	r3, [r4, #0]
        fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	7b3b      	ldrb	r3, [r7, #12]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe7f 	bl	8000a48 <__aeabi_i2f>
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <ADXL_getAccel+0x120>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f103 0408 	add.w	r4, r3, #8
 8000d54:	4611      	mov	r1, r2
 8000d56:	f7ff fb25 	bl	80003a4 <__aeabi_fmul>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6023      	str	r3, [r4, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	080069e0 	.word	0x080069e0
 8000d6c:	20000094 	.word	0x20000094
 8000d70:	20000098 	.word	0x20000098
 8000d74:	2000009c 	.word	0x2000009c

08000d78 <ADXL_Measure>:
		
/** Starts Measure Mode
* @param: s = ON or OFF				
*/
void ADXL_Measure(Switch s)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    readRegister(POWER_CTL,&reg,1);
 8000d82:	f107 030f 	add.w	r3, r7, #15
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	202d      	movs	r0, #45	; 0x2d
 8000d8c:	f000 f90c 	bl	8000fa8 <readRegister>
    
    switch (s) 
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <ADXL_Measure+0x24>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d010      	beq.n	8000dbc <ADXL_Measure+0x44>
            reg &= ~(1<<3);
            writeRegister(POWER_CTL,reg);
        }
        break;				
    }
}
 8000d9a:	e01a      	b.n	8000dd2 <ADXL_Measure+0x5a>
            reg &= ~(1<<2);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f023 0304 	bic.w	r3, r3, #4
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	73fb      	strb	r3, [r7, #15]
            reg |= (1<<3);
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	73fb      	strb	r3, [r7, #15]
            writeRegister(POWER_CTL,reg);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4619      	mov	r1, r3
 8000db4:	202d      	movs	r0, #45	; 0x2d
 8000db6:	f000 f8c7 	bl	8000f48 <writeRegister>
        break;
 8000dba:	e00a      	b.n	8000dd2 <ADXL_Measure+0x5a>
            reg &= ~(1<<3);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	f023 0308 	bic.w	r3, r3, #8
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
            writeRegister(POWER_CTL,reg);
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	202d      	movs	r0, #45	; 0x2d
 8000dcc:	f000 f8bc 	bl	8000f48 <writeRegister>
        break;				
 8000dd0:	bf00      	nop
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <adxlInterrupt>:
}

//************************** I N T E R R U P T S *******************************

void adxlInterrupt(ADXL_InitTypeDef * adxl)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
    uint8_t reg=0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]

    // Settings Int output
    readRegister(INT_MAP,&reg,1);
 8000de6:	f107 030f 	add.w	r3, r7, #15
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	202f      	movs	r0, #47	; 0x2f
 8000df0:	f000 f8da 	bl	8000fa8 <readRegister>
    if (adxl->IntPin == INT1)   reg &= ~(adxl->Interrupt); 
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7a9b      	ldrb	r3, [r3, #10]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10b      	bne.n	8000e14 <adxlInterrupt+0x3a>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7a5b      	ldrb	r3, [r3, #9]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	b25a      	sxtb	r2, r3
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e005      	b.n	8000e20 <adxlInterrupt+0x46>
    else                        reg |= (adxl->Interrupt);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7a5a      	ldrb	r2, [r3, #9]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	73fb      	strb	r3, [r7, #15]
    writeRegister(INT_MAP,reg);
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	4619      	mov	r1, r3
 8000e24:	202f      	movs	r0, #47	; 0x2f
 8000e26:	f000 f88f 	bl	8000f48 <writeRegister>
    
    // Enabling the TAP interrupt
    readRegister(INT_ENABLE, &reg, 1);
 8000e2a:	f107 030f 	add.w	r3, r7, #15
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	202e      	movs	r0, #46	; 0x2e
 8000e34:	f000 f8b8 	bl	8000fa8 <readRegister>
    reg |= (adxl->Interrupt);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7a5a      	ldrb	r2, [r3, #9]
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	73fb      	strb	r3, [r7, #15]
    writeRegister(INT_ENABLE,reg);  
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	4619      	mov	r1, r3
 8000e48:	202e      	movs	r0, #46	; 0x2e
 8000e4a:	f000 f87d 	bl	8000f48 <writeRegister>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <ADXL_enableDoubleTap>:
* @param Threshold: The threshold value for tap interrupt. The scale factor is 62.5 mg/LSB. Should not be 0!
* @param Latent: 		The delay time after the first Tap. Scale factor is : 1.25 ms/LSB. Should not be 0!
* @param Windows:		The time interval between two Taps. Scale factor is : 1.25 ms/LSB.  Should not be 0!
*/
void ADXL_enableDoubleTap(ADXL_IntOutput out, uint8_t axes, uint8_t Duration, uint8_t Threshold, uint8_t Latent, uint8_t Window)
{
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4611      	mov	r1, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	4623      	mov	r3, r4
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	717b      	strb	r3, [r7, #5]
 8000e70:	4613      	mov	r3, r2
 8000e72:	713b      	strb	r3, [r7, #4]
    uint8_t reg=0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

    writeRegister(DUR,Duration);
 8000e78:	797b      	ldrb	r3, [r7, #5]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2021      	movs	r0, #33	; 0x21
 8000e7e:	f000 f863 	bl	8000f48 <writeRegister>
    writeRegister(THRESH_TAP,Threshold);
 8000e82:	793b      	ldrb	r3, [r7, #4]
 8000e84:	4619      	mov	r1, r3
 8000e86:	201d      	movs	r0, #29
 8000e88:	f000 f85e 	bl	8000f48 <writeRegister>
    writeRegister(LATENT,Latent);
 8000e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e90:	4619      	mov	r1, r3
 8000e92:	2022      	movs	r0, #34	; 0x22
 8000e94:	f000 f858 	bl	8000f48 <writeRegister>
    writeRegister(WINDOW,Window);
 8000e98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2023      	movs	r0, #35	; 0x23
 8000ea0:	f000 f852 	bl	8000f48 <writeRegister>

    //Setting the Axes
    readRegister(TAP_AXES,&reg,1);
 8000ea4:	f107 030f 	add.w	r3, r7, #15
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	202a      	movs	r0, #42	; 0x2a
 8000eae:	f000 f87b 	bl	8000fa8 <readRegister>
    reg += axes;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	73fb      	strb	r3, [r7, #15]
    writeRegister(TAP_AXES,reg);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	202a      	movs	r0, #42	; 0x2a
 8000ec2:	f000 f841 	bl	8000f48 <writeRegister>

    // Settings Int output
    readRegister(INT_MAP,&reg,1);
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	202f      	movs	r0, #47	; 0x2f
 8000ed0:	f000 f86a 	bl	8000fa8 <readRegister>
    //if (out == INT1) reg &= ~(1<<5); else reg |= (1<<5);
    reg |= (1<<5);
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
    writeRegister(INT_MAP,reg);
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	202f      	movs	r0, #47	; 0x2f
 8000ee4:	f000 f830 	bl	8000f48 <writeRegister>

    // Enabling the TAP interrupt
    readRegister(INT_ENABLE,&reg,1);
 8000ee8:	f107 030f 	add.w	r3, r7, #15
 8000eec:	2201      	movs	r2, #1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	202e      	movs	r0, #46	; 0x2e
 8000ef2:	f000 f859 	bl	8000fa8 <readRegister>
    reg |= (1<<5);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	73fb      	strb	r3, [r7, #15]
    writeRegister(INT_ENABLE,reg);
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	4619      	mov	r1, r3
 8000f04:	202e      	movs	r0, #46	; 0x2e
 8000f06:	f000 f81f 	bl	8000f48 <writeRegister>
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <ADXL_IntProto>:
/** Interrupt prototype
* @brief In order to interrupt flags being reset, the address 0x30 should be read.
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/
bool ADXL_IntProto(ADXL_InitTypeDef * adxl)	
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    uint8_t reg=0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
    
    readRegister(INT_SOURCE,&reg,1);	
 8000f1e:	f107 030f 	add.w	r3, r7, #15
 8000f22:	2201      	movs	r2, #1
 8000f24:	4619      	mov	r1, r3
 8000f26:	2030      	movs	r0, #48	; 0x30
 8000f28:	f000 f83e 	bl	8000fa8 <readRegister>
    if ((reg & adxl->Interrupt) == 0)  return false;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7a5a      	ldrb	r2, [r3, #9]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	4013      	ands	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <ADXL_IntProto+0x2c>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <ADXL_IntProto+0x2e>
    else                               return true;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
    if (address > 63)  address = 63;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5c:	d901      	bls.n	8000f62 <writeRegister+0x1a>
 8000f5e:	233f      	movs	r3, #63	; 0x3f
 8000f60:	71fb      	strb	r3, [r7, #7]
	
    // Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <writeRegister+0x58>)
 8000f72:	f001 f8bb 	bl	80020ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000f76:	1df9      	adds	r1, r7, #7
 8000f78:	230a      	movs	r3, #10
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <writeRegister+0x5c>)
 8000f7e:	f001 fdc3 	bl	8002b08 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000f82:	1db9      	adds	r1, r7, #6
 8000f84:	230a      	movs	r3, #10
 8000f86:	2201      	movs	r2, #1
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <writeRegister+0x5c>)
 8000f8a:	f001 fdbd 	bl	8002b08 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2110      	movs	r1, #16
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <writeRegister+0x58>)
 8000f94:	f001 f8aa 	bl	80020ec <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	20000354 	.word	0x20000354

08000fa8 <readRegister>:
* @address: 8-bit address of register
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/
static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
    if (address > 63)  address = 63;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b3f      	cmp	r3, #63	; 0x3f
 8000fbc:	d901      	bls.n	8000fc2 <readRegister+0x1a>
 8000fbe:	233f      	movs	r3, #63	; 0x3f
 8000fc0:	71fb      	strb	r3, [r7, #7]
    
    // Multiple Byte Read Settings
    if (num > 1)  address |= 0x40;
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d905      	bls.n	8000fd4 <readRegister+0x2c>
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	e004      	b.n	8000fde <readRegister+0x36>
    else	  address &= ~(0x40);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	71fb      	strb	r3, [r7, #7]
    
    // Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	71fb      	strb	r3, [r7, #7]
		
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <readRegister+0x78>)
 8000fee:	f001 f87d 	bl	80020ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000ff2:	1df9      	adds	r1, r7, #7
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <readRegister+0x7c>)
 8000ffa:	f001 fd85 	bl	8002b08 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	b29a      	uxth	r2, r3
 8001002:	230a      	movs	r3, #10
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <readRegister+0x7c>)
 8001008:	f001 fec1 	bl	8002d8e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_SET);	
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <readRegister+0x78>)
 8001012:	f001 f86b 	bl	80020ec <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40010800 	.word	0x40010800
 8001024:	20000354 	.word	0x20000354

08001028 <adxlBW>:
            10 		|  	100
            11 		|  	200
            12 		|  	400
*/
static void adxlBW(ADXL_InitTypeDef * adxl)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    uint8_t bwreg=0;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(BW_RATE,bwreg);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	4619      	mov	r1, r3
 8001038:	202c      	movs	r0, #44	; 0x2c
 800103a:	f7ff ff85 	bl	8000f48 <writeRegister>
    
    if (adxl->LPMode == LPMODE_LOWPOWER) 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d11a      	bne.n	800107c <adxlBW+0x54>
    {
        // Low power mode
        bwreg |= (1 << 4);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	73fb      	strb	r3, [r7, #15]
        if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	2b06      	cmp	r3, #6
 8001054:	d807      	bhi.n	8001066 <adxlBW+0x3e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	78db      	ldrb	r3, [r3, #3]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d903      	bls.n	8001066 <adxlBW+0x3e>
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3307      	adds	r3, #7
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e004      	b.n	8001070 <adxlBW+0x48>
        else                                          bwreg +=(adxl->Rate);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	78da      	ldrb	r2, [r3, #3]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4413      	add	r3, r2
 800106e:	73fb      	strb	r3, [r7, #15]
        writeRegister(BW_RATE,bwreg);	
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4619      	mov	r1, r3
 8001074:	202c      	movs	r0, #44	; 0x2c
 8001076:	f7ff ff67 	bl	8000f48 <writeRegister>
        // Normal Mode
        if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
        else                                          bwreg +=(adxl->Rate);
        writeRegister(BW_RATE,bwreg);	
    }
}
 800107a:	e015      	b.n	80010a8 <adxlBW+0x80>
        if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	78db      	ldrb	r3, [r3, #3]
 8001080:	2b05      	cmp	r3, #5
 8001082:	d807      	bhi.n	8001094 <adxlBW+0x6c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d903      	bls.n	8001094 <adxlBW+0x6c>
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	3306      	adds	r3, #6
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e004      	b.n	800109e <adxlBW+0x76>
        else                                          bwreg +=(adxl->Rate);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	78da      	ldrb	r2, [r3, #3]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	4413      	add	r3, r2
 800109c:	73fb      	strb	r3, [r7, #15]
        writeRegister(BW_RATE,bwreg);	
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4619      	mov	r1, r3
 80010a2:	202c      	movs	r0, #44	; 0x2c
 80010a4:	f7ff ff50 	bl	8000f48 <writeRegister>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <adxlFormat>:
                     1 		|  	+-4g
                     2 		|  	+-8g		
                     3 		|  	+-16g                                                           
*/
static void adxlFormat(ADXL_InitTypeDef * adxl)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    uint8_t formatreg=0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(DATA_FORMAT,formatreg);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4619      	mov	r1, r3
 80010c0:	2031      	movs	r0, #49	; 0x31
 80010c2:	f7ff ff41 	bl	8000f48 <writeRegister>
    formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	019b      	lsls	r3, r3, #6
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	015b      	lsls	r3, r3, #5
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	795b      	ldrb	r3, [r3, #5]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	73fb      	strb	r3, [r7, #15]
    formatreg += (adxl -> Range);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	791a      	ldrb	r2, [r3, #4]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	4413      	add	r3, r2
 80010fc:	73fb      	strb	r3, [r7, #15]
    writeRegister(DATA_FORMAT,formatreg);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4619      	mov	r1, r3
 8001102:	2031      	movs	r0, #49	; 0x31
 8001104:	f7ff ff20 	bl	8000f48 <writeRegister>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <StartReadAccel>:
/* INTERFACE                                                                */
/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void StartReadAccel (void const * argument)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag(NULL, (void *) 1);
 8001118:	2101      	movs	r1, #1
 800111a:	2000      	movs	r0, #0
 800111c:	f004 fae2 	bl	80056e4 <vTaskSetApplicationTaskTag>
// ::::::::::::::::::::::::::::: INIT :::::::::::::::::::::::::::::
	ADXL_InitStruct.SPIMode      = SPIMODE_4WIRE;
 8001120:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <StartReadAccel+0x1b0>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
	ADXL_InitStruct.IntMode      = INT_ACTIVEHIGH;
 8001126:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <StartReadAccel+0x1b0>)
 8001128:	2200      	movs	r2, #0
 800112a:	705a      	strb	r2, [r3, #1]
	ADXL_InitStruct.LPMode       = LPMODE_NORMAL;
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <StartReadAccel+0x1b0>)
 800112e:	2200      	movs	r2, #0
 8001130:	709a      	strb	r2, [r3, #2]
	ADXL_InitStruct.Rate         = BWRATE_100;
 8001132:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <StartReadAccel+0x1b0>)
 8001134:	220a      	movs	r2, #10
 8001136:	70da      	strb	r2, [r3, #3]
    ADXL_InitStruct.Range        = RANGE_2G;
 8001138:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <StartReadAccel+0x1b0>)
 800113a:	2200      	movs	r2, #0
 800113c:	711a      	strb	r2, [r3, #4]
    ADXL_InitStruct.Resolution   = RESOLUTION_FULL;
 800113e:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <StartReadAccel+0x1b0>)
 8001140:	2201      	movs	r2, #1
 8001142:	715a      	strb	r2, [r3, #5]
    ADXL_InitStruct.Justify      = JUSTIFY_SIGNED; 
 8001144:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <StartReadAccel+0x1b0>)
 8001146:	2200      	movs	r2, #0
 8001148:	719a      	strb	r2, [r3, #6]
    ADXL_InitStruct.AutoSleep    = AUTOSLEEPOFF;
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <StartReadAccel+0x1b0>)
 800114c:	2200      	movs	r2, #0
 800114e:	71da      	strb	r2, [r3, #7]
    ADXL_InitStruct.LinkMode     = LINKMODEOFF;   
 8001150:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <StartReadAccel+0x1b0>)
 8001152:	2200      	movs	r2, #0
 8001154:	721a      	strb	r2, [r3, #8]
    ADXL_InitStruct.Interrupt    = (INT_DATA_READY | INT_DOUBLE_TAP);
 8001156:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <StartReadAccel+0x1b0>)
 8001158:	22a0      	movs	r2, #160	; 0xa0
 800115a:	725a      	strb	r2, [r3, #9]
    ADXL_InitStruct.IntPin       = INT1;
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <StartReadAccel+0x1b0>)
 800115e:	2200      	movs	r2, #0
 8001160:	729a      	strb	r2, [r3, #10]

    while (true)
        {
            adxlStatus status = ADXL_Init (&ADXL_InitStruct);
 8001162:	4857      	ldr	r0, [pc, #348]	; (80012c0 <StartReadAccel+0x1b0>)
 8001164:	f7ff fcc4 	bl	8000af0 <ADXL_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	77fb      	strb	r3, [r7, #31]

            if (status == ADXL_OK)
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d114      	bne.n	800119c <StartReadAccel+0x8c>
            {

            	ADXL_Measure(ON);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fe00 	bl	8000d78 <ADXL_Measure>
                ADXL_IntProto(&ADXL_InitStruct);
 8001178:	4851      	ldr	r0, [pc, #324]	; (80012c0 <StartReadAccel+0x1b0>)
 800117a:	f7ff feca 	bl	8000f12 <ADXL_IntProto>
				ADXL_enableDoubleTap(INT1, (uint8_t)((1 << D0)), TAP_DURATION, TAP_THRESHOLD, TAP_LATENT, TAP_WINDOW);
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	2350      	movs	r3, #80	; 0x50
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2328      	movs	r3, #40	; 0x28
 8001188:	2228      	movs	r2, #40	; 0x28
 800118a:	2101      	movs	r1, #1
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fe62 	bl	8000e56 <ADXL_enableDoubleTap>
                ADXL_getAccel(ADXL_acc, OUTPUT_FLOAT);
 8001192:	2100      	movs	r1, #0
 8001194:	484b      	ldr	r0, [pc, #300]	; (80012c4 <StartReadAccel+0x1b4>)
 8001196:	f7ff fd5d 	bl	8000c54 <ADXL_getAccel>

                break;
 800119a:	e003      	b.n	80011a4 <StartReadAccel+0x94>
            }
            osDelay(200);
 800119c:	20c8      	movs	r0, #200	; 0xc8
 800119e:	f003 f800 	bl	80041a2 <osDelay>
        {
 80011a2:	e7de      	b.n	8001162 <StartReadAccel+0x52>
        }
    // ::::::::::::::::::::::::::::: SUPERLOOP :::::::::::::::::::::::::::::
        for (;;)
        {
        	osSemaphoreWait (AccelDataReadyHandle, osWaitForever);
 80011a4:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <StartReadAccel+0x1b8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f83f 	bl	8004230 <osSemaphoreWait>

        	int16_t ADXL_out[3]= {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	809a      	strh	r2, [r3, #4]
        	ADXL_out[0] = (int16_t)(ADXL_acc[0] * 1.0e4);
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <StartReadAccel+0x1b4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fb07 	bl	80007d4 <__aeabi_f2d>
 80011c6:	a33c      	add	r3, pc, #240	; (adr r3, 80012b8 <StartReadAccel+0x1a8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7fe ffc0 	bl	8000150 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fb54 	bl	8000884 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	b21b      	sxth	r3, r3
 80011e0:	833b      	strh	r3, [r7, #24]
        	ADXL_out[1] = (int16_t)(ADXL_acc[1] * 1.0e4);
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <StartReadAccel+0x1b4>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff faf4 	bl	80007d4 <__aeabi_f2d>
 80011ec:	a332      	add	r3, pc, #200	; (adr r3, 80012b8 <StartReadAccel+0x1a8>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7fe ffad 	bl	8000150 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fb41 	bl	8000884 <__aeabi_d2iz>
 8001202:	4603      	mov	r3, r0
 8001204:	b21b      	sxth	r3, r3
 8001206:	837b      	strh	r3, [r7, #26]
        	ADXL_out[2] = (int16_t)(ADXL_acc[2] * 1.0e4);
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <StartReadAccel+0x1b4>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fae1 	bl	80007d4 <__aeabi_f2d>
 8001212:	a329      	add	r3, pc, #164	; (adr r3, 80012b8 <StartReadAccel+0x1a8>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7fe ff9a 	bl	8000150 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fb2e 	bl	8000884 <__aeabi_d2iz>
 8001228:	4603      	mov	r3, r0
 800122a:	b21b      	sxth	r3, r3
 800122c:	83bb      	strh	r3, [r7, #28]

        	uint8_t packet[9] = {0};
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	711a      	strb	r2, [r3, #4]
        	packet[0] = (uint8_t)0xAA;
 800123c:	23aa      	movs	r3, #170	; 0xaa
 800123e:	733b      	strb	r3, [r7, #12]
        	packet[1] = (uint8_t)0x86;
 8001240:	2386      	movs	r3, #134	; 0x86
 8001242:	737b      	strb	r3, [r7, #13]
        	packet[2] = (uint8_t)(ADXL_out[0] & 0xFF);
 8001244:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73bb      	strb	r3, [r7, #14]
        	packet[3] = (uint8_t)(ADXL_out[0] >> 0x08);
 800124c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001250:	121b      	asrs	r3, r3, #8
 8001252:	b21b      	sxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	73fb      	strb	r3, [r7, #15]
        	packet[4] = (uint8_t)(ADXL_out[1] & 0xFF);
 8001258:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	743b      	strb	r3, [r7, #16]
			packet[5] = (uint8_t)(ADXL_out[1] >> 0x08);
 8001260:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001264:	121b      	asrs	r3, r3, #8
 8001266:	b21b      	sxth	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	747b      	strb	r3, [r7, #17]
			packet[6] = (uint8_t)(ADXL_out[2] & 0xFF);
 800126c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	74bb      	strb	r3, [r7, #18]
			packet[7] = (uint8_t)(ADXL_out[2] >> 0x08);
 8001274:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001278:	121b      	asrs	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	74fb      	strb	r3, [r7, #19]
        	packet[8] = (uint8_t)(packet[2] ^ packet[3] ^ packet[4] ^ packet[5] ^ packet[6] ^ packet[7]);
 8001280:	7bba      	ldrb	r2, [r7, #14]
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4053      	eors	r3, r2
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	4053      	eors	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	7c7b      	ldrb	r3, [r7, #17]
 8001290:	4053      	eors	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	7cbb      	ldrb	r3, [r7, #18]
 8001296:	4053      	eors	r3, r2
 8001298:	b2da      	uxtb	r2, r3
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	4053      	eors	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	753b      	strb	r3, [r7, #20]
        	HAL_UART_Transmit(&huart1, (uint8_t *)packet, sizeof(packet), 10);
 80012a2:	f107 010c 	add.w	r1, r7, #12
 80012a6:	230a      	movs	r3, #10
 80012a8:	2209      	movs	r2, #9
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <StartReadAccel+0x1bc>)
 80012ac:	f002 fd7e 	bl	8003dac <HAL_UART_Transmit>
        {
 80012b0:	e778      	b.n	80011a4 <StartReadAccel+0x94>
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40c38800 	.word	0x40c38800
 80012c0:	2000007c 	.word	0x2000007c
 80012c4:	20000088 	.word	0x20000088
 80012c8:	200000ac 	.word	0x200000ac
 80012cc:	2000043c 	.word	0x2000043c

080012d0 <HAL_GPIO_EXTI_Callback>:
        }
}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	if (ADXL_IntProto(&ADXL_InitStruct) == true) {
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_GPIO_EXTI_Callback+0x48>)
 80012dc:	f7ff fe19 	bl	8000f12 <ADXL_IntProto>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d014      	beq.n	8001310 <HAL_GPIO_EXTI_Callback+0x40>
		if (GPIO_Pin == 1) {	// Data ready interrupt
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d108      	bne.n	80012fe <HAL_GPIO_EXTI_Callback+0x2e>
			ADXL_getAccel(ADXL_acc, OUTPUT_FLOAT);
 80012ec:	2100      	movs	r1, #0
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_GPIO_EXTI_Callback+0x4c>)
 80012f0:	f7ff fcb0 	bl	8000c54 <ADXL_getAccel>
			osSemaphoreRelease(AccelDataReadyHandle);
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_GPIO_EXTI_Callback+0x50>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 ffe7 	bl	80042cc <osSemaphoreRelease>
		}
		if (GPIO_Pin == 2) {	// Double tap interrupt
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d105      	bne.n	8001310 <HAL_GPIO_EXTI_Callback+0x40>
			double_tap_count++;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_GPIO_EXTI_Callback+0x54>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_GPIO_EXTI_Callback+0x54>)
 800130e:	801a      	strh	r2, [r3, #0]
		}
    }
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000007c 	.word	0x2000007c
 800131c:	20000088 	.word	0x20000088
 8001320:	200000ac 	.word	0x200000ac
 8001324:	200000a0 	.word	0x200000a0

08001328 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <vApplicationGetIdleTaskMemory+0x28>)
 8001338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <vApplicationGetIdleTaskMemory+0x2c>)
 800133e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200000b0 	.word	0x200000b0
 8001354:	20000154 	.word	0x20000154

08001358 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b090      	sub	sp, #64	; 0x40
 800135c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of AccelDataReady */
  osSemaphoreDef(AccelDataReady);
 800135e:	2300      	movs	r3, #0
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
 8001362:	2300      	movs	r3, #0
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
  AccelDataReadyHandle = osSemaphoreCreate(osSemaphore(AccelDataReady), 1);
 8001366:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f002 ff2c 	bl	80041ca <osSemaphoreCreate>
 8001372:	4603      	mov	r3, r0
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <MX_FREERTOS_Init+0x70>)
 8001376:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_FREERTOS_Init+0x74>)
 800137a:	f107 041c 	add.w	r4, r7, #28
 800137e:	461d      	mov	r5, r3
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f002 feb9 	bl	800410a <osThreadCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <MX_FREERTOS_Init+0x78>)
 800139c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadAccel */
  osThreadDef(ReadAccel, StartReadAccel, osPriorityNormal, 0, 128);
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_FREERTOS_Init+0x7c>)
 80013a0:	463c      	mov	r4, r7
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadAccelHandle = osThreadCreate(osThread(ReadAccel), NULL);
 80013b0:	463b      	mov	r3, r7
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fea8 	bl	800410a <osThreadCreate>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <MX_FREERTOS_Init+0x80>)
 80013be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013c0:	bf00      	nop
 80013c2:	3740      	adds	r7, #64	; 0x40
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	200000ac 	.word	0x200000ac
 80013cc:	080069f4 	.word	0x080069f4
 80013d0:	200000a4 	.word	0x200000a4
 80013d4:	08006a1c 	.word	0x08006a1c
 80013d8:	200000a8 	.word	0x200000a8

080013dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	vTaskSetApplicationTaskTag(NULL, (void *) 2);
 80013e4:	2102      	movs	r1, #2
 80013e6:	2000      	movs	r0, #0
 80013e8:	f004 f97c 	bl	80056e4 <vTaskSetApplicationTaskTag>
	/* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <StartDefaultTask+0x24>)
 80013f2:	f000 fe93 	bl	800211c <HAL_GPIO_TogglePin>
    osDelay(1000);
 80013f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013fa:	f002 fed2 	bl	80041a2 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013fe:	e7f5      	b.n	80013ec <StartDefaultTask+0x10>
 8001400:	40011000 	.word	0x40011000

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <MX_GPIO_Init+0x144>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <MX_GPIO_Init+0x144>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <MX_GPIO_Init+0x144>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <MX_GPIO_Init+0x144>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a44      	ldr	r2, [pc, #272]	; (8001548 <MX_GPIO_Init+0x144>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <MX_GPIO_Init+0x144>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <MX_GPIO_Init+0x144>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a3e      	ldr	r2, [pc, #248]	; (8001548 <MX_GPIO_Init+0x144>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <MX_GPIO_Init+0x144>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <MX_GPIO_Init+0x144>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a38      	ldr	r2, [pc, #224]	; (8001548 <MX_GPIO_Init+0x144>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <MX_GPIO_Init+0x144>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	4833      	ldr	r0, [pc, #204]	; (800154c <MX_GPIO_Init+0x148>)
 8001480:	f000 fe34 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port, ADXL_SPI1_CS_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2110      	movs	r1, #16
 8001488:	4831      	ldr	r0, [pc, #196]	; (8001550 <MX_GPIO_Init+0x14c>)
 800148a:	f000 fe2f 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_TAG1_Pin|DEBUG_TAG2_Pin|DEBUG_IDLE_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	21e0      	movs	r1, #224	; 0xe0
 8001492:	4830      	ldr	r0, [pc, #192]	; (8001554 <MX_GPIO_Init+0x150>)
 8001494:	f000 fe2a 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4619      	mov	r1, r3
 80014b0:	4826      	ldr	r0, [pc, #152]	; (800154c <MX_GPIO_Init+0x148>)
 80014b2:	f000 fc97 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_SPI1_CS_Pin;
 80014b6:	2310      	movs	r3, #16
 80014b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADXL_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <MX_GPIO_Init+0x14c>)
 80014ce:	f000 fc89 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_INT1_Pin;
 80014d2:	2301      	movs	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_GPIO_Init+0x154>)
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADXL_INT1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x150>)
 80014e6:	f000 fc7d 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_INT2_Pin;
 80014ea:	2302      	movs	r3, #2
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_GPIO_Init+0x154>)
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADXL_INT2_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <MX_GPIO_Init+0x150>)
 80014fe:	f000 fc71 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_TAG1_Pin|DEBUG_TAG2_Pin|DEBUG_IDLE_Pin;
 8001502:	23e0      	movs	r3, #224	; 0xe0
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4619      	mov	r1, r3
 8001518:	480e      	ldr	r0, [pc, #56]	; (8001554 <MX_GPIO_Init+0x150>)
 800151a:	f000 fc63 	bl	8001de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2105      	movs	r1, #5
 8001522:	2006      	movs	r0, #6
 8001524:	f000 fc33 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001528:	2006      	movs	r0, #6
 800152a:	f000 fc4c 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	2007      	movs	r0, #7
 8001534:	f000 fc2b 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001538:	2007      	movs	r0, #7
 800153a:	f000 fc44 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	40011000 	.word	0x40011000
 8001550:	40010800 	.word	0x40010800
 8001554:	40010c00 	.word	0x40010c00
 8001558:	10110000 	.word	0x10110000

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f000 fb2e 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f812 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff ff4c 	bl	8001404 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800156c:	f000 fa8c 	bl	8001a88 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001570:	f000 fa18 	bl	80019a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001574:	f000 f8ae 	bl	80016d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <main+0x2c>)
 800157a:	f002 f819 	bl	80035b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800157e:	f7ff feeb 	bl	8001358 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001582:	f002 fdbb 	bl	80040fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001586:	e7fe      	b.n	8001586 <main+0x2a>
 8001588:	200003f4 	.word	0x200003f4

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b090      	sub	sp, #64	; 0x40
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2228      	movs	r2, #40	; 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f005 f92e 	bl	80067fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80015ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fdd3 	bl	8002180 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015e0:	f000 f872 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 f840 	bl	8002684 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800160a:	f000 f85d 	bl	80016c8 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <TaskSwitchedIn>:

/* USER CODE BEGIN 4 */
void TaskSwitchedIn(uint32_t tag)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	switch (tag)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d003      	beq.n	800162e <TaskSwitchedIn+0x16>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d004      	beq.n	8001636 <TaskSwitchedIn+0x1e>
		break;
	case 2:
		DEBUG_TAG2_GPIO_Port->BSRR = DEBUG_TAG2_Pin;
		break;
	}
}
 800162c:	e007      	b.n	800163e <TaskSwitchedIn+0x26>
		DEBUG_TAG1_GPIO_Port->BSRR = DEBUG_TAG1_Pin;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <TaskSwitchedIn+0x30>)
 8001630:	2220      	movs	r2, #32
 8001632:	611a      	str	r2, [r3, #16]
		break;
 8001634:	e003      	b.n	800163e <TaskSwitchedIn+0x26>
		DEBUG_TAG2_GPIO_Port->BSRR = DEBUG_TAG2_Pin;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <TaskSwitchedIn+0x30>)
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	611a      	str	r2, [r3, #16]
		break;
 800163c:	bf00      	nop
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40010c00 	.word	0x40010c00

0800164c <TaskSwitchedOut>:


void TaskSwitchedOut(uint32_t tag)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	switch (tag)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d003      	beq.n	8001662 <TaskSwitchedOut+0x16>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d005      	beq.n	800166c <TaskSwitchedOut+0x20>
		break;
	case 2:
		DEBUG_TAG2_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG2_Pin << 16U;
		break;
	}
}
 8001660:	e009      	b.n	8001676 <TaskSwitchedOut+0x2a>
		DEBUG_TAG1_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG1_Pin << 16U;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <TaskSwitchedOut+0x34>)
 8001664:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001668:	611a      	str	r2, [r3, #16]
		break;
 800166a:	e004      	b.n	8001676 <TaskSwitchedOut+0x2a>
		DEBUG_TAG2_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG2_Pin << 16U;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <TaskSwitchedOut+0x34>)
 800166e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001672:	611a      	str	r2, [r3, #16]
		break;
 8001674:	bf00      	nop
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40010c00 	.word	0x40010c00

08001684 <vApplicationIdleHook>:

void vApplicationIdleHook (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	DEBUG_IDLE_GPIO_Port->BSRR = DEBUG_IDLE_Pin;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <vApplicationIdleHook+0x1c>)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	611a      	str	r2, [r3, #16]
	__NOP();
 800168e:	bf00      	nop
	DEBUG_IDLE_GPIO_Port->BSRR = (uint32_t)DEBUG_IDLE_Pin << 16U;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <vApplicationIdleHook+0x1c>)
 8001692:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001696:	611a      	str	r2, [r3, #16]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40010c00 	.word	0x40010c00

080016a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016b6:	f000 fa99 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
//  if (htim->Instance == TIM2) {
//
//  	}
  /* USER CODE END Callback 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_SPI1_Init+0x64>)
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <MX_SPI1_Init+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0x64>)
 80016e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_SPI1_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0x64>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0x64>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0x64>)
 8001700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0x64>)
 8001708:	2210      	movs	r2, #16
 800170a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_SPI1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0x64>)
 8001720:	220a      	movs	r2, #10
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_SPI1_Init+0x64>)
 8001726:	f001 f96b 	bl	8002a00 <HAL_SPI_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001730:	f7ff ffca 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000354 	.word	0x20000354
 800173c:	40013000 	.word	0x40013000

08001740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <HAL_SPI_MspInit+0x88>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d12f      	bne.n	80017c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_SPI_MspInit+0x8c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_SPI_MspInit+0x8c>)
 8001766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_SPI_MspInit+0x8c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_SPI_MspInit+0x8c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_SPI_MspInit+0x8c>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_SPI_MspInit+0x8c>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADXL_SPI1_SCK_Pin|ADXL_SPI1_MOSI_Pin;
 8001790:	23a0      	movs	r3, #160	; 0xa0
 8001792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <HAL_SPI_MspInit+0x90>)
 80017a4:	f000 fb1e 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADXL_SPI1_MISO_Pin;
 80017a8:	2340      	movs	r3, #64	; 0x40
 80017aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ADXL_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_SPI_MspInit+0x90>)
 80017bc:	f000 fb12 	bl	8001de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40013000 	.word	0x40013000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010800 	.word	0x40010800

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_MspInit+0x68>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_MspInit+0x68>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_MspInit+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x68>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_MspInit+0x68>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x68>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	210f      	movs	r1, #15
 800180e:	f06f 0001 	mvn.w	r0, #1
 8001812:	f000 fabc 	bl	8001d8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_MspInit+0x6c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_MspInit+0x6c>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_InitTick+0xd0>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_InitTick+0xd0>)
 8001860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_InitTick+0xd0>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f001 f871 	bl	8002964 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001882:	f001 f85b 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8001886:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	4a23      	ldr	r2, [pc, #140]	; (8001918 <HAL_InitTick+0xd4>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3b01      	subs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_InitTick+0xd8>)
 8001898:	4a21      	ldr	r2, [pc, #132]	; (8001920 <HAL_InitTick+0xdc>)
 800189a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_InitTick+0xd8>)
 800189e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_InitTick+0xd8>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_InitTick+0xd8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_InitTick+0xd8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_InitTick+0xd8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018bc:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_InitTick+0xd8>)
 80018be:	f001 fe27 	bl	8003510 <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80018c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11b      	bne.n	8001908 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018d0:	4812      	ldr	r0, [pc, #72]	; (800191c <HAL_InitTick+0xd8>)
 80018d2:	f001 fe6d 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80018dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018e4:	2019      	movs	r0, #25
 80018e6:	f000 fa6e 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d808      	bhi.n	8001902 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	2019      	movs	r0, #25
 80018f6:	f000 fa4a 	bl	8001d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_InitTick+0xe0>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e002      	b.n	8001908 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800190c:	4618      	mov	r0, r3
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	200003ac 	.word	0x200003ac
 8001920:	40012c00 	.word	0x40012c00
 8001924:	20000004 	.word	0x20000004

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADXL_INT1_Pin);
 8001956:	2001      	movs	r0, #1
 8001958:	f000 fbfa 	bl	8002150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADXL_INT2_Pin);
 8001964:	2002      	movs	r0, #2
 8001966:	f000 fbf3 	bl	8002150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM1_UP_IRQHandler+0x10>)
 8001976:	f001 fe6d 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003ac 	.word	0x200003ac

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f001 fe63 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200003f4 	.word	0x200003f4

08001998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80019ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ec:	f001 fd90 	bl	8003510 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019f6:	f7ff fe67 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a08:	f001 ff2c 	bl	8003864 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a12:	f7ff fe59 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a24:	f002 f902 	bl	8003c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a2e:	f7ff fe4b 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200003f4 	.word	0x200003f4

08001a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a50:	d113      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_Base_MspInit+0x44>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_Base_MspInit+0x44>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x44>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f000 f98d 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 f9a6 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART1_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	f002 f924 	bl	8003d0c <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aca:	f7ff fdfd 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000043c 	.word	0x2000043c
 8001ad8:	40013800 	.word	0x40013800

08001adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_UART_MspInit+0x8c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d131      	bne.n	8001b60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <HAL_UART_MspInit+0x94>)
 8001b42:	f000 f94f 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x94>)
 8001b5c:	f000 f942 	bl	8001de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800

08001b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b74:	f7ff ff10 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b7a:	490c      	ldr	r1, [pc, #48]	; (8001bac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b90:	4c09      	ldr	r4, [pc, #36]	; (8001bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f004 fe8b 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba2:	f7ff fcdb 	bl	800155c <main>
  bx lr
 8001ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001bb0:	08006a74 	.word	0x08006a74
  ldr r2, =_sbss
 8001bb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001bb8:	20001314 	.word	0x20001314

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x28>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x28>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f8d1 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f7ff fe34 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fdfa 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_IncTick+0x1c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_IncTick+0x20>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <HAL_IncTick+0x20>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000484 	.word	0x20000484

08001c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_GetTick+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000484 	.word	0x20000484

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4906      	ldr	r1, [pc, #24]	; (8001cbc <__NVIC_EnableIRQ+0x34>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff4f 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff64 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ffb2 	bl	8001d14 <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff81 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff57 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b08b      	sub	sp, #44	; 0x2c
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	e169      	b.n	80020cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8158 	bne.w	80020c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a9a      	ldr	r2, [pc, #616]	; (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d05e      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e20:	4a98      	ldr	r2, [pc, #608]	; (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d875      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e26:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d058      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e2c:	4a96      	ldr	r2, [pc, #600]	; (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d86f      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e32:	4a96      	ldr	r2, [pc, #600]	; (800208c <HAL_GPIO_Init+0x2a8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d052      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e38:	4a94      	ldr	r2, [pc, #592]	; (800208c <HAL_GPIO_Init+0x2a8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d869      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a94      	ldr	r2, [pc, #592]	; (8002090 <HAL_GPIO_Init+0x2ac>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d04c      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e44:	4a92      	ldr	r2, [pc, #584]	; (8002090 <HAL_GPIO_Init+0x2ac>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d863      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a92      	ldr	r2, [pc, #584]	; (8002094 <HAL_GPIO_Init+0x2b0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d046      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e50:	4a90      	ldr	r2, [pc, #576]	; (8002094 <HAL_GPIO_Init+0x2b0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d85d      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d82a      	bhi.n	8001eb0 <HAL_GPIO_Init+0xcc>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d859      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_GPIO_Init+0x80>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001ecb 	.word	0x08001ecb
 8001e70:	08001f0d 	.word	0x08001f0d
 8001e74:	08001f13 	.word	0x08001f13
 8001e78:	08001f13 	.word	0x08001f13
 8001e7c:	08001f13 	.word	0x08001f13
 8001e80:	08001f13 	.word	0x08001f13
 8001e84:	08001f13 	.word	0x08001f13
 8001e88:	08001f13 	.word	0x08001f13
 8001e8c:	08001f13 	.word	0x08001f13
 8001e90:	08001f13 	.word	0x08001f13
 8001e94:	08001f13 	.word	0x08001f13
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001f13 	.word	0x08001f13
 8001ea0:	08001f13 	.word	0x08001f13
 8001ea4:	08001f13 	.word	0x08001f13
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	4a79      	ldr	r2, [pc, #484]	; (8002098 <HAL_GPIO_Init+0x2b4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb6:	e02c      	b.n	8001f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e029      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e024      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e01f      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e01a      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e013      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	611a      	str	r2, [r3, #16]
          break;
 8001efe:	e009      	b.n	8001f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	615a      	str	r2, [r3, #20]
          break;
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          break;
 8001f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d801      	bhi.n	8001f1e <HAL_GPIO_Init+0x13a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_Init+0x13e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2bff      	cmp	r3, #255	; 0xff
 8001f28:	d802      	bhi.n	8001f30 <HAL_GPIO_Init+0x14c>
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x152>
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	3b08      	subs	r3, #8
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	6a39      	ldr	r1, [r7, #32]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80b1 	beq.w	80020c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_GPIO_Init+0x2b8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a4c      	ldr	r2, [pc, #304]	; (800209c <HAL_GPIO_Init+0x2b8>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f7c:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <HAL_GPIO_Init+0x2c0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_GPIO_Init+0x1ec>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <HAL_GPIO_Init+0x2c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_GPIO_Init+0x1e8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3e      	ldr	r2, [pc, #248]	; (80020ac <HAL_GPIO_Init+0x2c8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe2:	492f      	ldr	r1, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	492c      	ldr	r1, [pc, #176]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4928      	ldr	r1, [pc, #160]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4922      	ldr	r1, [pc, #136]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	491e      	ldr	r1, [pc, #120]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4918      	ldr	r1, [pc, #96]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4914      	ldr	r1, [pc, #80]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d021      	beq.n	80020b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e021      	b.n	80020c6 <HAL_GPIO_Init+0x2e2>
 8002082:	bf00      	nop
 8002084:	10320000 	.word	0x10320000
 8002088:	10310000 	.word	0x10310000
 800208c:	10220000 	.word	0x10220000
 8002090:	10210000 	.word	0x10210000
 8002094:	10120000 	.word	0x10120000
 8002098:	10110000 	.word	0x10110000
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40010800 	.word	0x40010800
 80020a8:	40010c00 	.word	0x40010c00
 80020ac:	40011000 	.word	0x40011000
 80020b0:	40011400 	.word	0x40011400
 80020b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_GPIO_Init+0x304>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4909      	ldr	r1, [pc, #36]	; (80020e8 <HAL_GPIO_Init+0x304>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f47f ae8e 	bne.w	8001df8 <HAL_GPIO_Init+0x14>
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	372c      	adds	r7, #44	; 0x2c
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43d9      	mvns	r1, r3
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	400b      	ands	r3, r1
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f8ae 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e272      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ac:	4b8f      	ldr	r3, [pc, #572]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d112      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
 80021b8:	4b8c      	ldr	r3, [pc, #560]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d10b      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c6:	4b89      	ldr	r3, [pc, #548]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06c      	beq.n	80022ac <HAL_RCC_OscConfig+0x12c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d168      	bne.n	80022ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e24c      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x76>
 80021e8:	4b80      	ldr	r3, [pc, #512]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a7f      	ldr	r2, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	e02e      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b78      	ldr	r3, [pc, #480]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a77      	ldr	r2, [pc, #476]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0xbc>
 8002222:	4b72      	ldr	r3, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b6f      	ldr	r3, [pc, #444]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6e      	ldr	r2, [pc, #440]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 800223c:	4b6b      	ldr	r3, [pc, #428]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6a      	ldr	r2, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b68      	ldr	r3, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a67      	ldr	r2, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fcd8 	bl	8001c10 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fcd4 	bl	8001c10 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e200      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xe4>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fcc4 	bl	8001c10 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fcc0 	bl	8001c10 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1ec      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x10c>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d063      	beq.n	8002382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ba:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d11c      	bne.n	800230c <HAL_RCC_OscConfig+0x18c>
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1c0      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4939      	ldr	r1, [pc, #228]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	e03a      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fc79 	bl	8001c10 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff fc75 	bl	8001c10 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1a1      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fc58 	bl	8001c10 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff fc54 	bl	8001c10 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e180      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03a      	beq.n	8002404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7ff fc38 	bl	8001c10 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff fc34 	bl	8001c10 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e160      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 fafe 	bl	80029c4 <RCC_Delay>
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fc1e 	bl	8001c10 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d6:	e00f      	b.n	80023f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fc1a 	bl	8001c10 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d908      	bls.n	80023f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e146      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	42420000 	.word	0x42420000
 80023f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e9      	bne.n	80023d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a6 	beq.w	800255e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b8b      	ldr	r3, [pc, #556]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b88      	ldr	r3, [pc, #544]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a87      	ldr	r2, [pc, #540]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b82      	ldr	r3, [pc, #520]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7e      	ldr	r2, [pc, #504]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7ff fbdb 	bl	8001c10 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7ff fbd7 	bl	8001c10 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e103      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x312>
 8002484:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	e02d      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x334>
 800249a:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a69      	ldr	r2, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a66      	ldr	r2, [pc, #408]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	e01c      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x356>
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a57      	ldr	r2, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb8b 	bl	8001c10 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff fb87 	bl	8001c10 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0b1      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCC_OscConfig+0x37e>
 8002520:	e014      	b.n	800254c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fb75 	bl	8001c10 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff fb71 	bl	8001c10 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e09b      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a3b      	ldr	r2, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d061      	beq.n	8002638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d146      	bne.n	800260a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_RCC_OscConfig+0x4cc>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff fb45 	bl	8001c10 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff fb41 	bl	8001c10 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e06d      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4921      	ldr	r1, [pc, #132]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a19      	ldr	r1, [r3, #32]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	430b      	orrs	r3, r1
 80025d6:	491b      	ldr	r1, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x4cc>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fb15 	bl	8001c10 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff fb11 	bl	8001c10 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e03d      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x46a>
 8002608:	e035      	b.n	8002676 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_RCC_OscConfig+0x4cc>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff fafe 	bl	8001c10 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7ff fafa 	bl	8001c10 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e026      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x498>
 8002636:	e01e      	b.n	8002676 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e019      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x500>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	429a      	cmp	r2, r3
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d0      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4965      	ldr	r1, [pc, #404]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a52      	ldr	r2, [pc, #328]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d040      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d115      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e073      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06b      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4936      	ldr	r1, [pc, #216]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7ff fa4c 	bl	8001c10 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7ff fa48 	bl	8001c10 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e053      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d210      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4922      	ldr	r1, [pc, #136]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f806 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000
 8002848:	40021000 	.word	0x40021000
 800284c:	08006a40 	.word	0x08006a40
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b04      	cmp	r3, #4
 8002880:	d002      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x30>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x36>
 8002886:	e027      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	e027      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	0c9b      	lsrs	r3, r3, #18
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_GetSysClockFreq+0x94>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c5b      	lsrs	r3, r3, #17
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	fb03 f202 	mul.w	r2, r3, r2
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e004      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	613b      	str	r3, [r7, #16]
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028da:	613b      	str	r3, [r7, #16]
      break;
 80028dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028de:	693b      	ldr	r3, [r7, #16]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	08006a58 	.word	0x08006a58
 80028f8:	08006a68 	.word	0x08006a68
 80028fc:	003d0900 	.word	0x003d0900

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <HAL_RCC_GetHCLKFreq+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff2 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	08006a50 	.word	0x08006a50

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffde 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0adb      	lsrs	r3, r3, #11
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	08006a50 	.word	0x08006a50

08002964 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	220f      	movs	r2, #15
 8002972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_GetClockConfig+0x58>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCC_GetClockConfig+0x58>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_GetClockConfig+0x58>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCC_GetClockConfig+0x58>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0207 	and.w	r2, r3, #7
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40022000 	.word	0x40022000

080029c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <RCC_Delay+0x34>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <RCC_Delay+0x38>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0a5b      	lsrs	r3, r3, #9
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e0:	bf00      	nop
  }
  while (Delay --);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <RCC_Delay+0x1c>
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000000 	.word	0x20000000
 80029fc:	10624dd3 	.word	0x10624dd3

08002a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e076      	b.n	8002b00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d108      	bne.n	8002a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a22:	d009      	beq.n	8002a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
 8002a2a:	e005      	b.n	8002a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fe74 	bl	8001740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	ea42 0103 	orr.w	r1, r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	0c1a      	lsrs	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f002 0204 	and.w	r2, r2, #4
 8002ade:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_SPI_Transmit+0x22>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e12d      	b.n	8002d86 <HAL_SPI_Transmit+0x27e>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b32:	f7ff f86d 	bl	8001c10 <HAL_GetTick>
 8002b36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b4c:	e116      	b.n	8002d7c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_SPI_Transmit+0x52>
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b5e:	e10d      	b.n	8002d7c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2203      	movs	r2, #3
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d007      	beq.n	8002be6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bee:	d14f      	bne.n	8002c90 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_Transmit+0xf6>
 8002bf8:	8afb      	ldrh	r3, [r7, #22]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d142      	bne.n	8002c84 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c22:	e02f      	b.n	8002c84 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d112      	bne.n	8002c58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	1c9a      	adds	r2, r3, #2
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c56:	e015      	b.n	8002c84 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c58:	f7fe ffda 	bl	8001c10 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d803      	bhi.n	8002c70 <HAL_SPI_Transmit+0x168>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c6e:	d102      	bne.n	8002c76 <HAL_SPI_Transmit+0x16e>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c82:	e07b      	b.n	8002d7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ca      	bne.n	8002c24 <HAL_SPI_Transmit+0x11c>
 8002c8e:	e050      	b.n	8002d32 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Transmit+0x196>
 8002c98:	8afb      	ldrh	r3, [r7, #22]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d144      	bne.n	8002d28 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cc4:	e030      	b.n	8002d28 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d113      	bne.n	8002cfc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cfa:	e015      	b.n	8002d28 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfc:	f7fe ff88 	bl	8001c10 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d803      	bhi.n	8002d14 <HAL_SPI_Transmit+0x20c>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d12:	d102      	bne.n	8002d1a <HAL_SPI_Transmit+0x212>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d26:	e029      	b.n	8002d7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1c9      	bne.n	8002cc6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fbcc 	bl	80034d4 <SPI_EndRxTxTransaction>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e003      	b.n	8002d7c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b088      	sub	sp, #32
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002db2:	e0fb      	b.n	8002fac <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dbc:	d112      	bne.n	8002de4 <HAL_SPI_Receive+0x56>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8ef 	bl	8002fbe <HAL_SPI_TransmitReceive>
 8002de0:	4603      	mov	r3, r0
 8002de2:	e0e8      	b.n	8002fb6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_SPI_Receive+0x64>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0e1      	b.n	8002fb6 <HAL_SPI_Receive+0x228>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dfa:	f7fe ff09 	bl	8001c10 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Receive+0x7e>
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e10:	e0cc      	b.n	8002fac <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2204      	movs	r2, #4
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d10f      	bne.n	8002e7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d007      	beq.n	8002e98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d16a      	bne.n	8002f76 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ea0:	e032      	b.n	8002f08 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d115      	bne.n	8002edc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f103 020c 	add.w	r2, r3, #12
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eda:	e015      	b.n	8002f08 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002edc:	f7fe fe98 	bl	8001c10 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d803      	bhi.n	8002ef4 <HAL_SPI_Receive+0x166>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef2:	d102      	bne.n	8002efa <HAL_SPI_Receive+0x16c>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f06:	e051      	b.n	8002fac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1c7      	bne.n	8002ea2 <HAL_SPI_Receive+0x114>
 8002f12:	e035      	b.n	8002f80 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d113      	bne.n	8002f4a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f48:	e015      	b.n	8002f76 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4a:	f7fe fe61 	bl	8001c10 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d803      	bhi.n	8002f62 <HAL_SPI_Receive+0x1d4>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f60:	d102      	bne.n	8002f68 <HAL_SPI_Receive+0x1da>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f74:	e01a      	b.n	8002fac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1c9      	bne.n	8002f14 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fa53 	bl	8003430 <SPI_EndRxTransaction>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
 8002fa2:	e003      	b.n	8002fac <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08c      	sub	sp, #48	; 0x30
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x26>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e198      	b.n	8003316 <HAL_SPI_TransmitReceive+0x358>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fec:	f7fe fe10 	bl	8001c10 <HAL_GetTick>
 8002ff0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800300a:	2b01      	cmp	r3, #1
 800300c:	d00f      	beq.n	800302e <HAL_SPI_TransmitReceive+0x70>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003014:	d107      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x68>
 800301e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800302c:	e16d      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x82>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x82>
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003046:	e160      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b04      	cmp	r3, #4
 8003052:	d003      	beq.n	800305c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	887a      	ldrh	r2, [r7, #2]
 8003072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d007      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d17c      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x10a>
 80030c2:	8b7b      	ldrh	r3, [r7, #26]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d16a      	bne.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ec:	e057      	b.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x176>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x176>
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d113      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d119      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x1b8>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d014      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	b292      	uxth	r2, r2
 8003158:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003176:	f7fe fd4b 	bl	8001c10 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003182:	429a      	cmp	r2, r3
 8003184:	d80b      	bhi.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318c:	d007      	beq.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800319c:	e0b5      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1a2      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x130>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d19d      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x130>
 80031b2:	e080      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x204>
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d16f      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e8:	e05b      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11c      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x274>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d017      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x274>
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d114      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d119      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x2b6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d014      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003270:	2301      	movs	r3, #1
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003274:	f7fe fccc 	bl	8001c10 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003280:	429a      	cmp	r2, r3
 8003282:	d803      	bhi.n	800328c <HAL_SPI_TransmitReceive+0x2ce>
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328a:	d102      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x2d4>
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80032a0:	e033      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d19e      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x22c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d199      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f90a 	bl	80034d4 <SPI_EndRxTxTransaction>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032d2:	e01a      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003300:	e003      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003316:	4618      	mov	r0, r3
 8003318:	3730      	adds	r7, #48	; 0x30
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003330:	f7fe fc6e 	bl	8001c10 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003340:	f7fe fc66 	bl	8001c10 <HAL_GetTick>
 8003344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	0d1b      	lsrs	r3, r3, #20
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	e054      	b.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335e:	d050      	beq.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003360:	f7fe fc56 	bl	8001c10 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13d      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338e:	d111      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003398:	d004      	beq.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d107      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033bc:	d10f      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e017      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3b01      	subs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	429a      	cmp	r2, r3
 800341e:	d19b      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000

08003430 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003444:	d111      	bne.n	800346a <SPI_EndRxTransaction+0x3a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344e:	d004      	beq.n	800345a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003458:	d107      	bne.n	800346a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003472:	d117      	bne.n	80034a4 <SPI_EndRxTransaction+0x74>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d112      	bne.n	80034a4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2200      	movs	r2, #0
 8003486:	2101      	movs	r1, #1
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff ff49 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01a      	beq.n	80034ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e013      	b.n	80034cc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff36 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e000      	b.n	80034cc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff ff18 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f043 0220 	orr.w	r2, r3, #32
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e000      	b.n	8003508 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fe fa82 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fa74 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e03a      	b.n	800363e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_TIM_Base_Start_IT+0x98>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x58>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d009      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x58>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_TIM_Base_Start_IT+0x9c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x58>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <HAL_TIM_Base_Start_IT+0xa0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d111      	bne.n	800362c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b06      	cmp	r3, #6
 8003618:	d010      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e007      	b.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800

08003654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0202 	mvn.w	r2, #2
 8003680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f9b4 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9a7 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f9b6 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0204 	mvn.w	r2, #4
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f98a 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f97d 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f98c 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f960 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f953 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f962 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b10      	cmp	r3, #16
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0210 	mvn.w	r2, #16
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2208      	movs	r2, #8
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f936 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f929 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f938 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd ff66 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa7b 	bl	8003cfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d10e      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d107      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8fc 	bl	8003a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d10e      	bne.n	800385c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b20      	cmp	r3, #32
 800384a:	d107      	bne.n	800385c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0220 	mvn.w	r2, #32
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa46 	bl	8003ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIM_ConfigClockSource+0x1c>
 800387c:	2302      	movs	r3, #2
 800387e:	e0b4      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x186>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800389e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b8:	d03e      	beq.n	8003938 <HAL_TIM_ConfigClockSource+0xd4>
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	f200 8087 	bhi.w	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c6:	f000 8086 	beq.w	80039d6 <HAL_TIM_ConfigClockSource+0x172>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	d87f      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d01a      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xa6>
 80038d4:	2b70      	cmp	r3, #112	; 0x70
 80038d6:	d87b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b60      	cmp	r3, #96	; 0x60
 80038da:	d050      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x11a>
 80038dc:	2b60      	cmp	r3, #96	; 0x60
 80038de:	d877      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b50      	cmp	r3, #80	; 0x50
 80038e2:	d03c      	beq.n	800395e <HAL_TIM_ConfigClockSource+0xfa>
 80038e4:	2b50      	cmp	r3, #80	; 0x50
 80038e6:	d873      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d058      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x13a>
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d86f      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b30      	cmp	r3, #48	; 0x30
 80038f2:	d064      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 80038f4:	2b30      	cmp	r3, #48	; 0x30
 80038f6:	d86b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d060      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d867      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05c      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b10      	cmp	r3, #16
 8003906:	d05a      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	e062      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	f000 f968 	bl	8003bee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800392c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	609a      	str	r2, [r3, #8]
      break;
 8003936:	e04f      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	f000 f951 	bl	8003bee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800395a:	609a      	str	r2, [r3, #8]
      break;
 800395c:	e03c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	461a      	mov	r2, r3
 800396c:	f000 f8c8 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2150      	movs	r1, #80	; 0x50
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f91f 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 800397c:	e02c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	461a      	mov	r2, r3
 800398c:	f000 f8e6 	bl	8003b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2160      	movs	r1, #96	; 0x60
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f90f 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 800399c:	e01c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	461a      	mov	r2, r3
 80039ac:	f000 f8a8 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2140      	movs	r1, #64	; 0x40
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f8ff 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80039bc:	e00c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 f8f6 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e000      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
	...

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <TIM_Base_SetConfig+0xb8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <TIM_Base_SetConfig+0xbc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a25      	ldr	r2, [pc, #148]	; (8003afc <TIM_Base_SetConfig+0xc0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <TIM_Base_SetConfig+0xb8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <TIM_Base_SetConfig+0xbc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <TIM_Base_SetConfig+0xc0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <TIM_Base_SetConfig+0xb8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0210 	bic.w	r2, r3, #16
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	031b      	lsls	r3, r3, #12
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f043 0307 	orr.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e046      	b.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800

08003ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e042      	b.n	8003da4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fed2 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f91d 	bl	8003f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d16d      	bne.n	8003ea8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x2c>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e066      	b.n	8003eaa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	; 0x21
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dea:	f7fd ff11 	bl	8001c10 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e04:	d108      	bne.n	8003e18 <HAL_UART_Transmit+0x6c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e003      	b.n	8003e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e20:	e02a      	b.n	8003e78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f840 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e036      	b.n	8003eaa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	3302      	adds	r3, #2
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e007      	b.n	8003e6a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	3301      	adds	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1cf      	bne.n	8003e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f810 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e006      	b.n	8003eaa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b090      	sub	sp, #64	; 0x40
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec2:	e050      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eca:	d04c      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed2:	f7fd fe9d 	bl	8001c10 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d241      	bcs.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f02:	637a      	str	r2, [r7, #52]	; 0x34
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f36:	623a      	str	r2, [r7, #32]
 8003f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69f9      	ldr	r1, [r7, #28]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e00f      	b.n	8003f86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d09f      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3740      	adds	r7, #64	; 0x40
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fca:	f023 030c 	bic.w	r3, r3, #12
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <UART_SetConfig+0x114>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d103      	bne.n	8004000 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7fe fca0 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	e002      	b.n	8004006 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004000:	f7fe fc88 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8004004:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009a      	lsls	r2, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <UART_SetConfig+0x118>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	0119      	lsls	r1, r3, #4
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009a      	lsls	r2, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	fbb2 f2f3 	udiv	r2, r2, r3
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <UART_SetConfig+0x118>)
 800403e:	fba3 0302 	umull	r0, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2064      	movs	r0, #100	; 0x64
 8004046:	fb00 f303 	mul.w	r3, r0, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	3332      	adds	r3, #50	; 0x32
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <UART_SetConfig+0x118>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405c:	4419      	add	r1, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009a      	lsls	r2, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	fbb2 f2f3 	udiv	r2, r2, r3
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <UART_SetConfig+0x118>)
 8004076:	fba3 0302 	umull	r0, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2064      	movs	r0, #100	; 0x64
 800407e:	fb00 f303 	mul.w	r3, r0, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	3332      	adds	r3, #50	; 0x32
 8004088:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <UART_SetConfig+0x118>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	f003 020f 	and.w	r2, r3, #15
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	440a      	add	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40013800 	.word	0x40013800
 80040a8:	51eb851f 	.word	0x51eb851f

080040ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040be:	2b84      	cmp	r3, #132	; 0x84
 80040c0:	d005      	beq.n	80040ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	3303      	adds	r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e0:	f3ef 8305 	mrs	r3, IPSR
 80040e4:	607b      	str	r3, [r7, #4]
  return(result);
 80040e6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004100:	f001 f91e 	bl	8005340 <vTaskStartScheduler>
  
  return osOK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	bd80      	pop	{r7, pc}

0800410a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800410a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410c:	b089      	sub	sp, #36	; 0x24
 800410e:	af04      	add	r7, sp, #16
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <osThreadCreate+0x54>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685c      	ldr	r4, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691e      	ldr	r6, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ffb8 	bl	80040ac <makeFreeRtosPriority>
 800413c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004146:	9202      	str	r2, [sp, #8]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	9100      	str	r1, [sp, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4632      	mov	r2, r6
 8004150:	4629      	mov	r1, r5
 8004152:	4620      	mov	r0, r4
 8004154:	f000 ff1b 	bl	8004f8e <xTaskCreateStatic>
 8004158:	4603      	mov	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e01c      	b.n	8004198 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685c      	ldr	r4, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800416a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff9a 	bl	80040ac <makeFreeRtosPriority>
 8004178:	4602      	mov	r2, r0
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	9200      	str	r2, [sp, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4632      	mov	r2, r6
 8004186:	4629      	mov	r1, r5
 8004188:	4620      	mov	r0, r4
 800418a:	f000 ff5c 	bl	8005046 <xTaskCreate>
 800418e:	4603      	mov	r3, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d001      	beq.n	8004198 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <osDelay+0x16>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	e000      	b.n	80041ba <osDelay+0x18>
 80041b8:	2301      	movs	r3, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 f88c 	bl	80052d8 <vTaskDelay>
  
  return osOK;
 80041c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af02      	add	r7, sp, #8
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <osSemaphoreCreate+0x32>
    if (count == 1) {
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10a      	bne.n	80041f8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2203      	movs	r2, #3
 80041e8:	9200      	str	r2, [sp, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	2001      	movs	r0, #1
 80041f0:	f000 f9ba 	bl	8004568 <xQueueGenericCreateStatic>
 80041f4:	4603      	mov	r3, r0
 80041f6:	e016      	b.n	8004226 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e014      	b.n	8004226 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d110      	bne.n	8004224 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004202:	2203      	movs	r2, #3
 8004204:	2100      	movs	r1, #0
 8004206:	2001      	movs	r0, #1
 8004208:	f000 fa25 	bl	8004656 <xQueueGenericCreate>
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <osSemaphoreCreate+0x56>
 8004214:	2300      	movs	r3, #0
 8004216:	2200      	movs	r2, #0
 8004218:	2100      	movs	r1, #0
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa78 	bl	8004710 <xQueueGenericSend>
      return sema;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	e000      	b.n	8004226 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004224:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	e03a      	b.n	80042be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004252:	d103      	bne.n	800425c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e009      	b.n	8004270 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <osSemaphoreWait+0x40>
      ticks = 1;
 800426c:	2301      	movs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004270:	f7ff ff33 	bl	80040da <inHandlerMode>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d017      	beq.n	80042aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	461a      	mov	r2, r3
 8004280:	2100      	movs	r1, #0
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fcdc 	bl	8004c40 <xQueueReceiveFromISR>
 8004288:	4603      	mov	r3, r0
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <osSemaphoreWait+0x62>
      return osErrorOS;
 800428e:	23ff      	movs	r3, #255	; 0xff
 8004290:	e015      	b.n	80042be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <osSemaphoreWait+0x8c>
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <osSemaphoreWait+0x98>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	e008      	b.n	80042bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fbbb 	bl	8004a28 <xQueueSemaphoreTake>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d001      	beq.n	80042bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80042b8:	23ff      	movs	r3, #255	; 0xff
 80042ba:	e000      	b.n	80042be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80042dc:	f7ff fefd 	bl	80040da <inHandlerMode>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80042e6:	f107 0308 	add.w	r3, r7, #8
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fb0d 	bl	800490c <xQueueGiveFromISR>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80042f8:	23ff      	movs	r3, #255	; 0xff
 80042fa:	e017      	b.n	800432c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <osSemaphoreRelease+0x5e>
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <osSemaphoreRelease+0x68>)
 8004304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	e00a      	b.n	800432a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004314:	2300      	movs	r3, #0
 8004316:	2200      	movs	r2, #0
 8004318:	2100      	movs	r1, #0
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9f8 	bl	8004710 <xQueueGenericSend>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004326:	23ff      	movs	r3, #255	; 0xff
 8004328:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f103 0208 	add.w	r2, r3, #8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004350:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f103 0208 	add.w	r2, r3, #8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0208 	add.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ea:	d103      	bne.n	80043f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e00c      	b.n	800440e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3308      	adds	r3, #8
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	e002      	b.n	8004402 <vListInsert+0x2e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d2f6      	bcs.n	80043fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6852      	ldr	r2, [r2, #4]
 8004464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d103      	bne.n	8004478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	1e5a      	subs	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
	...

08004498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044c2:	f001 fec3 	bl	800624c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	3b01      	subs	r3, #1
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	441a      	add	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01a      	beq.n	8004556 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3310      	adds	r3, #16
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f989 	bl	800583c <xTaskRemoveFromEventList>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d012      	beq.n	8004556 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <xQueueGenericReset+0xcc>)
 8004532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	e009      	b.n	8004556 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3310      	adds	r3, #16
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fef6 	bl	8004338 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fef1 	bl	8004338 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004556:	f001 fea9 	bl	80062ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800455a:	2301      	movs	r3, #1
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08e      	sub	sp, #56	; 0x38
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <xQueueGenericCreateStatic+0x52>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <xQueueGenericCreateStatic+0x56>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericCreateStatic+0x58>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	623b      	str	r3, [r7, #32]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <xQueueGenericCreateStatic+0x7e>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueGenericCreateStatic+0x82>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueGenericCreateStatic+0x84>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61fb      	str	r3, [r7, #28]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004606:	2348      	movs	r3, #72	; 0x48
 8004608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b48      	cmp	r3, #72	; 0x48
 800460e:	d00a      	beq.n	8004626 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61bb      	str	r3, [r7, #24]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004638:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f843 	bl	80046d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3730      	adds	r7, #48	; 0x30
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08a      	sub	sp, #40	; 0x28
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <xQueueGenericCreate+0x2a>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	613b      	str	r3, [r7, #16]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e004      	b.n	8004696 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	fb02 f303 	mul.w	r3, r2, r3
 8004694:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3348      	adds	r3, #72	; 0x48
 800469a:	4618      	mov	r0, r3
 800469c:	f001 fed6 	bl	800644c <pvPortMalloc>
 80046a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00f      	beq.n	80046c8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3348      	adds	r3, #72	; 0x48
 80046ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046b6:	79fa      	ldrb	r2, [r7, #7]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f805 	bl	80046d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046c8:	69bb      	ldr	r3, [r7, #24]
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e002      	b.n	80046f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004700:	2101      	movs	r1, #1
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f7ff fec8 	bl	8004498 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08e      	sub	sp, #56	; 0x38
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800471e:	2300      	movs	r3, #0
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <xQueueGenericSend+0x32>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <xQueueGenericSend+0x40>
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <xQueueGenericSend+0x44>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <xQueueGenericSend+0x46>
 8004754:	2300      	movs	r3, #0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <xQueueGenericSend+0x60>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d103      	bne.n	800477e <xQueueGenericSend+0x6e>
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <xQueueGenericSend+0x72>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <xQueueGenericSend+0x74>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xQueueGenericSend+0x8e>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	623b      	str	r3, [r7, #32]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800479e:	f001 fa13 	bl	8005bc8 <xTaskGetSchedulerState>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <xQueueGenericSend+0x9e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <xQueueGenericSend+0xa2>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <xQueueGenericSend+0xa4>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <xQueueGenericSend+0xbe>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	61fb      	str	r3, [r7, #28]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ce:	f001 fd3d 	bl	800624c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <xQueueGenericSend+0xd4>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d129      	bne.n	8004838 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ea:	f000 fac0 	bl	8004d6e <prvCopyDataToQueue>
 80047ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	3324      	adds	r3, #36	; 0x24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 f81d 	bl	800583c <xTaskRemoveFromEventList>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004808:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <xQueueGenericSend+0x1f8>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	e00a      	b.n	8004830 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004820:	4b39      	ldr	r3, [pc, #228]	; (8004908 <xQueueGenericSend+0x1f8>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004830:	f001 fd3c 	bl	80062ac <vPortExitCritical>
				return pdPASS;
 8004834:	2301      	movs	r3, #1
 8004836:	e063      	b.n	8004900 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800483e:	f001 fd35 	bl	80062ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004842:	2300      	movs	r3, #0
 8004844:	e05c      	b.n	8004900 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f855 	bl	8005900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800485a:	f001 fd27 	bl	80062ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800485e:	f000 fdd9 	bl	8005414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004862:	f001 fcf3 	bl	800624c <vPortEnterCritical>
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800486c:	b25b      	sxtb	r3, r3
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004872:	d103      	bne.n	800487c <xQueueGenericSend+0x16c>
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004882:	b25b      	sxtb	r3, r3
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004888:	d103      	bne.n	8004892 <xQueueGenericSend+0x182>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004892:	f001 fd0b 	bl	80062ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004896:	1d3a      	adds	r2, r7, #4
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 f844 	bl	800592c <xTaskCheckForTimeOut>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d124      	bne.n	80048f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ac:	f000 fb57 	bl	8004f5e <prvIsQueueFull>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d018      	beq.n	80048e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	3310      	adds	r3, #16
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 ff98 	bl	80057f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c6:	f000 fae2 	bl	8004e8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ca:	f000 fdb1 	bl	8005430 <xTaskResumeAll>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f47f af7c 	bne.w	80047ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <xQueueGenericSend+0x1f8>)
 80048d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	e772      	b.n	80047ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ea:	f000 fad0 	bl	8004e8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ee:	f000 fd9f 	bl	8005430 <xTaskResumeAll>
 80048f2:	e76c      	b.n	80047ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f6:	f000 faca 	bl	8004e8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048fa:	f000 fd99 	bl	8005430 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048fe:	2300      	movs	r3, #0
		}
	}
}
 8004900:	4618      	mov	r0, r3
 8004902:	3738      	adds	r7, #56	; 0x38
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	; 0x38
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	623b      	str	r3, [r7, #32]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <xQueueGiveFromISR+0x48>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	61fb      	str	r3, [r7, #28]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <xQueueGiveFromISR+0x58>
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueGiveFromISR+0x5c>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueGiveFromISR+0x5e>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <xQueueGiveFromISR+0x78>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61bb      	str	r3, [r7, #24]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004984:	f001 fd24 	bl	80063d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004988:	f3ef 8211 	mrs	r2, BASEPRI
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617a      	str	r2, [r7, #20]
 800499e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049a0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d22b      	bcs.n	8004a0c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ce:	d112      	bne.n	80049f6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d016      	beq.n	8004a06 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 ff2d 	bl	800583c <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e007      	b.n	8004a06 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fa:	3301      	adds	r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	b25a      	sxtb	r2, r3
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a06:	2301      	movs	r3, #1
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	e001      	b.n	8004a10 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3738      	adds	r7, #56	; 0x38
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	623b      	str	r3, [r7, #32]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61fb      	str	r3, [r7, #28]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a78:	f001 f8a6 	bl	8005bc8 <xTaskGetSchedulerState>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <xQueueSemaphoreTake+0x60>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <xQueueSemaphoreTake+0x64>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <xQueueSemaphoreTake+0x66>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	61bb      	str	r3, [r7, #24]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aa8:	f001 fbd0 	bl	800624c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d024      	beq.n	8004b02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	1e5a      	subs	r2, r3, #1
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004ac8:	f001 fa48 	bl	8005f5c <pvTaskIncrementMutexHeldCount>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00f      	beq.n	8004afa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	3310      	adds	r3, #16
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 feac 	bl	800583c <xTaskRemoveFromEventList>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aea:	4b54      	ldr	r3, [pc, #336]	; (8004c3c <xQueueSemaphoreTake+0x214>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004afa:	f001 fbd7 	bl	80062ac <vPortExitCritical>
				return pdPASS;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e097      	b.n	8004c32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	617b      	str	r3, [r7, #20]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b24:	f001 fbc2 	bl	80062ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e082      	b.n	8004c32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fee2 	bl	8005900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b40:	f001 fbb4 	bl	80062ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b44:	f000 fc66 	bl	8005414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b48:	f001 fb80 	bl	800624c <vPortEnterCritical>
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b52:	b25b      	sxtb	r3, r3
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b58:	d103      	bne.n	8004b62 <xQueueSemaphoreTake+0x13a>
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6e:	d103      	bne.n	8004b78 <xQueueSemaphoreTake+0x150>
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b78:	f001 fb98 	bl	80062ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b7c:	463a      	mov	r2, r7
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fed1 	bl	800592c <xTaskCheckForTimeOut>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d132      	bne.n	8004bf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b92:	f000 f9ce 	bl	8004f32 <prvIsQueueEmpty>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d026      	beq.n	8004bea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004ba4:	f001 fb52 	bl	800624c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 f829 	bl	8005c04 <xTaskPriorityInherit>
 8004bb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bb4:	f001 fb7a 	bl	80062ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fe17 	bl	80057f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bc8:	f000 f961 	bl	8004e8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bcc:	f000 fc30 	bl	8005430 <xTaskResumeAll>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f47f af68 	bne.w	8004aa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <xQueueSemaphoreTake+0x214>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	e75e      	b.n	8004aa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bec:	f000 f94f 	bl	8004e8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf0:	f000 fc1e 	bl	8005430 <xTaskResumeAll>
 8004bf4:	e758      	b.n	8004aa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf8:	f000 f949 	bl	8004e8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bfc:	f000 fc18 	bl	8005430 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c02:	f000 f996 	bl	8004f32 <prvIsQueueEmpty>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f43f af4d 	beq.w	8004aa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c14:	f001 fb1a 	bl	800624c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c1a:	f000 f891 	bl	8004d40 <prvGetDisinheritPriorityAfterTimeout>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f8f8 	bl	8005e1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c2c:	f001 fb3e 	bl	80062ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3738      	adds	r7, #56	; 0x38
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	; 0x38
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	623b      	str	r3, [r7, #32]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <xQueueReceiveFromISR+0x3a>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <xQueueReceiveFromISR+0x3e>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueReceiveFromISR+0x40>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61fb      	str	r3, [r7, #28]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c9a:	f001 fb99 	bl	80063d0 <vPortValidateInterruptPriority>
	__asm volatile
 8004c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	61ba      	str	r2, [r7, #24]
 8004cb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d02f      	beq.n	8004d26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd4:	f000 f8b5 	bl	8004e42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	1e5a      	subs	r2, r3, #1
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce8:	d112      	bne.n	8004d10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fda0 	bl	800583c <xTaskRemoveFromEventList>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e007      	b.n	8004d20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d14:	3301      	adds	r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	b25a      	sxtb	r2, r3
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d20:	2301      	movs	r3, #1
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
 8004d24:	e001      	b.n	8004d2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f383 8811 	msr	BASEPRI, r3
}
 8004d34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3738      	adds	r7, #56	; 0x38
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1c3 0307 	rsb	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e001      	b.n	8004d62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d62:	68fb      	ldr	r3, [r7, #12]
	}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b086      	sub	sp, #24
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10d      	bne.n	8004da8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d14d      	bne.n	8004e30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 ffb9 	bl	8005d10 <xTaskPriorityDisinherit>
 8004d9e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	e043      	b.n	8004e30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d119      	bne.n	8004de2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6898      	ldr	r0, [r3, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	461a      	mov	r2, r3
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	f001 fda3 	bl	8006904 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	441a      	add	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d32b      	bcc.n	8004e30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	e026      	b.n	8004e30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68d8      	ldr	r0, [r3, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	461a      	mov	r2, r3
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	f001 fd89 	bl	8006904 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	425b      	negs	r3, r3
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d207      	bcs.n	8004e1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	425b      	negs	r3, r3
 8004e18:	441a      	add	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d105      	bne.n	8004e30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e38:	697b      	ldr	r3, [r7, #20]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d018      	beq.n	8004e86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d303      	bcc.n	8004e76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6838      	ldr	r0, [r7, #0]
 8004e82:	f001 fd3f 	bl	8006904 <memcpy>
	}
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e96:	f001 f9d9 	bl	800624c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea2:	e011      	b.n	8004ec8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fcc3 	bl	800583c <xTaskRemoveFromEventList>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ebc:	f000 fd98 	bl	80059f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dce9      	bgt.n	8004ea4 <prvUnlockQueue+0x16>
 8004ed0:	e000      	b.n	8004ed4 <prvUnlockQueue+0x46>
					break;
 8004ed2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	22ff      	movs	r2, #255	; 0xff
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004edc:	f001 f9e6 	bl	80062ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ee0:	f001 f9b4 	bl	800624c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eec:	e011      	b.n	8004f12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3310      	adds	r3, #16
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fc9e 	bl	800583c <xTaskRemoveFromEventList>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f06:	f000 fd73 	bl	80059f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dce9      	bgt.n	8004eee <prvUnlockQueue+0x60>
 8004f1a:	e000      	b.n	8004f1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	22ff      	movs	r2, #255	; 0xff
 8004f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f26:	f001 f9c1 	bl	80062ac <vPortExitCritical>
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f3a:	f001 f987 	bl	800624c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e001      	b.n	8004f50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f50:	f001 f9ac 	bl	80062ac <vPortExitCritical>

	return xReturn;
 8004f54:	68fb      	ldr	r3, [r7, #12]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f66:	f001 f971 	bl	800624c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d102      	bne.n	8004f7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e001      	b.n	8004f80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f80:	f001 f994 	bl	80062ac <vPortExitCritical>

	return xReturn;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b08e      	sub	sp, #56	; 0x38
 8004f92:	af04      	add	r7, sp, #16
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	623b      	str	r3, [r7, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <xTaskCreateStatic+0x46>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	61fb      	str	r3, [r7, #28]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fd4:	23a4      	movs	r3, #164	; 0xa4
 8004fd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2ba4      	cmp	r3, #164	; 0xa4
 8004fdc:	d00a      	beq.n	8004ff4 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61bb      	str	r3, [r7, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01e      	beq.n	8005038 <xTaskCreateStatic+0xaa>
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	2202      	movs	r2, #2
 800500e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005012:	2300      	movs	r3, #0
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	f107 0314 	add.w	r3, r7, #20
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f850 	bl	80050d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005032:	f000 f8e7 	bl	8005204 <prvAddNewTaskToReadyList>
 8005036:	e001      	b.n	800503c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800503c:	697b      	ldr	r3, [r7, #20]
	}
 800503e:	4618      	mov	r0, r3
 8005040:	3728      	adds	r7, #40	; 0x28
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005046:	b580      	push	{r7, lr}
 8005048:	b08c      	sub	sp, #48	; 0x30
 800504a:	af04      	add	r7, sp, #16
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f001 f9f6 	bl	800644c <pvPortMalloc>
 8005060:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00e      	beq.n	8005086 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005068:	20a4      	movs	r0, #164	; 0xa4
 800506a:	f001 f9ef 	bl	800644c <pvPortMalloc>
 800506e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
 800507c:	e005      	b.n	800508a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f001 faa8 	bl	80065d4 <vPortFree>
 8005084:	e001      	b.n	800508a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d017      	beq.n	80050c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005098:	88fa      	ldrh	r2, [r7, #6]
 800509a:	2300      	movs	r3, #0
 800509c:	9303      	str	r3, [sp, #12]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	9302      	str	r3, [sp, #8]
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f80e 	bl	80050d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b4:	69f8      	ldr	r0, [r7, #28]
 80050b6:	f000 f8a5 	bl	8005204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050ba:	2301      	movs	r3, #1
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e002      	b.n	80050c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050c6:	69bb      	ldr	r3, [r7, #24]
	}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050e8:	3b01      	subs	r3, #1
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	617b      	str	r3, [r7, #20]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	e012      	b.n	8005144 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	7819      	ldrb	r1, [r3, #0]
 8005126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	3334      	adds	r3, #52	; 0x34
 800512e:	460a      	mov	r2, r1
 8005130:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d006      	beq.n	800514c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3301      	adds	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d9e9      	bls.n	800511e <prvInitialiseNewTask+0x4e>
 800514a:	e000      	b.n	800514e <prvInitialiseNewTask+0x7e>
		{
			break;
 800514c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	2b06      	cmp	r3, #6
 800515a:	d901      	bls.n	8005160 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800515c:	2306      	movs	r3, #6
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2200      	movs	r2, #0
 8005170:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	3304      	adds	r3, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff f8fd 	bl	8004376 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	3318      	adds	r3, #24
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff f8f8 	bl	8004376 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	f1c3 0207 	rsb	r2, r3, #7
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	2200      	movs	r2, #0
 80051a0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	3350      	adds	r3, #80	; 0x50
 80051b6:	224c      	movs	r2, #76	; 0x4c
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 fb1e 	bl	80067fc <memset>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <prvInitialiseNewTask+0x128>)
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <prvInitialiseNewTask+0x12c>)
 80051ca:	659a      	str	r2, [r3, #88]	; 0x58
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <prvInitialiseNewTask+0x130>)
 80051d0:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	69b8      	ldr	r0, [r7, #24]
 80051d8:	f000 ff3a 	bl	8006050 <pxPortInitialiseStack>
 80051dc:	4602      	mov	r2, r0
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ee:	bf00      	nop
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200011d4 	.word	0x200011d4
 80051fc:	2000123c 	.word	0x2000123c
 8005200:	200012a4 	.word	0x200012a4

08005204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800520c:	f001 f81e 	bl	800624c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <prvAddNewTaskToReadyList+0xb8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	4a29      	ldr	r2, [pc, #164]	; (80052bc <prvAddNewTaskToReadyList+0xb8>)
 8005218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800521a:	4b29      	ldr	r3, [pc, #164]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005222:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005228:	4b24      	ldr	r3, [pc, #144]	; (80052bc <prvAddNewTaskToReadyList+0xb8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d110      	bne.n	8005252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005230:	f000 fc04 	bl	8005a3c <prvInitialiseTaskLists>
 8005234:	e00d      	b.n	8005252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005236:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <prvAddNewTaskToReadyList+0xc0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800523e:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	429a      	cmp	r2, r3
 800524a:	d802      	bhi.n	8005252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800524c:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <prvAddNewTaskToReadyList+0xc4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <prvAddNewTaskToReadyList+0xc4>)
 800525a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	2201      	movs	r2, #1
 8005262:	409a      	lsls	r2, r3
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <prvAddNewTaskToReadyList+0xc8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	4a18      	ldr	r2, [pc, #96]	; (80052cc <prvAddNewTaskToReadyList+0xc8>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <prvAddNewTaskToReadyList+0xcc>)
 800527c:	441a      	add	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7ff f882 	bl	800438e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800528a:	f001 f80f 	bl	80062ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <prvAddNewTaskToReadyList+0xc0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d207      	bcs.n	80052b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <prvAddNewTaskToReadyList+0xd0>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000588 	.word	0x20000588
 80052c0:	20000488 	.word	0x20000488
 80052c4:	20000594 	.word	0x20000594
 80052c8:	200005a4 	.word	0x200005a4
 80052cc:	20000590 	.word	0x20000590
 80052d0:	2000048c 	.word	0x2000048c
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d017      	beq.n	800531a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <vTaskDelay+0x60>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <vTaskDelay+0x30>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	60bb      	str	r3, [r7, #8]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005308:	f000 f884 	bl	8005414 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800530c:	2100      	movs	r1, #0
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fe38 	bl	8005f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005314:	f000 f88c 	bl	8005430 <xTaskResumeAll>
 8005318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <vTaskDelay+0x64>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200005b0 	.word	0x200005b0
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800534e:	463a      	mov	r2, r7
 8005350:	1d39      	adds	r1, r7, #4
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	4618      	mov	r0, r3
 8005358:	f7fb ffe6 	bl	8001328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	9202      	str	r2, [sp, #8]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	2300      	movs	r3, #0
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	460a      	mov	r2, r1
 800536e:	4921      	ldr	r1, [pc, #132]	; (80053f4 <vTaskStartScheduler+0xb4>)
 8005370:	4821      	ldr	r0, [pc, #132]	; (80053f8 <vTaskStartScheduler+0xb8>)
 8005372:	f7ff fe0c 	bl	8004f8e <xTaskCreateStatic>
 8005376:	4603      	mov	r3, r0
 8005378:	4a20      	ldr	r2, [pc, #128]	; (80053fc <vTaskStartScheduler+0xbc>)
 800537a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800537c:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <vTaskStartScheduler+0xbc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e001      	b.n	800538e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d11b      	bne.n	80053cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <vTaskStartScheduler+0xc0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3350      	adds	r3, #80	; 0x50
 80053ae:	4a15      	ldr	r2, [pc, #84]	; (8005404 <vTaskStartScheduler+0xc4>)
 80053b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <vTaskStartScheduler+0xc8>)
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <vTaskStartScheduler+0xcc>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <vTaskStartScheduler+0xd0>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053c6:	f000 febf 	bl	8006148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053ca:	e00e      	b.n	80053ea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d2:	d10a      	bne.n	80053ea <vTaskStartScheduler+0xaa>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60fb      	str	r3, [r7, #12]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <vTaskStartScheduler+0xa8>
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	08006a38 	.word	0x08006a38
 80053f8:	08005a09 	.word	0x08005a09
 80053fc:	200005ac 	.word	0x200005ac
 8005400:	20000488 	.word	0x20000488
 8005404:	2000005c 	.word	0x2000005c
 8005408:	200005a8 	.word	0x200005a8
 800540c:	20000594 	.word	0x20000594
 8005410:	2000058c 	.word	0x2000058c

08005414 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <vTaskSuspendAll+0x18>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a03      	ldr	r2, [pc, #12]	; (800542c <vTaskSuspendAll+0x18>)
 8005420:	6013      	str	r3, [r2, #0]
}
 8005422:	bf00      	nop
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	200005b0 	.word	0x200005b0

08005430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <xTaskResumeAll+0x114>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <xTaskResumeAll+0x2c>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	603b      	str	r3, [r7, #0]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800545c:	f000 fef6 	bl	800624c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005460:	4b38      	ldr	r3, [pc, #224]	; (8005544 <xTaskResumeAll+0x114>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	4a37      	ldr	r2, [pc, #220]	; (8005544 <xTaskResumeAll+0x114>)
 8005468:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546a:	4b36      	ldr	r3, [pc, #216]	; (8005544 <xTaskResumeAll+0x114>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d161      	bne.n	8005536 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005472:	4b35      	ldr	r3, [pc, #212]	; (8005548 <xTaskResumeAll+0x118>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d05d      	beq.n	8005536 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800547a:	e02e      	b.n	80054da <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800547c:	4b33      	ldr	r3, [pc, #204]	; (800554c <xTaskResumeAll+0x11c>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe ffdb 	bl	8004444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe ffd6 	bl	8004444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	2201      	movs	r2, #1
 800549e:	409a      	lsls	r2, r3
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <xTaskResumeAll+0x120>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <xTaskResumeAll+0x120>)
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4a27      	ldr	r2, [pc, #156]	; (8005554 <xTaskResumeAll+0x124>)
 80054b8:	441a      	add	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fe ff64 	bl	800438e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <xTaskResumeAll+0x128>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054d4:	4b21      	ldr	r3, [pc, #132]	; (800555c <xTaskResumeAll+0x12c>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054da:	4b1c      	ldr	r3, [pc, #112]	; (800554c <xTaskResumeAll+0x11c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1cc      	bne.n	800547c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054e8:	f000 fb4a 	bl	8005b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054ec:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <xTaskResumeAll+0x130>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054f8:	f000 f836 	bl	8005568 <xTaskIncrementTick>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <xTaskResumeAll+0x12c>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3b01      	subs	r3, #1
 800550c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f1      	bne.n	80054f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005514:	4b12      	ldr	r3, [pc, #72]	; (8005560 <xTaskResumeAll+0x130>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800551a:	4b10      	ldr	r3, [pc, #64]	; (800555c <xTaskResumeAll+0x12c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005522:	2301      	movs	r3, #1
 8005524:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <xTaskResumeAll+0x134>)
 8005528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005536:	f000 feb9 	bl	80062ac <vPortExitCritical>

	return xAlreadyYielded;
 800553a:	68bb      	ldr	r3, [r7, #8]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	200005b0 	.word	0x200005b0
 8005548:	20000588 	.word	0x20000588
 800554c:	20000548 	.word	0x20000548
 8005550:	20000590 	.word	0x20000590
 8005554:	2000048c 	.word	0x2000048c
 8005558:	20000488 	.word	0x20000488
 800555c:	2000059c 	.word	0x2000059c
 8005560:	20000598 	.word	0x20000598
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005572:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <xTaskIncrementTick+0x150>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 808d 	bne.w	8005696 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800557c:	4b4f      	ldr	r3, [pc, #316]	; (80056bc <xTaskIncrementTick+0x154>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005584:	4a4d      	ldr	r2, [pc, #308]	; (80056bc <xTaskIncrementTick+0x154>)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d120      	bne.n	80055d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005590:	4b4b      	ldr	r3, [pc, #300]	; (80056c0 <xTaskIncrementTick+0x158>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <xTaskIncrementTick+0x46>
 80055b0:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <xTaskIncrementTick+0x158>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	4b43      	ldr	r3, [pc, #268]	; (80056c4 <xTaskIncrementTick+0x15c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a41      	ldr	r2, [pc, #260]	; (80056c0 <xTaskIncrementTick+0x158>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4a41      	ldr	r2, [pc, #260]	; (80056c4 <xTaskIncrementTick+0x15c>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <xTaskIncrementTick+0x160>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <xTaskIncrementTick+0x160>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	f000 fad7 	bl	8005b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055d2:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <xTaskIncrementTick+0x164>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d34d      	bcc.n	8005678 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055dc:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <xTaskIncrementTick+0x158>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <xTaskIncrementTick+0x82>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <xTaskIncrementTick+0x84>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <xTaskIncrementTick+0x164>)
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055f6:	601a      	str	r2, [r3, #0]
					break;
 80055f8:	e03e      	b.n	8005678 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <xTaskIncrementTick+0x158>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d203      	bcs.n	800561a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005612:	4a2e      	ldr	r2, [pc, #184]	; (80056cc <xTaskIncrementTick+0x164>)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6013      	str	r3, [r2, #0]
						break;
 8005618:	e02e      	b.n	8005678 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3304      	adds	r3, #4
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe ff10 	bl	8004444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	3318      	adds	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe ff07 	bl	8004444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	2201      	movs	r2, #1
 800563c:	409a      	lsls	r2, r3
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <xTaskIncrementTick+0x168>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	4a22      	ldr	r2, [pc, #136]	; (80056d0 <xTaskIncrementTick+0x168>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <xTaskIncrementTick+0x16c>)
 8005656:	441a      	add	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fe fe95 	bl	800438e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <xTaskIncrementTick+0x170>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	429a      	cmp	r2, r3
 8005670:	d3b4      	bcc.n	80055dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005676:	e7b1      	b.n	80055dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <xTaskIncrementTick+0x170>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4915      	ldr	r1, [pc, #84]	; (80056d4 <xTaskIncrementTick+0x16c>)
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d907      	bls.n	80056a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005690:	2301      	movs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e004      	b.n	80056a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <xTaskIncrementTick+0x174>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <xTaskIncrementTick+0x174>)
 800569e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056a0:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <xTaskIncrementTick+0x178>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056ac:	697b      	ldr	r3, [r7, #20]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200005b0 	.word	0x200005b0
 80056bc:	2000058c 	.word	0x2000058c
 80056c0:	20000540 	.word	0x20000540
 80056c4:	20000544 	.word	0x20000544
 80056c8:	200005a0 	.word	0x200005a0
 80056cc:	200005a8 	.word	0x200005a8
 80056d0:	20000590 	.word	0x20000590
 80056d4:	2000048c 	.word	0x2000048c
 80056d8:	20000488 	.word	0x20000488
 80056dc:	20000598 	.word	0x20000598
 80056e0:	2000059c 	.word	0x2000059c

080056e4 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <vTaskSetApplicationTaskTag+0x34>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e001      	b.n	8005700 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8005700:	f000 fda4 	bl	800624c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 800570a:	f000 fdcf 	bl	80062ac <vPortExitCritical>
	}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000488 	.word	0x20000488

0800571c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <vTaskSwitchContext+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800572a:	4b2d      	ldr	r3, [pc, #180]	; (80057e0 <vTaskSwitchContext+0xc4>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005730:	e050      	b.n	80057d4 <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <vTaskSwitchContext+0xc4>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8005738:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <vTaskSwitchContext+0xc8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	4618      	mov	r0, r3
 8005740:	f7fb ff84 	bl	800164c <TaskSwitchedOut>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005744:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <vTaskSwitchContext+0xcc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	fab3 f383 	clz	r3, r3
 8005750:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005752:	7afb      	ldrb	r3, [r7, #11]
 8005754:	f1c3 031f 	rsb	r3, r3, #31
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	4924      	ldr	r1, [pc, #144]	; (80057ec <vTaskSwitchContext+0xd0>)
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <vTaskSwitchContext+0x68>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <vTaskSwitchContext+0x66>
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a17      	ldr	r2, [pc, #92]	; (80057ec <vTaskSwitchContext+0xd0>)
 8005790:	4413      	add	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3308      	adds	r3, #8
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d104      	bne.n	80057b4 <vTaskSwitchContext+0x98>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <vTaskSwitchContext+0xc8>)
 80057bc:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <vTaskSwitchContext+0xc8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fb ff27 	bl	8001618 <TaskSwitchedIn>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ca:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <vTaskSwitchContext+0xc8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3350      	adds	r3, #80	; 0x50
 80057d0:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <vTaskSwitchContext+0xd4>)
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200005b0 	.word	0x200005b0
 80057e0:	2000059c 	.word	0x2000059c
 80057e4:	20000488 	.word	0x20000488
 80057e8:	20000590 	.word	0x20000590
 80057ec:	2000048c 	.word	0x2000048c
 80057f0:	2000005c 	.word	0x2000005c

080057f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60fb      	str	r3, [r7, #12]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <vTaskPlaceOnEventList+0x44>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3318      	adds	r3, #24
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fe fdd6 	bl	80043d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005828:	2101      	movs	r1, #1
 800582a:	6838      	ldr	r0, [r7, #0]
 800582c:	f000 fbaa 	bl	8005f84 <prvAddCurrentTaskToDelayedList>
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000488 	.word	0x20000488

0800583c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	60fb      	str	r3, [r7, #12]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3318      	adds	r3, #24
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe fde9 	bl	8004444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <xTaskRemoveFromEventList+0xac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d11c      	bne.n	80058b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fde0 	bl	8004444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	2201      	movs	r2, #1
 800588a:	409a      	lsls	r2, r3
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <xTaskRemoveFromEventList+0xb0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	4a16      	ldr	r2, [pc, #88]	; (80058ec <xTaskRemoveFromEventList+0xb0>)
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <xTaskRemoveFromEventList+0xb4>)
 80058a4:	441a      	add	r2, r3
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe fd6e 	bl	800438e <vListInsertEnd>
 80058b2:	e005      	b.n	80058c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3318      	adds	r3, #24
 80058b8:	4619      	mov	r1, r3
 80058ba:	480e      	ldr	r0, [pc, #56]	; (80058f4 <xTaskRemoveFromEventList+0xb8>)
 80058bc:	f7fe fd67 	bl	800438e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <xTaskRemoveFromEventList+0xbc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d905      	bls.n	80058da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058ce:	2301      	movs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <xTaskRemoveFromEventList+0xc0>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e001      	b.n	80058de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058de:	697b      	ldr	r3, [r7, #20]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200005b0 	.word	0x200005b0
 80058ec:	20000590 	.word	0x20000590
 80058f0:	2000048c 	.word	0x2000048c
 80058f4:	20000548 	.word	0x20000548
 80058f8:	20000488 	.word	0x20000488
 80058fc:	2000059c 	.word	0x2000059c

08005900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <vTaskInternalSetTimeOutState+0x24>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <vTaskInternalSetTimeOutState+0x28>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	200005a0 	.word	0x200005a0
 8005928:	2000058c 	.word	0x2000058c

0800592c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	613b      	str	r3, [r7, #16]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800596e:	f000 fc6d 	bl	800624c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <xTaskCheckForTimeOut+0xbc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598a:	d102      	bne.n	8005992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e023      	b.n	80059da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <xTaskCheckForTimeOut+0xc0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d007      	beq.n	80059ae <xTaskCheckForTimeOut+0x82>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e015      	b.n	80059da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d20b      	bcs.n	80059d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff9b 	bl	8005900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e004      	b.n	80059da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059da:	f000 fc67 	bl	80062ac <vPortExitCritical>

	return xReturn;
 80059de:	69fb      	ldr	r3, [r7, #28]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2000058c 	.word	0x2000058c
 80059ec:	200005a0 	.word	0x200005a0

080059f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <vTaskMissedYield+0x14>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000059c 	.word	0x2000059c

08005a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a10:	f000 f854 	bl	8005abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <prvIdleTask+0x2c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d907      	bls.n	8005a2c <prvIdleTask+0x24>
			{
				taskYIELD();
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <prvIdleTask+0x30>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005a2c:	f7fb fe2a 	bl	8001684 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005a30:	e7ee      	b.n	8005a10 <prvIdleTask+0x8>
 8005a32:	bf00      	nop
 8005a34:	2000048c 	.word	0x2000048c
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	e00c      	b.n	8005a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <prvInitialiseTaskLists+0x60>)
 8005a54:	4413      	add	r3, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fc6e 	bl	8004338 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b06      	cmp	r3, #6
 8005a66:	d9ef      	bls.n	8005a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a68:	480d      	ldr	r0, [pc, #52]	; (8005aa0 <prvInitialiseTaskLists+0x64>)
 8005a6a:	f7fe fc65 	bl	8004338 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a6e:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <prvInitialiseTaskLists+0x68>)
 8005a70:	f7fe fc62 	bl	8004338 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a74:	480c      	ldr	r0, [pc, #48]	; (8005aa8 <prvInitialiseTaskLists+0x6c>)
 8005a76:	f7fe fc5f 	bl	8004338 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a7a:	480c      	ldr	r0, [pc, #48]	; (8005aac <prvInitialiseTaskLists+0x70>)
 8005a7c:	f7fe fc5c 	bl	8004338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a80:	480b      	ldr	r0, [pc, #44]	; (8005ab0 <prvInitialiseTaskLists+0x74>)
 8005a82:	f7fe fc59 	bl	8004338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <prvInitialiseTaskLists+0x78>)
 8005a88:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <prvInitialiseTaskLists+0x64>)
 8005a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <prvInitialiseTaskLists+0x7c>)
 8005a8e:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <prvInitialiseTaskLists+0x68>)
 8005a90:	601a      	str	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000048c 	.word	0x2000048c
 8005aa0:	20000518 	.word	0x20000518
 8005aa4:	2000052c 	.word	0x2000052c
 8005aa8:	20000548 	.word	0x20000548
 8005aac:	2000055c 	.word	0x2000055c
 8005ab0:	20000574 	.word	0x20000574
 8005ab4:	20000540 	.word	0x20000540
 8005ab8:	20000544 	.word	0x20000544

08005abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac2:	e019      	b.n	8005af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ac4:	f000 fbc2 	bl	800624c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ac8:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <prvCheckTasksWaitingTermination+0x50>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fcb5 	bl	8004444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <prvCheckTasksWaitingTermination+0x54>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <prvCheckTasksWaitingTermination+0x54>)
 8005ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <prvCheckTasksWaitingTermination+0x58>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <prvCheckTasksWaitingTermination+0x58>)
 8005aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aee:	f000 fbdd 	bl	80062ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f810 	bl	8005b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <prvCheckTasksWaitingTermination+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e1      	bne.n	8005ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2000055c 	.word	0x2000055c
 8005b10:	20000588 	.word	0x20000588
 8005b14:	20000570 	.word	0x20000570

08005b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3350      	adds	r3, #80	; 0x50
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fe71 	bl	800680c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd4b 	bl	80065d4 <vPortFree>
				vPortFree( pxTCB );
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd48 	bl	80065d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b44:	e018      	b.n	8005b78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d103      	bne.n	8005b58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fd3f 	bl	80065d4 <vPortFree>
	}
 8005b56:	e00f      	b.n	8005b78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d00a      	beq.n	8005b78 <prvDeleteTCB+0x60>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60fb      	str	r3, [r7, #12]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <prvDeleteTCB+0x5e>
	}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b86:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <prvResetNextTaskUnblockTime+0x40>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <prvResetNextTaskUnblockTime+0x14>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <prvResetNextTaskUnblockTime+0x16>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <prvResetNextTaskUnblockTime+0x44>)
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ba2:	e008      	b.n	8005bb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <prvResetNextTaskUnblockTime+0x40>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <prvResetNextTaskUnblockTime+0x44>)
 8005bb4:	6013      	str	r3, [r2, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr
 8005bc0:	20000540 	.word	0x20000540
 8005bc4:	200005a8 	.word	0x200005a8

08005bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bce:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <xTaskGetSchedulerState+0x34>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e008      	b.n	8005bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <xTaskGetSchedulerState+0x38>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005be4:	2302      	movs	r3, #2
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e001      	b.n	8005bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bee:	687b      	ldr	r3, [r7, #4]
	}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20000594 	.word	0x20000594
 8005c00:	200005b0 	.word	0x200005b0

08005c04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d06e      	beq.n	8005cf8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <xTaskPriorityInherit+0x100>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d25e      	bcs.n	8005ce6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	db06      	blt.n	8005c3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <xTaskPriorityInherit+0x100>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	f1c3 0207 	rsb	r2, r3, #7
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <xTaskPriorityInherit+0x104>)
 8005c50:	4413      	add	r3, r2
 8005c52:	4299      	cmp	r1, r3
 8005c54:	d101      	bne.n	8005c5a <xTaskPriorityInherit+0x56>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xTaskPriorityInherit+0x58>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d03a      	beq.n	8005cd6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fbed 	bl	8004444 <uxListRemove>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c74:	4924      	ldr	r1, [pc, #144]	; (8005d08 <xTaskPriorityInherit+0x104>)
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <xTaskPriorityInherit+0x98>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43da      	mvns	r2, r3
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <xTaskPriorityInherit+0x108>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4013      	ands	r3, r2
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <xTaskPriorityInherit+0x108>)
 8005c9a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <xTaskPriorityInherit+0x100>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	2201      	movs	r2, #1
 8005cac:	409a      	lsls	r2, r3
 8005cae:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <xTaskPriorityInherit+0x108>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <xTaskPriorityInherit+0x108>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <xTaskPriorityInherit+0x104>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fb5d 	bl	800438e <vListInsertEnd>
 8005cd4:	e004      	b.n	8005ce0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <xTaskPriorityInherit+0x100>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e008      	b.n	8005cf8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <xTaskPriorityInherit+0x100>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d201      	bcs.n	8005cf8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000488 	.word	0x20000488
 8005d08:	2000048c 	.word	0x2000048c
 8005d0c:	20000590 	.word	0x20000590

08005d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d06e      	beq.n	8005e04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d26:	4b3a      	ldr	r3, [pc, #232]	; (8005e10 <xTaskPriorityDisinherit+0x100>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d00a      	beq.n	8005d46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60fb      	str	r3, [r7, #12]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	1e5a      	subs	r2, r3, #1
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d044      	beq.n	8005e04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d140      	bne.n	8005e04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fb5c 	bl	8004444 <uxListRemove>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d115      	bne.n	8005dbe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	491f      	ldr	r1, [pc, #124]	; (8005e14 <xTaskPriorityDisinherit+0x104>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xTaskPriorityDisinherit+0xae>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	2201      	movs	r2, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <xTaskPriorityDisinherit+0x108>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4013      	ands	r3, r2
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <xTaskPriorityDisinherit+0x108>)
 8005dbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	f1c3 0207 	rsb	r2, r3, #7
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <xTaskPriorityDisinherit+0x108>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <xTaskPriorityDisinherit+0x108>)
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <xTaskPriorityDisinherit+0x104>)
 8005df2:	441a      	add	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fe fac7 	bl	800438e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e04:	697b      	ldr	r3, [r7, #20]
	}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000488 	.word	0x20000488
 8005e14:	2000048c 	.word	0x2000048c
 8005e18:	20000590 	.word	0x20000590

08005e1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8088 	beq.w	8005f46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60fb      	str	r3, [r7, #12]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d902      	bls.n	8005e64 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e002      	b.n	8005e6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d068      	beq.n	8005f46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d163      	bne.n	8005f46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e7e:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d10a      	bne.n	8005e9e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	60bb      	str	r3, [r7, #8]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	db04      	blt.n	8005ebc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f1c3 0207 	rsb	r2, r3, #7
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	6959      	ldr	r1, [r3, #20]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	d101      	bne.n	8005ed6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d034      	beq.n	8005f46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe faaf 	bl	8004444 <uxListRemove>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4918      	ldr	r1, [pc, #96]	; (8005f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	2201      	movs	r2, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4013      	ands	r3, r2
 8005f14:	4a10      	ldr	r2, [pc, #64]	; (8005f58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005f16:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f38:	441a      	add	r2, r3
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fe fa24 	bl	800438e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f46:	bf00      	nop
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000488 	.word	0x20000488
 8005f54:	2000048c 	.word	0x2000048c
 8005f58:	20000590 	.word	0x20000590

08005f5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f6e:	3201      	adds	r2, #1
 8005f70:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005f72:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f74:	681b      	ldr	r3, [r3, #0]
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000488 	.word	0x20000488

08005f84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f8e:	4b29      	ldr	r3, [pc, #164]	; (8006034 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f94:	4b28      	ldr	r3, [pc, #160]	; (8006038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fa52 	bl	8004444 <uxListRemove>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	2201      	movs	r2, #1
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	4b21      	ldr	r3, [pc, #132]	; (800603c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	4a20      	ldr	r2, [pc, #128]	; (800603c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc4:	d10a      	bne.n	8005fdc <prvAddCurrentTaskToDelayedList+0x58>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	481a      	ldr	r0, [pc, #104]	; (8006040 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005fd6:	f7fe f9da 	bl	800438e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fda:	e026      	b.n	800602a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fe4:	4b14      	ldr	r3, [pc, #80]	; (8006038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d209      	bcs.n	8006008 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f7fe f9e7 	bl	80043d4 <vListInsert>
}
 8006006:	e010      	b.n	800602a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006008:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <prvAddCurrentTaskToDelayedList+0xc4>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <prvAddCurrentTaskToDelayedList+0xb4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7fe f9dd 	bl	80043d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <prvAddCurrentTaskToDelayedList+0xc8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	d202      	bcs.n	800602a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006024:	4a09      	ldr	r2, [pc, #36]	; (800604c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6013      	str	r3, [r2, #0]
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	2000058c 	.word	0x2000058c
 8006038:	20000488 	.word	0x20000488
 800603c:	20000590 	.word	0x20000590
 8006040:	20000574 	.word	0x20000574
 8006044:	20000544 	.word	0x20000544
 8006048:	20000540 	.word	0x20000540
 800604c:	200005a8 	.word	0x200005a8

08006050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3b04      	subs	r3, #4
 8006060:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3b04      	subs	r3, #4
 800606e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3b04      	subs	r3, #4
 800607e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006080:	4a08      	ldr	r2, [pc, #32]	; (80060a4 <pxPortInitialiseStack+0x54>)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b14      	subs	r3, #20
 800608a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3b20      	subs	r3, #32
 8006096:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	080060a9 	.word	0x080060a9

080060a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060b2:	4b12      	ldr	r3, [pc, #72]	; (80060fc <prvTaskExitError+0x54>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ba:	d00a      	beq.n	80060d2 <prvTaskExitError+0x2a>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	60fb      	str	r3, [r7, #12]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <prvTaskExitError+0x28>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060e6:	bf00      	nop
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0fc      	beq.n	80060e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	2000000c 	.word	0x2000000c

08006100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <pxCurrentTCBConst2>)
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800610a:	f380 8809 	msr	PSP, r0
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8811 	msr	BASEPRI, r0
 800611a:	f04e 0e0d 	orr.w	lr, lr, #13
 800611e:	4770      	bx	lr

08006120 <pxCurrentTCBConst2>:
 8006120:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006128:	4806      	ldr	r0, [pc, #24]	; (8006144 <prvPortStartFirstTask+0x1c>)
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	f380 8808 	msr	MSP, r0
 8006132:	b662      	cpsie	i
 8006134:	b661      	cpsie	f
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	df00      	svc	0
 8006140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006142:	bf00      	nop
 8006144:	e000ed08 	.word	0xe000ed08

08006148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800614e:	4b3a      	ldr	r3, [pc, #232]	; (8006238 <xPortStartScheduler+0xf0>)
 8006150:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b32      	ldr	r3, [pc, #200]	; (800623c <xPortStartScheduler+0xf4>)
 8006174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006176:	4b32      	ldr	r3, [pc, #200]	; (8006240 <xPortStartScheduler+0xf8>)
 8006178:	2207      	movs	r2, #7
 800617a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800617c:	e009      	b.n	8006192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800617e:	4b30      	ldr	r3, [pc, #192]	; (8006240 <xPortStartScheduler+0xf8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3b01      	subs	r3, #1
 8006184:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <xPortStartScheduler+0xf8>)
 8006186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b80      	cmp	r3, #128	; 0x80
 800619c:	d0ef      	beq.n	800617e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <xPortStartScheduler+0xf8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1c3 0307 	rsb	r3, r3, #7
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00a      	beq.n	80061c0 <xPortStartScheduler+0x78>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	613b      	str	r3, [r7, #16]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <xPortStartScheduler+0xf8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f1c3 0307 	rsb	r3, r3, #7
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d00a      	beq.n	80061e2 <xPortStartScheduler+0x9a>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xPortStartScheduler+0x98>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <xPortStartScheduler+0xf8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <xPortStartScheduler+0xf8>)
 80061ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061ec:	4b14      	ldr	r3, [pc, #80]	; (8006240 <xPortStartScheduler+0xf8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061f4:	4a12      	ldr	r2, [pc, #72]	; (8006240 <xPortStartScheduler+0xf8>)
 80061f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <xPortStartScheduler+0xfc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <xPortStartScheduler+0xfc>)
 8006206:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800620a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <xPortStartScheduler+0xfc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <xPortStartScheduler+0xfc>)
 8006212:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006218:	f000 f8b8 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <xPortStartScheduler+0x100>)
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006222:	f7ff ff81 	bl	8006128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006226:	f7ff fa79 	bl	800571c <vTaskSwitchContext>
	prvTaskExitError();
 800622a:	f7ff ff3d 	bl	80060a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000e400 	.word	0xe000e400
 800623c:	200005b4 	.word	0x200005b4
 8006240:	200005b8 	.word	0x200005b8
 8006244:	e000ed20 	.word	0xe000ed20
 8006248:	2000000c 	.word	0x2000000c

0800624c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <vPortEnterCritical+0x58>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	4a0d      	ldr	r2, [pc, #52]	; (80062a4 <vPortEnterCritical+0x58>)
 800626e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <vPortEnterCritical+0x58>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10f      	bne.n	8006298 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <vPortEnterCritical+0x5c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <vPortEnterCritical+0x4c>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	603b      	str	r3, [r7, #0]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vPortEnterCritical+0x4a>
	}
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062b2:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <vPortExitCritical+0x4c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <vPortExitCritical+0x24>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	607b      	str	r3, [r7, #4]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062d0:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <vPortExitCritical+0x4c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <vPortExitCritical+0x4c>)
 80062d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <vPortExitCritical+0x4c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <vPortExitCritical+0x42>
 80062e2:	2300      	movs	r3, #0
 80062e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f383 8811 	msr	BASEPRI, r3
}
 80062ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	2000000c 	.word	0x2000000c
 80062fc:	00000000 	.word	0x00000000

08006300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006300:	f3ef 8009 	mrs	r0, PSP
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <pxCurrentTCBConst>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006310:	6010      	str	r0, [r2, #0]
 8006312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006316:	f04f 0050 	mov.w	r0, #80	; 0x50
 800631a:	f380 8811 	msr	BASEPRI, r0
 800631e:	f7ff f9fd 	bl	800571c <vTaskSwitchContext>
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	6808      	ldr	r0, [r1, #0]
 8006332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006336:	f380 8809 	msr	PSP, r0
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	4770      	bx	lr

08006340 <pxCurrentTCBConst>:
 8006340:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f7ff f901 	bl	8005568 <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SysTick_Handler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vPortSetupTimerInterrupt+0x30>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <vPortSetupTimerInterrupt+0x38>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a08      	ldr	r2, [pc, #32]	; (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b03      	ldr	r3, [pc, #12]	; (80063bc <vPortSetupTimerInterrupt+0x30>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr
 80063bc:	e000e010 	.word	0xe000e010
 80063c0:	e000e018 	.word	0xe000e018
 80063c4:	20000000 	.word	0x20000000
 80063c8:	10624dd3 	.word	0x10624dd3
 80063cc:	e000e014 	.word	0xe000e014

080063d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063d6:	f3ef 8305 	mrs	r3, IPSR
 80063da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b0f      	cmp	r3, #15
 80063e0:	d914      	bls.n	800640c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <vPortValidateInterruptPriority+0x6c>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063ec:	4b14      	ldr	r3, [pc, #80]	; (8006440 <vPortValidateInterruptPriority+0x70>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	7afa      	ldrb	r2, [r7, #11]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d20a      	bcs.n	800640c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	607b      	str	r3, [r7, #4]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <vPortValidateInterruptPriority+0x74>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <vPortValidateInterruptPriority+0x78>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d90a      	bls.n	8006432 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	603b      	str	r3, [r7, #0]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <vPortValidateInterruptPriority+0x60>
	}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	e000e3f0 	.word	0xe000e3f0
 8006440:	200005b4 	.word	0x200005b4
 8006444:	e000ed0c 	.word	0xe000ed0c
 8006448:	200005b8 	.word	0x200005b8

0800644c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006458:	f7fe ffdc 	bl	8005414 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800645c:	4b58      	ldr	r3, [pc, #352]	; (80065c0 <pvPortMalloc+0x174>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006464:	f000 f910 	bl	8006688 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006468:	4b56      	ldr	r3, [pc, #344]	; (80065c4 <pvPortMalloc+0x178>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4013      	ands	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 808e 	bne.w	8006592 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01d      	beq.n	80064b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800647c:	2208      	movs	r2, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4413      	add	r3, r2
 8006482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d014      	beq.n	80064b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f023 0307 	bic.w	r3, r3, #7
 8006494:	3308      	adds	r3, #8
 8006496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <pvPortMalloc+0x6c>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	617b      	str	r3, [r7, #20]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d069      	beq.n	8006592 <pvPortMalloc+0x146>
 80064be:	4b42      	ldr	r3, [pc, #264]	; (80065c8 <pvPortMalloc+0x17c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d864      	bhi.n	8006592 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064c8:	4b40      	ldr	r3, [pc, #256]	; (80065cc <pvPortMalloc+0x180>)
 80064ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064cc:	4b3f      	ldr	r3, [pc, #252]	; (80065cc <pvPortMalloc+0x180>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d2:	e004      	b.n	80064de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d903      	bls.n	80064f0 <pvPortMalloc+0xa4>
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f1      	bne.n	80064d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064f0:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <pvPortMalloc+0x174>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d04b      	beq.n	8006592 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2208      	movs	r2, #8
 8006500:	4413      	add	r3, r2
 8006502:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	1ad2      	subs	r2, r2, r3
 8006514:	2308      	movs	r3, #8
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	429a      	cmp	r2, r3
 800651a:	d91f      	bls.n	800655c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800651c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <pvPortMalloc+0xf8>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	613b      	str	r3, [r7, #16]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006556:	69b8      	ldr	r0, [r7, #24]
 8006558:	f000 f8f8 	bl	800674c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <pvPortMalloc+0x17c>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <pvPortMalloc+0x17c>)
 8006568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <pvPortMalloc+0x17c>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d203      	bcs.n	800657e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <pvPortMalloc+0x17c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <pvPortMalloc+0x184>)
 800657c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <pvPortMalloc+0x178>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	431a      	orrs	r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006592:	f7fe ff4d 	bl	8005430 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <pvPortMalloc+0x16a>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <pvPortMalloc+0x168>
	return pvReturn;
 80065b6:	69fb      	ldr	r3, [r7, #28]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3728      	adds	r7, #40	; 0x28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200011c4 	.word	0x200011c4
 80065c4:	200011d0 	.word	0x200011d0
 80065c8:	200011c8 	.word	0x200011c8
 80065cc:	200011bc 	.word	0x200011bc
 80065d0:	200011cc 	.word	0x200011cc

080065d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d048      	beq.n	8006678 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e6:	2308      	movs	r3, #8
 80065e8:	425b      	negs	r3, r3
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	4b21      	ldr	r3, [pc, #132]	; (8006680 <vPortFree+0xac>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <vPortFree+0x44>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60fb      	str	r3, [r7, #12]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <vPortFree+0x62>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60bb      	str	r3, [r7, #8]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <vPortFree+0xac>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d019      	beq.n	8006678 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d115      	bne.n	8006678 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortFree+0xac>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800665c:	f7fe feda 	bl	8005414 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <vPortFree+0xb0>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4413      	add	r3, r2
 800666a:	4a06      	ldr	r2, [pc, #24]	; (8006684 <vPortFree+0xb0>)
 800666c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666e:	6938      	ldr	r0, [r7, #16]
 8006670:	f000 f86c 	bl	800674c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006674:	f7fe fedc 	bl	8005430 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006678:	bf00      	nop
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	200011d0 	.word	0x200011d0
 8006684:	200011c8 	.word	0x200011c8

08006688 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800668e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006692:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006694:	4b27      	ldr	r3, [pc, #156]	; (8006734 <prvHeapInit+0xac>)
 8006696:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00c      	beq.n	80066bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3307      	adds	r3, #7
 80066a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	4a1f      	ldr	r2, [pc, #124]	; (8006734 <prvHeapInit+0xac>)
 80066b8:	4413      	add	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066c0:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <prvHeapInit+0xb0>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066c6:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <prvHeapInit+0xb0>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4413      	add	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066d4:	2208      	movs	r2, #8
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a15      	ldr	r2, [pc, #84]	; (800673c <prvHeapInit+0xb4>)
 80066e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <prvHeapInit+0xb4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <prvHeapInit+0xb4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <prvHeapInit+0xb4>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <prvHeapInit+0xb8>)
 8006716:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4a09      	ldr	r2, [pc, #36]	; (8006744 <prvHeapInit+0xbc>)
 800671e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006720:	4b09      	ldr	r3, [pc, #36]	; (8006748 <prvHeapInit+0xc0>)
 8006722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	200005bc 	.word	0x200005bc
 8006738:	200011bc 	.word	0x200011bc
 800673c:	200011c4 	.word	0x200011c4
 8006740:	200011cc 	.word	0x200011cc
 8006744:	200011c8 	.word	0x200011c8
 8006748:	200011d0 	.word	0x200011d0

0800674c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006754:	4b27      	ldr	r3, [pc, #156]	; (80067f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e002      	b.n	8006760 <prvInsertBlockIntoFreeList+0x14>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d8f7      	bhi.n	800675a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d108      	bne.n	800678e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d118      	bne.n	80067d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <prvInsertBlockIntoFreeList+0xac>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d00d      	beq.n	80067ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e008      	b.n	80067dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <prvInsertBlockIntoFreeList+0xac>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e003      	b.n	80067dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d002      	beq.n	80067ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	200011bc 	.word	0x200011bc
 80067f8:	200011c4 	.word	0x200011c4

080067fc <memset>:
 80067fc:	4603      	mov	r3, r0
 80067fe:	4402      	add	r2, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <_reclaim_reent>:
 800680c:	4b29      	ldr	r3, [pc, #164]	; (80068b4 <_reclaim_reent+0xa8>)
 800680e:	b570      	push	{r4, r5, r6, lr}
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4604      	mov	r4, r0
 8006814:	4283      	cmp	r3, r0
 8006816:	d04b      	beq.n	80068b0 <_reclaim_reent+0xa4>
 8006818:	69c3      	ldr	r3, [r0, #28]
 800681a:	b143      	cbz	r3, 800682e <_reclaim_reent+0x22>
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d144      	bne.n	80068ac <_reclaim_reent+0xa0>
 8006822:	69e3      	ldr	r3, [r4, #28]
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	b111      	cbz	r1, 800682e <_reclaim_reent+0x22>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 f879 	bl	8006920 <_free_r>
 800682e:	6961      	ldr	r1, [r4, #20]
 8006830:	b111      	cbz	r1, 8006838 <_reclaim_reent+0x2c>
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f874 	bl	8006920 <_free_r>
 8006838:	69e1      	ldr	r1, [r4, #28]
 800683a:	b111      	cbz	r1, 8006842 <_reclaim_reent+0x36>
 800683c:	4620      	mov	r0, r4
 800683e:	f000 f86f 	bl	8006920 <_free_r>
 8006842:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006844:	b111      	cbz	r1, 800684c <_reclaim_reent+0x40>
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f86a 	bl	8006920 <_free_r>
 800684c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800684e:	b111      	cbz	r1, 8006856 <_reclaim_reent+0x4a>
 8006850:	4620      	mov	r0, r4
 8006852:	f000 f865 	bl	8006920 <_free_r>
 8006856:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006858:	b111      	cbz	r1, 8006860 <_reclaim_reent+0x54>
 800685a:	4620      	mov	r0, r4
 800685c:	f000 f860 	bl	8006920 <_free_r>
 8006860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006862:	b111      	cbz	r1, 800686a <_reclaim_reent+0x5e>
 8006864:	4620      	mov	r0, r4
 8006866:	f000 f85b 	bl	8006920 <_free_r>
 800686a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800686c:	b111      	cbz	r1, 8006874 <_reclaim_reent+0x68>
 800686e:	4620      	mov	r0, r4
 8006870:	f000 f856 	bl	8006920 <_free_r>
 8006874:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006876:	b111      	cbz	r1, 800687e <_reclaim_reent+0x72>
 8006878:	4620      	mov	r0, r4
 800687a:	f000 f851 	bl	8006920 <_free_r>
 800687e:	6a23      	ldr	r3, [r4, #32]
 8006880:	b1b3      	cbz	r3, 80068b0 <_reclaim_reent+0xa4>
 8006882:	4620      	mov	r0, r4
 8006884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006888:	4718      	bx	r3
 800688a:	5949      	ldr	r1, [r1, r5]
 800688c:	b941      	cbnz	r1, 80068a0 <_reclaim_reent+0x94>
 800688e:	3504      	adds	r5, #4
 8006890:	69e3      	ldr	r3, [r4, #28]
 8006892:	2d80      	cmp	r5, #128	; 0x80
 8006894:	68d9      	ldr	r1, [r3, #12]
 8006896:	d1f8      	bne.n	800688a <_reclaim_reent+0x7e>
 8006898:	4620      	mov	r0, r4
 800689a:	f000 f841 	bl	8006920 <_free_r>
 800689e:	e7c0      	b.n	8006822 <_reclaim_reent+0x16>
 80068a0:	680e      	ldr	r6, [r1, #0]
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f83c 	bl	8006920 <_free_r>
 80068a8:	4631      	mov	r1, r6
 80068aa:	e7ef      	b.n	800688c <_reclaim_reent+0x80>
 80068ac:	2500      	movs	r5, #0
 80068ae:	e7ef      	b.n	8006890 <_reclaim_reent+0x84>
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
 80068b2:	bf00      	nop
 80068b4:	2000005c 	.word	0x2000005c

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	2600      	movs	r6, #0
 80068bc:	4d0c      	ldr	r5, [pc, #48]	; (80068f0 <__libc_init_array+0x38>)
 80068be:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	f000 f87e 	bl	80069c8 <_init>
 80068cc:	2600      	movs	r6, #0
 80068ce:	4d0a      	ldr	r5, [pc, #40]	; (80068f8 <__libc_init_array+0x40>)
 80068d0:	4c0a      	ldr	r4, [pc, #40]	; (80068fc <__libc_init_array+0x44>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e0:	4798      	blx	r3
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ea:	4798      	blx	r3
 80068ec:	3601      	adds	r6, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	08006a6c 	.word	0x08006a6c
 80068f4:	08006a6c 	.word	0x08006a6c
 80068f8:	08006a6c 	.word	0x08006a6c
 80068fc:	08006a70 	.word	0x08006a70

08006900 <__retarget_lock_acquire_recursive>:
 8006900:	4770      	bx	lr

08006902 <__retarget_lock_release_recursive>:
 8006902:	4770      	bx	lr

08006904 <memcpy>:
 8006904:	440a      	add	r2, r1
 8006906:	4291      	cmp	r1, r2
 8006908:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800690c:	d100      	bne.n	8006910 <memcpy+0xc>
 800690e:	4770      	bx	lr
 8006910:	b510      	push	{r4, lr}
 8006912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006916:	4291      	cmp	r1, r2
 8006918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800691c:	d1f9      	bne.n	8006912 <memcpy+0xe>
 800691e:	bd10      	pop	{r4, pc}

08006920 <_free_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4605      	mov	r5, r0
 8006924:	2900      	cmp	r1, #0
 8006926:	d040      	beq.n	80069aa <_free_r+0x8a>
 8006928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800692c:	1f0c      	subs	r4, r1, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfb8      	it	lt
 8006932:	18e4      	addlt	r4, r4, r3
 8006934:	f000 f83c 	bl	80069b0 <__malloc_lock>
 8006938:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <_free_r+0x8c>)
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	b933      	cbnz	r3, 800694c <_free_r+0x2c>
 800693e:	6063      	str	r3, [r4, #4]
 8006940:	6014      	str	r4, [r2, #0]
 8006942:	4628      	mov	r0, r5
 8006944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006948:	f000 b838 	b.w	80069bc <__malloc_unlock>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d908      	bls.n	8006962 <_free_r+0x42>
 8006950:	6820      	ldr	r0, [r4, #0]
 8006952:	1821      	adds	r1, r4, r0
 8006954:	428b      	cmp	r3, r1
 8006956:	bf01      	itttt	eq
 8006958:	6819      	ldreq	r1, [r3, #0]
 800695a:	685b      	ldreq	r3, [r3, #4]
 800695c:	1809      	addeq	r1, r1, r0
 800695e:	6021      	streq	r1, [r4, #0]
 8006960:	e7ed      	b.n	800693e <_free_r+0x1e>
 8006962:	461a      	mov	r2, r3
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b10b      	cbz	r3, 800696c <_free_r+0x4c>
 8006968:	42a3      	cmp	r3, r4
 800696a:	d9fa      	bls.n	8006962 <_free_r+0x42>
 800696c:	6811      	ldr	r1, [r2, #0]
 800696e:	1850      	adds	r0, r2, r1
 8006970:	42a0      	cmp	r0, r4
 8006972:	d10b      	bne.n	800698c <_free_r+0x6c>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	4401      	add	r1, r0
 8006978:	1850      	adds	r0, r2, r1
 800697a:	4283      	cmp	r3, r0
 800697c:	6011      	str	r1, [r2, #0]
 800697e:	d1e0      	bne.n	8006942 <_free_r+0x22>
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4408      	add	r0, r1
 8006986:	6010      	str	r0, [r2, #0]
 8006988:	6053      	str	r3, [r2, #4]
 800698a:	e7da      	b.n	8006942 <_free_r+0x22>
 800698c:	d902      	bls.n	8006994 <_free_r+0x74>
 800698e:	230c      	movs	r3, #12
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	e7d6      	b.n	8006942 <_free_r+0x22>
 8006994:	6820      	ldr	r0, [r4, #0]
 8006996:	1821      	adds	r1, r4, r0
 8006998:	428b      	cmp	r3, r1
 800699a:	bf01      	itttt	eq
 800699c:	6819      	ldreq	r1, [r3, #0]
 800699e:	685b      	ldreq	r3, [r3, #4]
 80069a0:	1809      	addeq	r1, r1, r0
 80069a2:	6021      	streq	r1, [r4, #0]
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	6054      	str	r4, [r2, #4]
 80069a8:	e7cb      	b.n	8006942 <_free_r+0x22>
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20001310 	.word	0x20001310

080069b0 <__malloc_lock>:
 80069b0:	4801      	ldr	r0, [pc, #4]	; (80069b8 <__malloc_lock+0x8>)
 80069b2:	f7ff bfa5 	b.w	8006900 <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	2000130c 	.word	0x2000130c

080069bc <__malloc_unlock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__malloc_unlock+0x8>)
 80069be:	f7ff bfa0 	b.w	8006902 <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	2000130c 	.word	0x2000130c

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

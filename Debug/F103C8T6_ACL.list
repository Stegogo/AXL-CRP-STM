
F103C8T6_ACL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074cc  080074cc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080074cc  080074cc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074cc  080074cc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080074d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  20000064  08007538  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d8  08007538  000214d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001730a  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c68  00000000  00000000  000373da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104c  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3e1  00000000  00000000  0003d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b76  00000000  00000000  00058985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009594a  00000000  00000000  000714fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bfc  00000000  00000000  00106e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010ca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	080073d8 	.word	0x080073d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	080073d8 	.word	0x080073d8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_d2uiz>:
 800076c:	004a      	lsls	r2, r1, #1
 800076e:	d211      	bcs.n	8000794 <__aeabi_d2uiz+0x28>
 8000770:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000774:	d211      	bcs.n	800079a <__aeabi_d2uiz+0x2e>
 8000776:	d50d      	bpl.n	8000794 <__aeabi_d2uiz+0x28>
 8000778:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800077c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000780:	d40e      	bmi.n	80007a0 <__aeabi_d2uiz+0x34>
 8000782:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800078e:	fa23 f002 	lsr.w	r0, r3, r2
 8000792:	4770      	bx	lr
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	4770      	bx	lr
 800079a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800079e:	d102      	bne.n	80007a6 <__aeabi_d2uiz+0x3a>
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a4:	4770      	bx	lr
 80007a6:	f04f 0000 	mov.w	r0, #0
 80007aa:	4770      	bx	lr

080007ac <__aeabi_frsub>:
 80007ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007b0:	e002      	b.n	80007b8 <__addsf3>
 80007b2:	bf00      	nop

080007b4 <__aeabi_fsub>:
 80007b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007b8 <__addsf3>:
 80007b8:	0042      	lsls	r2, r0, #1
 80007ba:	bf1f      	itttt	ne
 80007bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007c0:	ea92 0f03 	teqne	r2, r3
 80007c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007cc:	d06a      	beq.n	80008a4 <__addsf3+0xec>
 80007ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007d6:	bfc1      	itttt	gt
 80007d8:	18d2      	addgt	r2, r2, r3
 80007da:	4041      	eorgt	r1, r0
 80007dc:	4048      	eorgt	r0, r1
 80007de:	4041      	eorgt	r1, r0
 80007e0:	bfb8      	it	lt
 80007e2:	425b      	neglt	r3, r3
 80007e4:	2b19      	cmp	r3, #25
 80007e6:	bf88      	it	hi
 80007e8:	4770      	bxhi	lr
 80007ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007f6:	bf18      	it	ne
 80007f8:	4240      	negne	r0, r0
 80007fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000802:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4249      	negne	r1, r1
 800080a:	ea92 0f03 	teq	r2, r3
 800080e:	d03f      	beq.n	8000890 <__addsf3+0xd8>
 8000810:	f1a2 0201 	sub.w	r2, r2, #1
 8000814:	fa41 fc03 	asr.w	ip, r1, r3
 8000818:	eb10 000c 	adds.w	r0, r0, ip
 800081c:	f1c3 0320 	rsb	r3, r3, #32
 8000820:	fa01 f103 	lsl.w	r1, r1, r3
 8000824:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000828:	d502      	bpl.n	8000830 <__addsf3+0x78>
 800082a:	4249      	negs	r1, r1
 800082c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000830:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000834:	d313      	bcc.n	800085e <__addsf3+0xa6>
 8000836:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800083a:	d306      	bcc.n	800084a <__addsf3+0x92>
 800083c:	0840      	lsrs	r0, r0, #1
 800083e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000842:	f102 0201 	add.w	r2, r2, #1
 8000846:	2afe      	cmp	r2, #254	; 0xfe
 8000848:	d251      	bcs.n	80008ee <__addsf3+0x136>
 800084a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	ea40 0003 	orr.w	r0, r0, r3
 800085c:	4770      	bx	lr
 800085e:	0049      	lsls	r1, r1, #1
 8000860:	eb40 0000 	adc.w	r0, r0, r0
 8000864:	3a01      	subs	r2, #1
 8000866:	bf28      	it	cs
 8000868:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800086c:	d2ed      	bcs.n	800084a <__addsf3+0x92>
 800086e:	fab0 fc80 	clz	ip, r0
 8000872:	f1ac 0c08 	sub.w	ip, ip, #8
 8000876:	ebb2 020c 	subs.w	r2, r2, ip
 800087a:	fa00 f00c 	lsl.w	r0, r0, ip
 800087e:	bfaa      	itet	ge
 8000880:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000884:	4252      	neglt	r2, r2
 8000886:	4318      	orrge	r0, r3
 8000888:	bfbc      	itt	lt
 800088a:	40d0      	lsrlt	r0, r2
 800088c:	4318      	orrlt	r0, r3
 800088e:	4770      	bx	lr
 8000890:	f092 0f00 	teq	r2, #0
 8000894:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000898:	bf06      	itte	eq
 800089a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800089e:	3201      	addeq	r2, #1
 80008a0:	3b01      	subne	r3, #1
 80008a2:	e7b5      	b.n	8000810 <__addsf3+0x58>
 80008a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008ac:	bf18      	it	ne
 80008ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008b2:	d021      	beq.n	80008f8 <__addsf3+0x140>
 80008b4:	ea92 0f03 	teq	r2, r3
 80008b8:	d004      	beq.n	80008c4 <__addsf3+0x10c>
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	bf08      	it	eq
 80008c0:	4608      	moveq	r0, r1
 80008c2:	4770      	bx	lr
 80008c4:	ea90 0f01 	teq	r0, r1
 80008c8:	bf1c      	itt	ne
 80008ca:	2000      	movne	r0, #0
 80008cc:	4770      	bxne	lr
 80008ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008d2:	d104      	bne.n	80008de <__addsf3+0x126>
 80008d4:	0040      	lsls	r0, r0, #1
 80008d6:	bf28      	it	cs
 80008d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008dc:	4770      	bx	lr
 80008de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008e2:	bf3c      	itt	cc
 80008e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bxcc	lr
 80008ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f6:	4770      	bx	lr
 80008f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008fc:	bf16      	itet	ne
 80008fe:	4608      	movne	r0, r1
 8000900:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000904:	4601      	movne	r1, r0
 8000906:	0242      	lsls	r2, r0, #9
 8000908:	bf06      	itte	eq
 800090a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800090e:	ea90 0f01 	teqeq	r0, r1
 8000912:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000916:	4770      	bx	lr

08000918 <__aeabi_ui2f>:
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	e004      	b.n	8000928 <__aeabi_i2f+0x8>
 800091e:	bf00      	nop

08000920 <__aeabi_i2f>:
 8000920:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000924:	bf48      	it	mi
 8000926:	4240      	negmi	r0, r0
 8000928:	ea5f 0c00 	movs.w	ip, r0
 800092c:	bf08      	it	eq
 800092e:	4770      	bxeq	lr
 8000930:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000934:	4601      	mov	r1, r0
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	e01c      	b.n	8000976 <__aeabi_l2f+0x2a>

0800093c <__aeabi_ul2f>:
 800093c:	ea50 0201 	orrs.w	r2, r0, r1
 8000940:	bf08      	it	eq
 8000942:	4770      	bxeq	lr
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	e00a      	b.n	8000960 <__aeabi_l2f+0x14>
 800094a:	bf00      	nop

0800094c <__aeabi_l2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000958:	d502      	bpl.n	8000960 <__aeabi_l2f+0x14>
 800095a:	4240      	negs	r0, r0
 800095c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000960:	ea5f 0c01 	movs.w	ip, r1
 8000964:	bf02      	ittt	eq
 8000966:	4684      	moveq	ip, r0
 8000968:	4601      	moveq	r1, r0
 800096a:	2000      	moveq	r0, #0
 800096c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000970:	bf08      	it	eq
 8000972:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000976:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800097a:	fabc f28c 	clz	r2, ip
 800097e:	3a08      	subs	r2, #8
 8000980:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000984:	db10      	blt.n	80009a8 <__aeabi_l2f+0x5c>
 8000986:	fa01 fc02 	lsl.w	ip, r1, r2
 800098a:	4463      	add	r3, ip
 800098c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000990:	f1c2 0220 	rsb	r2, r2, #32
 8000994:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000998:	fa20 f202 	lsr.w	r2, r0, r2
 800099c:	eb43 0002 	adc.w	r0, r3, r2
 80009a0:	bf08      	it	eq
 80009a2:	f020 0001 	biceq.w	r0, r0, #1
 80009a6:	4770      	bx	lr
 80009a8:	f102 0220 	add.w	r2, r2, #32
 80009ac:	fa01 fc02 	lsl.w	ip, r1, r2
 80009b0:	f1c2 0220 	rsb	r2, r2, #32
 80009b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009b8:	fa21 f202 	lsr.w	r2, r1, r2
 80009bc:	eb43 0002 	adc.w	r0, r3, r2
 80009c0:	bf08      	it	eq
 80009c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009c6:	4770      	bx	lr

080009c8 <__aeabi_fmul>:
 80009c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009d0:	bf1e      	ittt	ne
 80009d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009d6:	ea92 0f0c 	teqne	r2, ip
 80009da:	ea93 0f0c 	teqne	r3, ip
 80009de:	d06f      	beq.n	8000ac0 <__aeabi_fmul+0xf8>
 80009e0:	441a      	add	r2, r3
 80009e2:	ea80 0c01 	eor.w	ip, r0, r1
 80009e6:	0240      	lsls	r0, r0, #9
 80009e8:	bf18      	it	ne
 80009ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ee:	d01e      	beq.n	8000a2e <__aeabi_fmul+0x66>
 80009f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000a00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a08:	bf3e      	ittt	cc
 8000a0a:	0049      	lslcc	r1, r1, #1
 8000a0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a10:	005b      	lslcc	r3, r3, #1
 8000a12:	ea40 0001 	orr.w	r0, r0, r1
 8000a16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a1a:	2afd      	cmp	r2, #253	; 0xfd
 8000a1c:	d81d      	bhi.n	8000a5a <__aeabi_fmul+0x92>
 8000a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a26:	bf08      	it	eq
 8000a28:	f020 0001 	biceq.w	r0, r0, #1
 8000a2c:	4770      	bx	lr
 8000a2e:	f090 0f00 	teq	r0, #0
 8000a32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a36:	bf08      	it	eq
 8000a38:	0249      	lsleq	r1, r1, #9
 8000a3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a42:	3a7f      	subs	r2, #127	; 0x7f
 8000a44:	bfc2      	ittt	gt
 8000a46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a4e:	4770      	bxgt	lr
 8000a50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	dc5d      	bgt.n	8000b18 <__aeabi_fmul+0x150>
 8000a5c:	f112 0f19 	cmn.w	r2, #25
 8000a60:	bfdc      	itt	le
 8000a62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a66:	4770      	bxle	lr
 8000a68:	f1c2 0200 	rsb	r2, r2, #0
 8000a6c:	0041      	lsls	r1, r0, #1
 8000a6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a72:	f1c2 0220 	rsb	r2, r2, #32
 8000a76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a7e:	f140 0000 	adc.w	r0, r0, #0
 8000a82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a86:	bf08      	it	eq
 8000a88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a8c:	4770      	bx	lr
 8000a8e:	f092 0f00 	teq	r2, #0
 8000a92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a96:	bf02      	ittt	eq
 8000a98:	0040      	lsleq	r0, r0, #1
 8000a9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a9e:	3a01      	subeq	r2, #1
 8000aa0:	d0f9      	beq.n	8000a96 <__aeabi_fmul+0xce>
 8000aa2:	ea40 000c 	orr.w	r0, r0, ip
 8000aa6:	f093 0f00 	teq	r3, #0
 8000aaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0049      	lsleq	r1, r1, #1
 8000ab2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ab6:	3b01      	subeq	r3, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fmul+0xe6>
 8000aba:	ea41 010c 	orr.w	r1, r1, ip
 8000abe:	e78f      	b.n	80009e0 <__aeabi_fmul+0x18>
 8000ac0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ac4:	ea92 0f0c 	teq	r2, ip
 8000ac8:	bf18      	it	ne
 8000aca:	ea93 0f0c 	teqne	r3, ip
 8000ace:	d00a      	beq.n	8000ae6 <__aeabi_fmul+0x11e>
 8000ad0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ad4:	bf18      	it	ne
 8000ad6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ada:	d1d8      	bne.n	8000a8e <__aeabi_fmul+0xc6>
 8000adc:	ea80 0001 	eor.w	r0, r0, r1
 8000ae0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f090 0f00 	teq	r0, #0
 8000aea:	bf17      	itett	ne
 8000aec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000af0:	4608      	moveq	r0, r1
 8000af2:	f091 0f00 	teqne	r1, #0
 8000af6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000afa:	d014      	beq.n	8000b26 <__aeabi_fmul+0x15e>
 8000afc:	ea92 0f0c 	teq	r2, ip
 8000b00:	d101      	bne.n	8000b06 <__aeabi_fmul+0x13e>
 8000b02:	0242      	lsls	r2, r0, #9
 8000b04:	d10f      	bne.n	8000b26 <__aeabi_fmul+0x15e>
 8000b06:	ea93 0f0c 	teq	r3, ip
 8000b0a:	d103      	bne.n	8000b14 <__aeabi_fmul+0x14c>
 8000b0c:	024b      	lsls	r3, r1, #9
 8000b0e:	bf18      	it	ne
 8000b10:	4608      	movne	r0, r1
 8000b12:	d108      	bne.n	8000b26 <__aeabi_fmul+0x15e>
 8000b14:	ea80 0001 	eor.w	r0, r0, r1
 8000b18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_fdiv>:
 8000b30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b38:	bf1e      	ittt	ne
 8000b3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b3e:	ea92 0f0c 	teqne	r2, ip
 8000b42:	ea93 0f0c 	teqne	r3, ip
 8000b46:	d069      	beq.n	8000c1c <__aeabi_fdiv+0xec>
 8000b48:	eba2 0203 	sub.w	r2, r2, r3
 8000b4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b50:	0249      	lsls	r1, r1, #9
 8000b52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b56:	d037      	beq.n	8000bc8 <__aeabi_fdiv+0x98>
 8000b58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	bf38      	it	cc
 8000b6c:	005b      	lslcc	r3, r3, #1
 8000b6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b76:	428b      	cmp	r3, r1
 8000b78:	bf24      	itt	cs
 8000b7a:	1a5b      	subcs	r3, r3, r1
 8000b7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b84:	bf24      	itt	cs
 8000b86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b92:	bf24      	itt	cs
 8000b94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ba0:	bf24      	itt	cs
 8000ba2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ba6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	bf18      	it	ne
 8000bae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bb2:	d1e0      	bne.n	8000b76 <__aeabi_fdiv+0x46>
 8000bb4:	2afd      	cmp	r2, #253	; 0xfd
 8000bb6:	f63f af50 	bhi.w	8000a5a <__aeabi_fmul+0x92>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd0:	327f      	adds	r2, #127	; 0x7f
 8000bd2:	bfc2      	ittt	gt
 8000bd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bdc:	4770      	bxgt	lr
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	3a01      	subs	r2, #1
 8000be8:	e737      	b.n	8000a5a <__aeabi_fmul+0x92>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf2:	bf02      	ittt	eq
 8000bf4:	0040      	lsleq	r0, r0, #1
 8000bf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfa:	3a01      	subeq	r2, #1
 8000bfc:	d0f9      	beq.n	8000bf2 <__aeabi_fdiv+0xc2>
 8000bfe:	ea40 000c 	orr.w	r0, r0, ip
 8000c02:	f093 0f00 	teq	r3, #0
 8000c06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0a:	bf02      	ittt	eq
 8000c0c:	0049      	lsleq	r1, r1, #1
 8000c0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c12:	3b01      	subeq	r3, #1
 8000c14:	d0f9      	beq.n	8000c0a <__aeabi_fdiv+0xda>
 8000c16:	ea41 010c 	orr.w	r1, r1, ip
 8000c1a:	e795      	b.n	8000b48 <__aeabi_fdiv+0x18>
 8000c1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c20:	ea92 0f0c 	teq	r2, ip
 8000c24:	d108      	bne.n	8000c38 <__aeabi_fdiv+0x108>
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	f47f af7d 	bne.w	8000b26 <__aeabi_fmul+0x15e>
 8000c2c:	ea93 0f0c 	teq	r3, ip
 8000c30:	f47f af70 	bne.w	8000b14 <__aeabi_fmul+0x14c>
 8000c34:	4608      	mov	r0, r1
 8000c36:	e776      	b.n	8000b26 <__aeabi_fmul+0x15e>
 8000c38:	ea93 0f0c 	teq	r3, ip
 8000c3c:	d104      	bne.n	8000c48 <__aeabi_fdiv+0x118>
 8000c3e:	024b      	lsls	r3, r1, #9
 8000c40:	f43f af4c 	beq.w	8000adc <__aeabi_fmul+0x114>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e76e      	b.n	8000b26 <__aeabi_fmul+0x15e>
 8000c48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c4c:	bf18      	it	ne
 8000c4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c52:	d1ca      	bne.n	8000bea <__aeabi_fdiv+0xba>
 8000c54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c58:	f47f af5c 	bne.w	8000b14 <__aeabi_fmul+0x14c>
 8000c5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c60:	f47f af3c 	bne.w	8000adc <__aeabi_fmul+0x114>
 8000c64:	e75f      	b.n	8000b26 <__aeabi_fmul+0x15e>
 8000c66:	bf00      	nop

08000c68 <__gesf2>:
 8000c68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c6c:	e006      	b.n	8000c7c <__cmpsf2+0x4>
 8000c6e:	bf00      	nop

08000c70 <__lesf2>:
 8000c70:	f04f 0c01 	mov.w	ip, #1
 8000c74:	e002      	b.n	8000c7c <__cmpsf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__cmpsf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c8c:	bf18      	it	ne
 8000c8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c92:	d011      	beq.n	8000cb8 <__cmpsf2+0x40>
 8000c94:	b001      	add	sp, #4
 8000c96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c9a:	bf18      	it	ne
 8000c9c:	ea90 0f01 	teqne	r0, r1
 8000ca0:	bf58      	it	pl
 8000ca2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ca6:	bf88      	it	hi
 8000ca8:	17c8      	asrhi	r0, r1, #31
 8000caa:	bf38      	it	cc
 8000cac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cb0:	bf18      	it	ne
 8000cb2:	f040 0001 	orrne.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cbc:	d102      	bne.n	8000cc4 <__cmpsf2+0x4c>
 8000cbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cc2:	d105      	bne.n	8000cd0 <__cmpsf2+0x58>
 8000cc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cc8:	d1e4      	bne.n	8000c94 <__cmpsf2+0x1c>
 8000cca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cce:	d0e1      	beq.n	8000c94 <__cmpsf2+0x1c>
 8000cd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_cfrcmple>:
 8000cd8:	4684      	mov	ip, r0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	4661      	mov	r1, ip
 8000cde:	e7ff      	b.n	8000ce0 <__aeabi_cfcmpeq>

08000ce0 <__aeabi_cfcmpeq>:
 8000ce0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ce2:	f7ff ffc9 	bl	8000c78 <__cmpsf2>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	bf48      	it	mi
 8000cea:	f110 0f00 	cmnmi.w	r0, #0
 8000cee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cf0 <__aeabi_fcmpeq>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff fff4 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2001      	moveq	r0, #1
 8000cfc:	2000      	movne	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmplt>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffea 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d0c:	bf34      	ite	cc
 8000d0e:	2001      	movcc	r0, #1
 8000d10:	2000      	movcs	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmple>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffe0 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d20:	bf94      	ite	ls
 8000d22:	2001      	movls	r0, #1
 8000d24:	2000      	movhi	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_fcmpge>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff ffd2 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d34:	bf94      	ite	ls
 8000d36:	2001      	movls	r0, #1
 8000d38:	2000      	movhi	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmpgt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffc8 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <ADXL_Init>:

/** Initializes the ADXL unit
* @param adxl, structure of ADXL_InitTypeDef: 
*/
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    // CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	484d      	ldr	r0, [pc, #308]	; (8000e98 <ADXL_Init+0x144>)
 8000d62:	f001 fe55 	bl	8002a10 <HAL_GPIO_WritePin>
    // Unknown delay should apply
    osDelay(5);
 8000d66:	2005      	movs	r0, #5
 8000d68:	f003 fead 	bl	8004ac6 <osDelay>
    uint8_t testval = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
    // The Device Address register is constant, i.e. = 0xE5
    readRegister(DEVID,&testval,1);
 8000d70:	f107 030f 	add.w	r3, r7, #15
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f9e9 	bl	8001150 <readRegister>
    if (testval != 0xE5) return ADXL_ERR;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2be5      	cmp	r3, #229	; 0xe5
 8000d82:	d001      	beq.n	8000d88 <ADXL_Init+0x34>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e082      	b.n	8000e8e <ADXL_Init+0x13a>
    // Init. of BW_RATE and DATAFORMAT registers
    adxlBW(adxl);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 fa21 	bl	80011d0 <adxlBW>
    adxlFormat(adxl);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fa62 	bl	8001258 <adxlFormat>

    // Settings gains 
    if (adxl->Resolution == RESOLUTION_10BIT)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d13f      	bne.n	8000e1c <ADXL_Init+0xc8>
    {
        switch (adxl->Range) 
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d846      	bhi.n	8000e32 <ADXL_Init+0xde>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <ADXL_Init+0x58>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dd5 	.word	0x08000dd5
 8000db4:	08000ded 	.word	0x08000ded
 8000db8:	08000e05 	.word	0x08000e05
        {
            case RANGE_2G:  GAINX = GAINY = GAINZ = 1/255.0f;  break;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <ADXL_Init+0x148>)
 8000dbe:	4a38      	ldr	r2, [pc, #224]	; (8000ea0 <ADXL_Init+0x14c>)
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <ADXL_Init+0x148>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <ADXL_Init+0x150>)
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <ADXL_Init+0x150>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a36      	ldr	r2, [pc, #216]	; (8000ea8 <ADXL_Init+0x154>)
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e02e      	b.n	8000e32 <ADXL_Init+0xde>
            case RANGE_4G:  GAINX = GAINY = GAINZ = 1/127.0f;  break;
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <ADXL_Init+0x148>)
 8000dd6:	4a35      	ldr	r2, [pc, #212]	; (8000eac <ADXL_Init+0x158>)
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <ADXL_Init+0x148>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <ADXL_Init+0x150>)
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <ADXL_Init+0x150>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <ADXL_Init+0x154>)
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e022      	b.n	8000e32 <ADXL_Init+0xde>
            case RANGE_8G:  GAINX = GAINY = GAINZ = 1/63.0f;   break;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <ADXL_Init+0x148>)
 8000dee:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <ADXL_Init+0x15c>)
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <ADXL_Init+0x148>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a2b      	ldr	r2, [pc, #172]	; (8000ea4 <ADXL_Init+0x150>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <ADXL_Init+0x150>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <ADXL_Init+0x154>)
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e016      	b.n	8000e32 <ADXL_Init+0xde>
            case RANGE_16G: GAINX = GAINY = GAINZ = 1/31.0f;   break;                              
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <ADXL_Init+0x148>)
 8000e06:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <ADXL_Init+0x160>)
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <ADXL_Init+0x148>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <ADXL_Init+0x150>)
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <ADXL_Init+0x150>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a24      	ldr	r2, [pc, #144]	; (8000ea8 <ADXL_Init+0x154>)
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e00a      	b.n	8000e32 <ADXL_Init+0xde>
        }
    } 
    else 
    {
        GAINX = GAINY = GAINZ = 1/255.0f;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <ADXL_Init+0x148>)
 8000e1e:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <ADXL_Init+0x14c>)
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <ADXL_Init+0x148>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <ADXL_Init+0x150>)
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <ADXL_Init+0x150>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <ADXL_Init+0x154>)
 8000e30:	6013      	str	r3, [r2, #0]
    }
    // Setting AutoSleep and Link bits
    uint8_t reg;
    readRegister(POWER_CTL,&reg,1);
 8000e32:	f107 030e 	add.w	r3, r7, #14
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	202d      	movs	r0, #45	; 0x2d
 8000e3c:	f000 f988 	bl	8001150 <readRegister>
    
    if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	79db      	ldrb	r3, [r3, #7]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <ADXL_Init+0x100>
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73bb      	strb	r3, [r7, #14]
 8000e52:	e004      	b.n	8000e5e <ADXL_Init+0x10a>
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	f023 0310 	bic.w	r3, r3, #16
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	73bb      	strb	r3, [r7, #14]
    if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5);   else reg &= ~(1 << 5);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7a1b      	ldrb	r3, [r3, #8]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <ADXL_Init+0x11e>
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	73bb      	strb	r3, [r7, #14]
 8000e70:	e004      	b.n	8000e7c <ADXL_Init+0x128>
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	f023 0320 	bic.w	r3, r3, #32
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	73bb      	strb	r3, [r7, #14]
    writeRegister(POWER_CTL,reg);
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	202d      	movs	r0, #45	; 0x2d
 8000e82:	f000 f935 	bl	80010f0 <writeRegister>
    
    adxlInterrupt(adxl);            
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f8d9 	bl	800103e <adxlInterrupt>
    
    return ADXL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	200000a4 	.word	0x200000a4
 8000ea0:	3b808081 	.word	0x3b808081
 8000ea4:	200000a0 	.word	0x200000a0
 8000ea8:	2000009c 	.word	0x2000009c
 8000eac:	3c010204 	.word	0x3c010204
 8000eb0:	3c820821 	.word	0x3c820821
 8000eb4:	3d042108 	.word	0x3d042108

08000eb8 <ADXL_getAccel>:
		      uint16_t acc[3];
		      ADXL_getAccel(acc,OUTPUT_SIGNED);
		      and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
    uint8_t data[6]={0,0,0,0,0,0};	
 8000ec4:	4a41      	ldr	r2, [pc, #260]	; (8000fcc <ADXL_getAccel+0x114>)
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ece:	6018      	str	r0, [r3, #0]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	8019      	strh	r1, [r3, #0]
    readRegister(DATA0,data,6);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2206      	movs	r2, #6
 8000eda:	4619      	mov	r1, r3
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f000 f937 	bl	8001150 <readRegister>

    if (outputType == OUTPUT_SIGNED)
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d125      	bne.n	8000f34 <ADXL_getAccel+0x7c>
    {
        int16_t * acc = Data;	
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	613b      	str	r3, [r7, #16]
        // Two's Complement
        acc[0] = (int16_t) ((data[1]*256+data[0]));
 8000eec:	7a7b      	ldrb	r3, [r7, #9]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	7a3b      	ldrb	r3, [r7, #8]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	801a      	strh	r2, [r3, #0]
        acc[1] = (int16_t) ((data[3]*256+data[2]));
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	7abb      	ldrb	r3, [r7, #10]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	3302      	adds	r3, #2
 8000f16:	b212      	sxth	r2, r2
 8000f18:	801a      	strh	r2, [r3, #0]
        acc[2] = (int16_t) ((data[5]*256+data[4]));
 8000f1a:	7b7b      	ldrb	r3, [r7, #13]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	7b3b      	ldrb	r3, [r7, #12]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4413      	add	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	b212      	sxth	r2, r2
 8000f30:	801a      	strh	r2, [r3, #0]
        float * fdata = Data;
        fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
        fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
        fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
    }
}
 8000f32:	e046      	b.n	8000fc2 <ADXL_getAccel+0x10a>
    else if (outputType == OUTPUT_FLOAT)
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d143      	bne.n	8000fc2 <ADXL_getAccel+0x10a>
        float * fdata = Data;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	617b      	str	r3, [r7, #20]
        fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8000f3e:	7a7b      	ldrb	r3, [r7, #9]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	7a3b      	ldrb	r3, [r7, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fce5 	bl	8000920 <__aeabi_i2f>
 8000f56:	4602      	mov	r2, r0
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <ADXL_getAccel+0x118>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f7ff fd32 	bl	80009c8 <__aeabi_fmul>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	601a      	str	r2, [r3, #0]
        fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	7abb      	ldrb	r3, [r7, #10]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fcce 	bl	8000920 <__aeabi_i2f>
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <ADXL_getAccel+0x11c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	1d1c      	adds	r4, r3, #4
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	f7ff fd1b 	bl	80009c8 <__aeabi_fmul>
 8000f92:	4603      	mov	r3, r0
 8000f94:	6023      	str	r3, [r4, #0]
        fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	7b3b      	ldrb	r3, [r7, #12]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fcb9 	bl	8000920 <__aeabi_i2f>
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <ADXL_getAccel+0x120>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f103 0408 	add.w	r4, r3, #8
 8000fb8:	4611      	mov	r1, r2
 8000fba:	f7ff fd05 	bl	80009c8 <__aeabi_fmul>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6023      	str	r3, [r4, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	080073f0 	.word	0x080073f0
 8000fd0:	2000009c 	.word	0x2000009c
 8000fd4:	200000a0 	.word	0x200000a0
 8000fd8:	200000a4 	.word	0x200000a4

08000fdc <ADXL_Measure>:
		
/** Starts Measure Mode
* @param: s = ON or OFF				
*/
void ADXL_Measure(Switch s)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    readRegister(POWER_CTL,&reg,1);
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	202d      	movs	r0, #45	; 0x2d
 8000ff0:	f000 f8ae 	bl	8001150 <readRegister>
    
    switch (s) 
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <ADXL_Measure+0x24>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d010      	beq.n	8001020 <ADXL_Measure+0x44>
            reg &= ~(1<<3);
            writeRegister(POWER_CTL,reg);
        }
        break;				
    }
}
 8000ffe:	e01a      	b.n	8001036 <ADXL_Measure+0x5a>
            reg &= ~(1<<2);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	f023 0304 	bic.w	r3, r3, #4
 8001006:	b2db      	uxtb	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
            reg |= (1<<3);
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	b2db      	uxtb	r3, r3
 8001012:	73fb      	strb	r3, [r7, #15]
            writeRegister(POWER_CTL,reg);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4619      	mov	r1, r3
 8001018:	202d      	movs	r0, #45	; 0x2d
 800101a:	f000 f869 	bl	80010f0 <writeRegister>
        break;
 800101e:	e00a      	b.n	8001036 <ADXL_Measure+0x5a>
            reg &= ~(1<<3);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	f023 0308 	bic.w	r3, r3, #8
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
            writeRegister(POWER_CTL,reg);
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	4619      	mov	r1, r3
 800102e:	202d      	movs	r0, #45	; 0x2d
 8001030:	f000 f85e 	bl	80010f0 <writeRegister>
        break;				
 8001034:	bf00      	nop
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <adxlInterrupt>:
}

//************************** I N T E R R U P T S *******************************

void adxlInterrupt(ADXL_InitTypeDef * adxl)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    uint8_t reg=0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

    // Settings Int output
    readRegister(INT_MAP,&reg,1);
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	202f      	movs	r0, #47	; 0x2f
 8001054:	f000 f87c 	bl	8001150 <readRegister>
    if (adxl->IntPin == INT1)   reg &= ~(adxl->Interrupt); 
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7a9b      	ldrb	r3, [r3, #10]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10b      	bne.n	8001078 <adxlInterrupt+0x3a>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7a5b      	ldrb	r3, [r3, #9]
 8001064:	b25b      	sxtb	r3, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	b25a      	sxtb	r2, r3
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4013      	ands	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e005      	b.n	8001084 <adxlInterrupt+0x46>
    else                        reg |= (adxl->Interrupt);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7a5a      	ldrb	r2, [r3, #9]
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	4313      	orrs	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73fb      	strb	r3, [r7, #15]
    writeRegister(INT_MAP,reg);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4619      	mov	r1, r3
 8001088:	202f      	movs	r0, #47	; 0x2f
 800108a:	f000 f831 	bl	80010f0 <writeRegister>
    
    // Enabling the TAP interrupt
    readRegister(INT_ENABLE, &reg, 1);
 800108e:	f107 030f 	add.w	r3, r7, #15
 8001092:	2201      	movs	r2, #1
 8001094:	4619      	mov	r1, r3
 8001096:	202e      	movs	r0, #46	; 0x2e
 8001098:	f000 f85a 	bl	8001150 <readRegister>
    reg |= (adxl->Interrupt);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a5a      	ldrb	r2, [r3, #9]
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	73fb      	strb	r3, [r7, #15]
    writeRegister(INT_ENABLE,reg);  
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4619      	mov	r1, r3
 80010ac:	202e      	movs	r0, #46	; 0x2e
 80010ae:	f000 f81f 	bl	80010f0 <writeRegister>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <ADXL_IntProto>:
/** Interrupt prototype
* @brief In order to interrupt flags being reset, the address 0x30 should be read.
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/
bool ADXL_IntProto(ADXL_InitTypeDef * adxl)	
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
    uint8_t reg=0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
    
    readRegister(INT_SOURCE,&reg,1);	
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	2030      	movs	r0, #48	; 0x30
 80010d0:	f000 f83e 	bl	8001150 <readRegister>
    if ((reg & adxl->Interrupt) == 0)  return false;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7a5a      	ldrb	r2, [r3, #9]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4013      	ands	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <ADXL_IntProto+0x2c>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <ADXL_IntProto+0x2e>
    else                               return true;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	460a      	mov	r2, r1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71bb      	strb	r3, [r7, #6]
    if (address > 63)  address = 63;
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b3f      	cmp	r3, #63	; 0x3f
 8001104:	d901      	bls.n	800110a <writeRegister+0x1a>
 8001106:	233f      	movs	r3, #63	; 0x3f
 8001108:	71fb      	strb	r3, [r7, #7]
	
    // Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001110:	b2db      	uxtb	r3, r3
 8001112:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <writeRegister+0x58>)
 800111a:	f001 fc79 	bl	8002a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 800111e:	1df9      	adds	r1, r7, #7
 8001120:	230a      	movs	r3, #10
 8001122:	2201      	movs	r2, #1
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <writeRegister+0x5c>)
 8001126:	f002 f981 	bl	800342c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 800112a:	1db9      	adds	r1, r7, #6
 800112c:	230a      	movs	r3, #10
 800112e:	2201      	movs	r2, #1
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <writeRegister+0x5c>)
 8001132:	f002 f97b 	bl	800342c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2110      	movs	r1, #16
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <writeRegister+0x58>)
 800113c:	f001 fc68 	bl	8002a10 <HAL_GPIO_WritePin>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010800 	.word	0x40010800
 800114c:	20000518 	.word	0x20000518

08001150 <readRegister>:
* @address: 8-bit address of register
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/
static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
    if (address > 63)  address = 63;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b3f      	cmp	r3, #63	; 0x3f
 8001164:	d901      	bls.n	800116a <readRegister+0x1a>
 8001166:	233f      	movs	r3, #63	; 0x3f
 8001168:	71fb      	strb	r3, [r7, #7]
    
    // Multiple Byte Read Settings
    if (num > 1)  address |= 0x40;
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d905      	bls.n	800117c <readRegister+0x2c>
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001176:	b2db      	uxtb	r3, r3
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e004      	b.n	8001186 <readRegister+0x36>
    else	  address &= ~(0x40);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001182:	b2db      	uxtb	r3, r3
 8001184:	71fb      	strb	r3, [r7, #7]
    
    // Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	71fb      	strb	r3, [r7, #7]
		
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <readRegister+0x78>)
 8001196:	f001 fc3b 	bl	8002a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 800119a:	1df9      	adds	r1, r7, #7
 800119c:	230a      	movs	r3, #10
 800119e:	2201      	movs	r2, #1
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <readRegister+0x7c>)
 80011a2:	f002 f943 	bl	800342c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&SPIhandler,value,num,10);
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	230a      	movs	r3, #10
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <readRegister+0x7c>)
 80011b0:	f002 fa7f 	bl	80036b2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port,ADXL_SPI1_CS_Pin,GPIO_PIN_SET);	
 80011b4:	2201      	movs	r2, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <readRegister+0x78>)
 80011ba:	f001 fc29 	bl	8002a10 <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010800 	.word	0x40010800
 80011cc:	20000518 	.word	0x20000518

080011d0 <adxlBW>:
            10 		|  	100
            11 		|  	200
            12 		|  	400
*/
static void adxlBW(ADXL_InitTypeDef * adxl)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    uint8_t bwreg=0;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(BW_RATE,bwreg);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4619      	mov	r1, r3
 80011e0:	202c      	movs	r0, #44	; 0x2c
 80011e2:	f7ff ff85 	bl	80010f0 <writeRegister>
    
    if (adxl->LPMode == LPMODE_LOWPOWER) 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d11a      	bne.n	8001224 <adxlBW+0x54>
    {
        // Low power mode
        bwreg |= (1 << 4);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	73fb      	strb	r3, [r7, #15]
        if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	78db      	ldrb	r3, [r3, #3]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d807      	bhi.n	800120e <adxlBW+0x3e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	78db      	ldrb	r3, [r3, #3]
 8001202:	2b0c      	cmp	r3, #12
 8001204:	d903      	bls.n	800120e <adxlBW+0x3e>
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	3307      	adds	r3, #7
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e004      	b.n	8001218 <adxlBW+0x48>
        else                                          bwreg +=(adxl->Rate);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	78da      	ldrb	r2, [r3, #3]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4413      	add	r3, r2
 8001216:	73fb      	strb	r3, [r7, #15]
        writeRegister(BW_RATE,bwreg);	
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	4619      	mov	r1, r3
 800121c:	202c      	movs	r0, #44	; 0x2c
 800121e:	f7ff ff67 	bl	80010f0 <writeRegister>
        // Normal Mode
        if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
        else                                          bwreg +=(adxl->Rate);
        writeRegister(BW_RATE,bwreg);	
    }
}
 8001222:	e015      	b.n	8001250 <adxlBW+0x80>
        if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	78db      	ldrb	r3, [r3, #3]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d807      	bhi.n	800123c <adxlBW+0x6c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d903      	bls.n	800123c <adxlBW+0x6c>
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	3306      	adds	r3, #6
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e004      	b.n	8001246 <adxlBW+0x76>
        else                                          bwreg +=(adxl->Rate);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	78da      	ldrb	r2, [r3, #3]
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	4413      	add	r3, r2
 8001244:	73fb      	strb	r3, [r7, #15]
        writeRegister(BW_RATE,bwreg);	
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4619      	mov	r1, r3
 800124a:	202c      	movs	r0, #44	; 0x2c
 800124c:	f7ff ff50 	bl	80010f0 <writeRegister>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <adxlFormat>:
                     1 		|  	+-4g
                     2 		|  	+-8g		
                     3 		|  	+-16g                                                           
*/
static void adxlFormat(ADXL_InitTypeDef * adxl)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    uint8_t formatreg=0;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(DATA_FORMAT,formatreg);
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	4619      	mov	r1, r3
 8001268:	2031      	movs	r0, #49	; 0x31
 800126a:	f7ff ff41 	bl	80010f0 <writeRegister>
    formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b25a      	sxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	015b      	lsls	r3, r3, #5
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b25a      	sxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	799b      	ldrb	r3, [r3, #6]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b25a      	sxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	795b      	ldrb	r3, [r3, #5]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	b25b      	sxtb	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b25b      	sxtb	r3, r3
 800129a:	73fb      	strb	r3, [r7, #15]
    formatreg += (adxl -> Range);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	791a      	ldrb	r2, [r3, #4]
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	4413      	add	r3, r2
 80012a4:	73fb      	strb	r3, [r7, #15]
    writeRegister(DATA_FORMAT,formatreg);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	4619      	mov	r1, r3
 80012aa:	2031      	movs	r0, #49	; 0x31
 80012ac:	f7ff ff20 	bl	80010f0 <writeRegister>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <StartReadAccel>:
 * Read accelerometer values and compose a packet to send.
 * Task is blocked; Triggers by semaphore it got from interrupt routine
 * When this task is called first, it configures ADXL and initializes measurements
 */
void StartReadAccel (void const * argument)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag(NULL, (void *) 1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	2000      	movs	r0, #0
 80012c4:	f004 ff16 	bl	80060f4 <vTaskSetApplicationTaskTag>
	// ::::::::::::::::::::::::::::: INIT :::::::::::::::::::::::::::::
	ADXL_InitStruct.SPIMode      = SPIMODE_4WIRE;
 80012c8:	4b7b      	ldr	r3, [pc, #492]	; (80014b8 <StartReadAccel+0x200>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	ADXL_InitStruct.IntMode      = INT_ACTIVEHIGH;
 80012ce:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <StartReadAccel+0x200>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	705a      	strb	r2, [r3, #1]
	ADXL_InitStruct.LPMode       = LPMODE_NORMAL;
 80012d4:	4b78      	ldr	r3, [pc, #480]	; (80014b8 <StartReadAccel+0x200>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	709a      	strb	r2, [r3, #2]
	ADXL_InitStruct.Rate         = BWRATE_400;
 80012da:	4b77      	ldr	r3, [pc, #476]	; (80014b8 <StartReadAccel+0x200>)
 80012dc:	220c      	movs	r2, #12
 80012de:	70da      	strb	r2, [r3, #3]
    ADXL_InitStruct.Range        = RANGE_2G;
 80012e0:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <StartReadAccel+0x200>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	711a      	strb	r2, [r3, #4]
    ADXL_InitStruct.Resolution   = RESOLUTION_FULL;
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <StartReadAccel+0x200>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	715a      	strb	r2, [r3, #5]
    ADXL_InitStruct.Justify      = JUSTIFY_SIGNED; 
 80012ec:	4b72      	ldr	r3, [pc, #456]	; (80014b8 <StartReadAccel+0x200>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	719a      	strb	r2, [r3, #6]
    ADXL_InitStruct.AutoSleep    = AUTOSLEEPOFF;
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <StartReadAccel+0x200>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	71da      	strb	r2, [r3, #7]
    ADXL_InitStruct.LinkMode     = LINKMODEOFF;   
 80012f8:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <StartReadAccel+0x200>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	721a      	strb	r2, [r3, #8]
    ADXL_InitStruct.Interrupt    = INT_DATA_READY;
 80012fe:	4b6e      	ldr	r3, [pc, #440]	; (80014b8 <StartReadAccel+0x200>)
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	725a      	strb	r2, [r3, #9]
    ADXL_InitStruct.IntPin       = INT1;
 8001304:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <StartReadAccel+0x200>)
 8001306:	2200      	movs	r2, #0
 8001308:	729a      	strb	r2, [r3, #10]

    while (true) {
		adxlStatus status = ADXL_Init (&ADXL_InitStruct);
 800130a:	486b      	ldr	r0, [pc, #428]	; (80014b8 <StartReadAccel+0x200>)
 800130c:	f7ff fd22 	bl	8000d54 <ADXL_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]
		if (status == ADXL_OK) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10a      	bne.n	8001330 <StartReadAccel+0x78>
			ADXL_Measure(ON);
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fe5e 	bl	8000fdc <ADXL_Measure>
			ADXL_IntProto(&ADXL_InitStruct);
 8001320:	4865      	ldr	r0, [pc, #404]	; (80014b8 <StartReadAccel+0x200>)
 8001322:	f7ff feca 	bl	80010ba <ADXL_IntProto>
			//ADXL_enableDoubleTap(INT1, (uint8_t)((1 << D0)), TAP_DURATION, TAP_THRESHOLD, TAP_LATENT, TAP_WINDOW);
			ADXL_getAccel(ADXL_acc, OUTPUT_FLOAT);
 8001326:	2100      	movs	r1, #0
 8001328:	4864      	ldr	r0, [pc, #400]	; (80014bc <StartReadAccel+0x204>)
 800132a:	f7ff fdc5 	bl	8000eb8 <ADXL_getAccel>

			break;
 800132e:	e003      	b.n	8001338 <StartReadAccel+0x80>
		}
		osDelay(200);
 8001330:	20c8      	movs	r0, #200	; 0xc8
 8001332:	f003 fbc8 	bl	8004ac6 <osDelay>
    while (true) {
 8001336:	e7e8      	b.n	800130a <StartReadAccel+0x52>
	}
	// ::::::::::::::::::::::::::::: SUPERLOOP :::::::::::::::::::::::::::::
	for (;;)
	{
		// Wait for accelerometer to collect data and for driver to read it
		osSemaphoreWait (AccelDataReadyHandle, osWaitForever);
 8001338:	4b61      	ldr	r3, [pc, #388]	; (80014c0 <StartReadAccel+0x208>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fc13 	bl	8004b6c <osSemaphoreWait>
		cycles++;
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <StartReadAccel+0x20c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <StartReadAccel+0x20c>)
 8001350:	701a      	strb	r2, [r3, #0]
		ADXL_accSquare = (ADXL_acc[0]*ADXL_acc[0]) + (ADXL_acc[1]*ADXL_acc[1]) + (ADXL_acc[2]*ADXL_acc[2]);
 8001352:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <StartReadAccel+0x204>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a59      	ldr	r2, [pc, #356]	; (80014bc <StartReadAccel+0x204>)
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb33 	bl	80009c8 <__aeabi_fmul>
 8001362:	4603      	mov	r3, r0
 8001364:	461c      	mov	r4, r3
 8001366:	4b55      	ldr	r3, [pc, #340]	; (80014bc <StartReadAccel+0x204>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a54      	ldr	r2, [pc, #336]	; (80014bc <StartReadAccel+0x204>)
 800136c:	6852      	ldr	r2, [r2, #4]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fb29 	bl	80009c8 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	4619      	mov	r1, r3
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff fa1c 	bl	80007b8 <__addsf3>
 8001380:	4603      	mov	r3, r0
 8001382:	461c      	mov	r4, r3
 8001384:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <StartReadAccel+0x204>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <StartReadAccel+0x204>)
 800138a:	6892      	ldr	r2, [r2, #8]
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fb1a 	bl	80009c8 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fa0d 	bl	80007b8 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <StartReadAccel+0x210>)
 80013a4:	601a      	str	r2, [r3, #0]

		// Detect acceleration start and end; Record timestamps
		if (ADXL_accSquare >= ACCEL_THRESHOLD) {
 80013a6:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <StartReadAccel+0x210>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fcbc 	bl	8000d2c <__aeabi_fcmpge>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d02f      	beq.n	800141a <StartReadAccel+0x162>
			if (accelStartTime == 0.0f) {
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <StartReadAccel+0x214>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff faaa 	bl	8000918 <__aeabi_ui2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f04f 0100 	mov.w	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fc90 	bl	8000cf0 <__aeabi_fcmpeq>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <StartReadAccel+0x128>
				accelStartTime = HAL_GetTick();
 80013d6:	f001 f8ad 	bl	8002534 <HAL_GetTick>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a3b      	ldr	r2, [pc, #236]	; (80014cc <StartReadAccel+0x214>)
 80013de:	6013      	str	r3, [r2, #0]
			}
			accelArray[accelArrayPointer] = ADXL_accSquare;
 80013e0:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <StartReadAccel+0x218>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <StartReadAccel+0x210>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a3a      	ldr	r2, [pc, #232]	; (80014d4 <StartReadAccel+0x21c>)
 80013ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (++accelArrayPointer >= accelNumOfPoints) accelArrayPointer = 0;
 80013f0:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <StartReadAccel+0x218>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <StartReadAccel+0x218>)
 80013fa:	801a      	strh	r2, [r3, #0]
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <StartReadAccel+0x218>)
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <StartReadAccel+0x220>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d302      	bcc.n	800140e <StartReadAccel+0x156>
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <StartReadAccel+0x218>)
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]
			accelNumOfPoints++;
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <StartReadAccel+0x220>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <StartReadAccel+0x220>)
 8001418:	801a      	strh	r2, [r3, #0]
		}
		if ((ADXL_accSquare < ACCEL_THRESHOLD) && accelStartTime != 0) {
 800141a:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <StartReadAccel+0x210>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc6e 	bl	8000d04 <__aeabi_fcmplt>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d01f      	beq.n	800146e <StartReadAccel+0x1b6>
 800142e:	4b27      	ldr	r3, [pc, #156]	; (80014cc <StartReadAccel+0x214>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01b      	beq.n	800146e <StartReadAccel+0x1b6>
			accelEndTime = HAL_GetTick();
 8001436:	f001 f87d 	bl	8002534 <HAL_GetTick>
 800143a:	4603      	mov	r3, r0
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <StartReadAccel+0x224>)
 800143e:	6013      	str	r3, [r2, #0]
			calcSamples();
 8001440:	f000 f9b4 	bl	80017ac <calcSamples>
			calcDisplacement();
 8001444:	f000 fa86 	bl	8001954 <calcDisplacement>
			calcVelocity();
 8001448:	f000 fa20 	bl	800188c <calcVelocity>
			checkCorrectTap();
 800144c:	f000 fb0c 	bl	8001a68 <checkCorrectTap>
			accelStartTime = 0;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <StartReadAccel+0x214>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
			memset ((uint8_t *)accelArray, 0, ACCEL_ARRAY_LEN * sizeof (float));
 8001456:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800145a:	2100      	movs	r1, #0
 800145c:	481d      	ldr	r0, [pc, #116]	; (80014d4 <StartReadAccel+0x21c>)
 800145e:	f005 fed5 	bl	800720c <memset>
			accelNumOfPoints = 0;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <StartReadAccel+0x220>)
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]
			accelArrayPointer = 0;
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <StartReadAccel+0x218>)
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]
		}
		if ((ADXL_accSquare < ACCEL_THRESHOLD) && accelStartTime == 0) {
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <StartReadAccel+0x210>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc44 	bl	8000d04 <__aeabi_fcmplt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <StartReadAccel+0x1e2>
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <StartReadAccel+0x214>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <StartReadAccel+0x1e2>
			displacement = 0;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <StartReadAccel+0x228>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
			velocity = 0;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <StartReadAccel+0x22c>)
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
		}

		// If we past this point we can compose a valid packet to send, so unlock task
		// guarantee to trigger packet send task half the frequency of this task
		if (cycles == 2) {
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <StartReadAccel+0x20c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	f47f af4a 	bne.w	8001338 <StartReadAccel+0x80>
			cycles = 0;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <StartReadAccel+0x20c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(ReadyToPackBinHandle);
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <StartReadAccel+0x230>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fbaa 	bl	8004c08 <osSemaphoreRelease>
		osSemaphoreWait (AccelDataReadyHandle, osWaitForever);
 80014b4:	e740      	b.n	8001338 <StartReadAccel+0x80>
 80014b6:	bf00      	nop
 80014b8:	20000080 	.word	0x20000080
 80014bc:	2000008c 	.word	0x2000008c
 80014c0:	2000026c 	.word	0x2000026c
 80014c4:	2000025a 	.word	0x2000025a
 80014c8:	20000098 	.word	0x20000098
 80014cc:	200000a8 	.word	0x200000a8
 80014d0:	20000248 	.word	0x20000248
 80014d4:	200000b8 	.word	0x200000b8
 80014d8:	20000000 	.word	0x20000000
 80014dc:	200000ac 	.word	0x200000ac
 80014e0:	200000b0 	.word	0x200000b0
 80014e4:	200000b4 	.word	0x200000b4
 80014e8:	20000270 	.word	0x20000270

080014ec <StartCheckTaps>:
/*
 * This task is called once a second to check if the correct taps were
 * made within this second.
 */
void StartCheckTaps(void const * argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag(NULL, (void *) 3);
 80014f4:	2103      	movs	r1, #3
 80014f6:	2000      	movs	r0, #0
 80014f8:	f004 fdfc 	bl	80060f4 <vTaskSetApplicationTaskTag>
	for(;;)
	{
		// Keep track of one-second windows total count and
		// how many taps happened within them
		switch (tap_count)
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <StartCheckTaps+0x94>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d014      	beq.n	800152e <StartCheckTaps+0x42>
 8001504:	2b02      	cmp	r3, #2
 8001506:	dc19      	bgt.n	800153c <StartCheckTaps+0x50>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <StartCheckTaps+0x26>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d007      	beq.n	8001520 <StartCheckTaps+0x34>
 8001510:	e014      	b.n	800153c <StartCheckTaps+0x50>
		{
		case 0:
			zero_tap_windows++;
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <StartCheckTaps+0x98>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <StartCheckTaps+0x98>)
 800151c:	801a      	strh	r2, [r3, #0]
			break;
 800151e:	e00f      	b.n	8001540 <StartCheckTaps+0x54>
		case 1:
			single_tap_windows++;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <StartCheckTaps+0x9c>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <StartCheckTaps+0x9c>)
 800152a:	801a      	strh	r2, [r3, #0]
			break;
 800152c:	e008      	b.n	8001540 <StartCheckTaps+0x54>
		case 2:
			double_tap_windows++;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <StartCheckTaps+0xa0>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <StartCheckTaps+0xa0>)
 8001538:	801a      	strh	r2, [r3, #0]
			break;
 800153a:	e001      	b.n	8001540 <StartCheckTaps+0x54>
		default:	// 3 taps per second are clearly a wrong way of doing CPR
			resetCPR();
 800153c:	f000 faf4 	bl	8001b28 <resetCPR>
		}

		// CPR Assessment reset cases:
		// If we record no taps at all for two seconds straight
		// Or if there are more than 20 single taps (so that we do not allow less than 100 taps a minute)
		if ((zero_tap_windows >= 2) || (single_tap_windows >= CPR_SINGLE_TAP_THRESHOLD))
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <StartCheckTaps+0x98>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d803      	bhi.n	8001550 <StartCheckTaps+0x64>
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <StartCheckTaps+0x9c>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	2b13      	cmp	r3, #19
 800154e:	d901      	bls.n	8001554 <StartCheckTaps+0x68>
			resetCPR();
 8001550:	f000 faea 	bl	8001b28 <resetCPR>

		// If CPR lasted for 60 seconds and we received a considerate amount of taps,
		// set success flag with the amount of taps
		if ((double_tap_windows + single_tap_windows + zero_tap_windows) == CPR_DURATION_SECONDS) {
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <StartCheckTaps+0xa0>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <StartCheckTaps+0x9c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a08      	ldr	r2, [pc, #32]	; (8001584 <StartCheckTaps+0x98>)
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	4413      	add	r3, r2
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d102      	bne.n	8001570 <StartCheckTaps+0x84>
			cpr_successful = true;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <StartCheckTaps+0xa4>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
		}

		// reset tap count for the next one-second window
		tap_count = 0;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <StartCheckTaps+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
		osDelay(1000);
 8001576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157a:	f003 faa4 	bl	8004ac6 <osDelay>
		switch (tap_count)
 800157e:	e7bd      	b.n	80014fc <StartCheckTaps+0x10>
 8001580:	2000024e 	.word	0x2000024e
 8001584:	20000256 	.word	0x20000256
 8001588:	20000254 	.word	0x20000254
 800158c:	20000252 	.word	0x20000252
 8001590:	20000259 	.word	0x20000259
 8001594:	00000000 	.word	0x00000000

08001598 <StartSendAccel>:
/*
 * This task is called once a second to check if the correct taps were
 * made within this second.
 */
void StartSendAccel(void const * argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag(NULL, (void *) 2);
 80015a0:	2102      	movs	r1, #2
 80015a2:	2000      	movs	r0, #0
 80015a4:	f004 fda6 	bl	80060f4 <vTaskSetApplicationTaskTag>
	for(;;)
	{
		osSemaphoreWait (ReadyToPackBinHandle, osWaitForever);
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <StartSendAccel+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fadb 	bl	8004b6c <osSemaphoreWait>
		displacement_out = (uint16_t)(displacement * 1.0e4);
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <StartSendAccel+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f856 	bl	800066c <__aeabi_f2d>
 80015c0:	a361      	add	r3, pc, #388	; (adr r3, 8001748 <StartSendAccel+0x1b0>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7fe fdc3 	bl	8000150 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff f8cb 	bl	800076c <__aeabi_d2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <StartSendAccel+0x1c0>)
 80015dc:	801a      	strh	r2, [r3, #0]
		velocity_out = (int16_t)(velocity * 1.0e4);
 80015de:	4b5f      	ldr	r3, [pc, #380]	; (800175c <StartSendAccel+0x1c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f842 	bl	800066c <__aeabi_f2d>
 80015e8:	a357      	add	r3, pc, #348	; (adr r3, 8001748 <StartSendAccel+0x1b0>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7fe fdaf 	bl	8000150 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff f88f 	bl	800071c <__aeabi_d2iz>
 80015fe:	4603      	mov	r3, r0
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <StartSendAccel+0x1c8>)
 8001604:	801a      	strh	r2, [r3, #0]
		int16_t ADXL_out[3]= {0};
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	809a      	strh	r2, [r3, #4]
		ADXL_out[0] = (int16_t)(ADXL_acc[0] * 1.0e4);
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <StartSendAccel+0x1cc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f829 	bl	800066c <__aeabi_f2d>
 800161a:	a34b      	add	r3, pc, #300	; (adr r3, 8001748 <StartSendAccel+0x1b0>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe fd96 	bl	8000150 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff f876 	bl	800071c <__aeabi_d2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	b21b      	sxth	r3, r3
 8001634:	833b      	strh	r3, [r7, #24]
		ADXL_out[1] = (int16_t)(ADXL_acc[1] * 1.0e4);
 8001636:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <StartSendAccel+0x1cc>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f816 	bl	800066c <__aeabi_f2d>
 8001640:	a341      	add	r3, pc, #260	; (adr r3, 8001748 <StartSendAccel+0x1b0>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fd83 	bl	8000150 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff f863 	bl	800071c <__aeabi_d2iz>
 8001656:	4603      	mov	r3, r0
 8001658:	b21b      	sxth	r3, r3
 800165a:	837b      	strh	r3, [r7, #26]
		ADXL_out[2] = (int16_t)(ADXL_acc[2] * 1.0e4);
 800165c:	4b41      	ldr	r3, [pc, #260]	; (8001764 <StartSendAccel+0x1cc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f803 	bl	800066c <__aeabi_f2d>
 8001666:	a338      	add	r3, pc, #224	; (adr r3, 8001748 <StartSendAccel+0x1b0>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe fd70 	bl	8000150 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff f850 	bl	800071c <__aeabi_d2iz>
 800167c:	4603      	mov	r3, r0
 800167e:	b21b      	sxth	r3, r3
 8001680:	83bb      	strh	r3, [r7, #28]

		uint8_t packet[PACKET_LEN] = {0};
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	811a      	strh	r2, [r3, #8]
		// header
		packet[0] = (uint8_t)0xAA;
 8001692:	23aa      	movs	r3, #170	; 0xaa
 8001694:	723b      	strb	r3, [r7, #8]
		packet[1] = (uint8_t)0x86;
 8001696:	2386      	movs	r3, #134	; 0x86
 8001698:	727b      	strb	r3, [r7, #9]
		// accel x, m/s/s * 10000
		packet[2] = (uint8_t)(ADXL_out[0] & 0xFF);
 800169a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	72bb      	strb	r3, [r7, #10]
		packet[3] = (uint8_t)(ADXL_out[0] >> 0x08);
 80016a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016a6:	121b      	asrs	r3, r3, #8
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	72fb      	strb	r3, [r7, #11]
		// accel y, m/s/s * 10000
		packet[4] = (uint8_t)(ADXL_out[1] & 0xFF);
 80016ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	733b      	strb	r3, [r7, #12]
		packet[5] = (uint8_t)(ADXL_out[1] >> 0x08);
 80016b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016ba:	121b      	asrs	r3, r3, #8
 80016bc:	b21b      	sxth	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	737b      	strb	r3, [r7, #13]
		// accel z, m/s/s * 10000
		packet[6] = (uint8_t)(ADXL_out[2] & 0xFF);
 80016c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	73bb      	strb	r3, [r7, #14]
		packet[7] = (uint8_t)(ADXL_out[2] >> 0x08);
 80016ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016ce:	121b      	asrs	r3, r3, #8
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	73fb      	strb	r3, [r7, #15]
		// displacement, m * 10000000
		packet[8] = (uint8_t)(displacement_out & 0xFF);
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <StartSendAccel+0x1c0>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	743b      	strb	r3, [r7, #16]
		packet[9] = (uint8_t)(displacement_out >> 0x08);
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <StartSendAccel+0x1c0>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	747b      	strb	r3, [r7, #17]
		// velocity, m/s * 10000000
		packet[10] = (uint8_t)(velocity_out & 0xFF);
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <StartSendAccel+0x1c8>)
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	74bb      	strb	r3, [r7, #18]
		packet[11] = (uint8_t)(velocity_out >> 0x08);
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <StartSendAccel+0x1c8>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	121b      	asrs	r3, r3, #8
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	74fb      	strb	r3, [r7, #19]
		// current tap count
		packet[12] = tap_count;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <StartSendAccel+0x1d0>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	753b      	strb	r3, [r7, #20]
		// checksum
		uint8_t checksum = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	77fb      	strb	r3, [r7, #31]
		for (uint8_t i = 2; i < PACKET_LEN - 1; i++) {
 800170e:	2302      	movs	r3, #2
 8001710:	77bb      	strb	r3, [r7, #30]
 8001712:	e00a      	b.n	800172a <StartSendAccel+0x192>
			checksum ^= packet[i];
 8001714:	7fbb      	ldrb	r3, [r7, #30]
 8001716:	3320      	adds	r3, #32
 8001718:	443b      	add	r3, r7
 800171a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	4053      	eors	r3, r2
 8001722:	77fb      	strb	r3, [r7, #31]
		for (uint8_t i = 2; i < PACKET_LEN - 1; i++) {
 8001724:	7fbb      	ldrb	r3, [r7, #30]
 8001726:	3301      	adds	r3, #1
 8001728:	77bb      	strb	r3, [r7, #30]
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d9f1      	bls.n	8001714 <StartSendAccel+0x17c>
		}
		packet[13] = checksum;
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	757b      	strb	r3, [r7, #21]
		HAL_UART_Transmit(&huart1, (uint8_t *)packet, sizeof(packet), 1);
 8001734:	f107 0108 	add.w	r1, r7, #8
 8001738:	2301      	movs	r3, #1
 800173a:	220e      	movs	r2, #14
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <StartSendAccel+0x1d4>)
 800173e:	f002 ffc7 	bl	80046d0 <HAL_UART_Transmit>
	{
 8001742:	e731      	b.n	80015a8 <StartSendAccel+0x10>
 8001744:	f3af 8000 	nop.w
 8001748:	00000000 	.word	0x00000000
 800174c:	40c38800 	.word	0x40c38800
 8001750:	20000270 	.word	0x20000270
 8001754:	200000b0 	.word	0x200000b0
 8001758:	2000024a 	.word	0x2000024a
 800175c:	200000b4 	.word	0x200000b4
 8001760:	2000024c 	.word	0x2000024c
 8001764:	2000008c 	.word	0x2000008c
 8001768:	2000024e 	.word	0x2000024e
 800176c:	20000600 	.word	0x20000600

08001770 <HAL_GPIO_EXTI_Callback>:
	}
}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
	if (ADXL_IntProto(&ADXL_InitStruct) == true) {
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x30>)
 800177c:	f7ff fc9d 	bl	80010ba <ADXL_IntProto>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_GPIO_EXTI_Callback+0x28>
		ADXL_getAccel(ADXL_acc, OUTPUT_FLOAT);
 8001786:	2100      	movs	r1, #0
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x34>)
 800178a:	f7ff fb95 	bl	8000eb8 <ADXL_getAccel>
		osSemaphoreRelease(AccelDataReadyHandle);
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fa38 	bl	8004c08 <osSemaphoreRelease>
    }
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000080 	.word	0x20000080
 80017a4:	2000008c 	.word	0x2000008c
 80017a8:	2000026c 	.word	0x2000026c

080017ac <calcSamples>:
/* Process accumulated acceleration samples
 * Check for chest recoil -- ensure that the peak acceleration sample is
 * followed by a series of samples of lesser acceleraion
 */
static void calcSamples (void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
	uint16_t n = accelArrayPointer == 0? 0 : accelArrayPointer - 1;	// number of measurements
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <calcSamples+0xd4>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <calcSamples+0x18>
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <calcSamples+0xd4>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	e000      	b.n	80017c6 <calcSamples+0x1a>
 80017c4:	2300      	movs	r3, #0
 80017c6:	80bb      	strh	r3, [r7, #4]
	// Chest recoil check
	float accelArrayMax = accelArray[0];
 80017c8:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <calcSamples+0xd8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
	uint16_t recoil_unlikely = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	817b      	strh	r3, [r7, #10]
	uint8_t accelArrayMaxIndex = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	727b      	strb	r3, [r7, #9]
	for (uint8_t i = 0; i <= n; i++) {	// Determine sample of maximum value
 80017d6:	2300      	movs	r3, #0
 80017d8:	723b      	strb	r3, [r7, #8]
 80017da:	e018      	b.n	800180e <calcSamples+0x62>
		if (fabs(accelArray[i]) > accelArrayMax) {
 80017dc:	7a3b      	ldrb	r3, [r7, #8]
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <calcSamples+0xd8>)
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e8:	4619      	mov	r1, r3
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f7ff fa8a 	bl	8000d04 <__aeabi_fcmplt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <calcSamples+0x5c>
			accelArrayMax = fabs(accelArray[i]);
 80017f6:	7a3b      	ldrb	r3, [r7, #8]
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <calcSamples+0xd8>)
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001802:	60fb      	str	r3, [r7, #12]
			accelArrayMaxIndex = i;
 8001804:	7a3b      	ldrb	r3, [r7, #8]
 8001806:	727b      	strb	r3, [r7, #9]
	for (uint8_t i = 0; i <= n; i++) {	// Determine sample of maximum value
 8001808:	7a3b      	ldrb	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	723b      	strb	r3, [r7, #8]
 800180e:	7a3b      	ldrb	r3, [r7, #8]
 8001810:	b29b      	uxth	r3, r3
 8001812:	88ba      	ldrh	r2, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	d2e1      	bcs.n	80017dc <calcSamples+0x30>
		}
	}
	for (uint8_t i = accelArrayMaxIndex + 1; i <= n; i++) {
 8001818:	7a7b      	ldrb	r3, [r7, #9]
 800181a:	3301      	adds	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e01b      	b.n	8001858 <calcSamples+0xac>
		if (fabs(accelArray[i]) < fabs(accelArray[i - 1]))
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <calcSamples+0xd8>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3b01      	subs	r3, #1
 8001830:	4914      	ldr	r1, [pc, #80]	; (8001884 <calcSamples+0xd8>)
 8001832:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff fa61 	bl	8000d04 <__aeabi_fcmplt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <calcSamples+0xa4>
			continue;
		else
			recoil_unlikely++;
 8001848:	897b      	ldrh	r3, [r7, #10]
 800184a:	3301      	adds	r3, #1
 800184c:	817b      	strh	r3, [r7, #10]
 800184e:	e000      	b.n	8001852 <calcSamples+0xa6>
			continue;
 8001850:	bf00      	nop
	for (uint8_t i = accelArrayMaxIndex + 1; i <= n; i++) {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	3301      	adds	r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	b29b      	uxth	r3, r3
 800185c:	88ba      	ldrh	r2, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	d2de      	bcs.n	8001820 <calcSamples+0x74>
	}
	// allow 3 unmatching samples just in case
	if (recoil_unlikely < 3)
 8001862:	897b      	ldrh	r3, [r7, #10]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d803      	bhi.n	8001870 <calcSamples+0xc4>
		chest_recoil = true;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <calcSamples+0xdc>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
	else
		chest_recoil = false;
}
 800186e:	e002      	b.n	8001876 <calcSamples+0xca>
		chest_recoil = false;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <calcSamples+0xdc>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000248 	.word	0x20000248
 8001884:	200000b8 	.word	0x200000b8
 8001888:	20000258 	.word	0x20000258

0800188c <calcVelocity>:
 * V0 is assumed to be 0, as if each compression begins with a stable position
 * on the patient's chest.
 * V is calculated in meters per second
 */
static void calcVelocity (void)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0

	velocity = 0.0f; // reset previous
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <calcVelocity+0xb0>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	float start_s = (float)accelStartTime / 1000;					// start timestamp in s
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <calcVelocity+0xb4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f83a 	bl	8000918 <__aeabi_ui2f>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <calcVelocity+0xb8>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f941 	bl	8000b30 <__aeabi_fdiv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	60bb      	str	r3, [r7, #8]
	float end_s = (float)accelEndTime / 1000;						// end timestamp in s
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <calcVelocity+0xbc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f82e 	bl	8000918 <__aeabi_ui2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	4921      	ldr	r1, [pc, #132]	; (8001944 <calcVelocity+0xb8>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f935 	bl	8000b30 <__aeabi_fdiv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	607b      	str	r3, [r7, #4]
	uint16_t n = accelArrayPointer == 0? 0 : accelArrayPointer - 1;	// number of measurements
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <calcVelocity+0xc0>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <calcVelocity+0x50>
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <calcVelocity+0xc0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29b      	uxth	r3, r3
 80018da:	e000      	b.n	80018de <calcVelocity+0x52>
 80018dc:	2300      	movs	r3, #0
 80018de:	807b      	strh	r3, [r7, #2]

   for(int i=0; i <= n; i++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e021      	b.n	800192a <calcVelocity+0x9e>
	   velocity += (accelArray[i]) * (end_s - start_s) / 2;
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <calcVelocity+0xc4>)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7fe ff5f 	bl	80007b4 <__aeabi_fsub>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff f864 	bl	80009c8 <__aeabi_fmul>
 8001900:	4603      	mov	r3, r0
 8001902:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f912 	bl	8000b30 <__aeabi_fdiv>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <calcVelocity+0xb0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f7fe ff4e 	bl	80007b8 <__addsf3>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <calcVelocity+0xb0>)
 8001922:	601a      	str	r2, [r3, #0]
   for(int i=0; i <= n; i++) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	429a      	cmp	r2, r3
 8001930:	ddd9      	ble.n	80018e6 <calcVelocity+0x5a>
   }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	200000b4 	.word	0x200000b4
 8001940:	200000a8 	.word	0x200000a8
 8001944:	447a0000 	.word	0x447a0000
 8001948:	200000ac 	.word	0x200000ac
 800194c:	20000248 	.word	0x20000248
 8001950:	200000b8 	.word	0x200000b8

08001954 <calcDisplacement>:
 * S = (a / 2) * t^2 (Again, V0 is assumed to be 0).
 * a here is average acceleration accumulated over time of it being present
 * S in calculated in meters
 */
static void calcDisplacement (void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
	displacement = 0.0f; // reset previous
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <calcDisplacement+0xf8>)
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
	float start_s = (float)accelStartTime / 1000;					// start timestamp in s
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <calcDisplacement+0xfc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe ffd6 	bl	8000918 <__aeabi_ui2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4939      	ldr	r1, [pc, #228]	; (8001a54 <calcDisplacement+0x100>)
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f8dd 	bl	8000b30 <__aeabi_fdiv>
 8001976:	4603      	mov	r3, r0
 8001978:	60fb      	str	r3, [r7, #12]
	float end_s = (float)accelEndTime / 1000;						// end timestamp in s
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <calcDisplacement+0x104>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe ffca 	bl	8000918 <__aeabi_ui2f>
 8001984:	4603      	mov	r3, r0
 8001986:	4933      	ldr	r1, [pc, #204]	; (8001a54 <calcDisplacement+0x100>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f8d1 	bl	8000b30 <__aeabi_fdiv>
 800198e:	4603      	mov	r3, r0
 8001990:	60bb      	str	r3, [r7, #8]

	float accelArrayAvg = 0;
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
	uint16_t n = accelArrayPointer == 0? 0 : accelArrayPointer - 1;	// number of measurements
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <calcDisplacement+0x108>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <calcDisplacement+0x56>
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <calcDisplacement+0x108>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	e000      	b.n	80019ac <calcDisplacement+0x58>
 80019aa:	2300      	movs	r3, #0
 80019ac:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i <= n; i++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	74fb      	strb	r3, [r7, #19]
 80019b2:	e00c      	b.n	80019ce <calcDisplacement+0x7a>
		accelArrayAvg += accelArray[i];
 80019b4:	7cfb      	ldrb	r3, [r7, #19]
 80019b6:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <calcDisplacement+0x10c>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	4619      	mov	r1, r3
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7fe fefa 	bl	80007b8 <__addsf3>
 80019c4:	4603      	mov	r3, r0
 80019c6:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i <= n; i++) {
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	3301      	adds	r3, #1
 80019cc:	74fb      	strb	r3, [r7, #19]
 80019ce:	7cfb      	ldrb	r3, [r7, #19]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d2ed      	bcs.n	80019b4 <calcDisplacement+0x60>
	}
	if (n != 0)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <calcDisplacement+0xa2>
		accelArrayAvg = accelArrayAvg / n;
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe ff9d 	bl	8000920 <__aeabi_i2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff f8a0 	bl	8000b30 <__aeabi_fdiv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e002      	b.n	80019fc <calcDisplacement+0xa8>
	else
		accelArrayAvg = 0;
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

	displacement = ((accelArrayAvg / 2)  * (end_s - start_s) * (end_s - start_s)) * 100; // to сm
 80019fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7ff f895 	bl	8000b30 <__aeabi_fdiv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461c      	mov	r4, r3
 8001a0a:	68f9      	ldr	r1, [r7, #12]
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f7fe fed1 	bl	80007b4 <__aeabi_fsub>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7fe ffd6 	bl	80009c8 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461c      	mov	r4, r3
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f7fe fec6 	bl	80007b4 <__aeabi_fsub>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7fe ffcb 	bl	80009c8 <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	490b      	ldr	r1, [pc, #44]	; (8001a64 <calcDisplacement+0x110>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe ffc6 	bl	80009c8 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <calcDisplacement+0xf8>)
 8001a42:	601a      	str	r2, [r3, #0]

	// register a correct tap

}
 8001a44:	bf00      	nop
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	200000b0 	.word	0x200000b0
 8001a50:	200000a8 	.word	0x200000a8
 8001a54:	447a0000 	.word	0x447a0000
 8001a58:	200000ac 	.word	0x200000ac
 8001a5c:	20000248 	.word	0x20000248
 8001a60:	200000b8 	.word	0x200000b8
 8001a64:	42c80000 	.word	0x42c80000

08001a68 <checkCorrectTap>:
 * 1 : Average array value is above threshold
 * 2 : Vertical displacement is more than 50 mm
 * 3 : Chest recoil was present
 */
static void checkCorrectTap (void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	float 	accelArrayAvg = 0;
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
	uint16_t n = accelArrayPointer == 0? 0 : accelArrayPointer - 1;	// number of measurements
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <checkCorrectTap+0xac>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <checkCorrectTap+0x1e>
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <checkCorrectTap+0xac>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	e000      	b.n	8001a88 <checkCorrectTap+0x20>
 8001a86:	2300      	movs	r3, #0
 8001a88:	803b      	strh	r3, [r7, #0]
	for (uint8_t i = 0; i <= n; i++) {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	70fb      	strb	r3, [r7, #3]
 8001a8e:	e00c      	b.n	8001aaa <checkCorrectTap+0x42>
		accelArrayAvg += accelArray[i];
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <checkCorrectTap+0xb0>)
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fe8c 	bl	80007b8 <__addsf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i <= n; i++) {
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	70fb      	strb	r3, [r7, #3]
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	883a      	ldrh	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d2ed      	bcs.n	8001a90 <checkCorrectTap+0x28>
	}
	accelArrayAvg = accelArrayAvg / n;
 8001ab4:	883b      	ldrh	r3, [r7, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ff32 	bl	8000920 <__aeabi_i2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff f835 	bl	8000b30 <__aeabi_fdiv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	607b      	str	r3, [r7, #4]
	chest_recoil = true;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <checkCorrectTap+0xb4>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
	if (displacement > CPR_DISPLACEMENT_THRESHOLD && accelArrayAvg > CPR_ACCELERATION_THRESHOLD && chest_recoil == true)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <checkCorrectTap+0xb8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f931 	bl	8000d40 <__aeabi_fcmpgt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d100      	bne.n	8001ae6 <checkCorrectTap+0x7e>
		tap_count++;
}
 8001ae4:	e012      	b.n	8001b0c <checkCorrectTap+0xa4>
	if (displacement > CPR_DISPLACEMENT_THRESHOLD && accelArrayAvg > CPR_ACCELERATION_THRESHOLD && chest_recoil == true)
 8001ae6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff f928 	bl	8000d40 <__aeabi_fcmpgt>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d100      	bne.n	8001af8 <checkCorrectTap+0x90>
}
 8001af6:	e009      	b.n	8001b0c <checkCorrectTap+0xa4>
	if (displacement > CPR_DISPLACEMENT_THRESHOLD && accelArrayAvg > CPR_ACCELERATION_THRESHOLD && chest_recoil == true)
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <checkCorrectTap+0xb4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <checkCorrectTap+0xa4>
		tap_count++;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <checkCorrectTap+0xbc>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <checkCorrectTap+0xbc>)
 8001b0a:	801a      	strh	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000248 	.word	0x20000248
 8001b18:	200000b8 	.word	0x200000b8
 8001b1c:	20000258 	.word	0x20000258
 8001b20:	200000b0 	.word	0x200000b0
 8001b24:	2000024e 	.word	0x2000024e

08001b28 <resetCPR>:
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/* Reset all parameters that count one-second windows and CPR taps
 * Called in case of bad CPR as to zero all parameters
 */
static void resetCPR (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	zero_tap_windows = 0;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <resetCPR+0x38>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	801a      	strh	r2, [r3, #0]
	single_tap_windows = 0;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <resetCPR+0x3c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	801a      	strh	r2, [r3, #0]
	double_tap_windows = 0;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <resetCPR+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	801a      	strh	r2, [r3, #0]

	tap_windows = 0;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <resetCPR+0x44>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
	tap_count = 0;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <resetCPR+0x48>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	801a      	strh	r2, [r3, #0]
	cpr_successful = false;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <resetCPR+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
	chest_recoil = false;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <resetCPR+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000256 	.word	0x20000256
 8001b64:	20000254 	.word	0x20000254
 8001b68:	20000252 	.word	0x20000252
 8001b6c:	20000250 	.word	0x20000250
 8001b70:	2000024e 	.word	0x2000024e
 8001b74:	20000259 	.word	0x20000259
 8001b78:	20000258 	.word	0x20000258

08001b7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <vApplicationGetIdleTaskMemory+0x28>)
 8001b8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	20000274 	.word	0x20000274
 8001ba8:	20000318 	.word	0x20000318

08001bac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b0a0      	sub	sp, #128	; 0x80
 8001bb0:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of AccelDataReady */
  osSemaphoreDef(AccelDataReady);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  AccelDataReadyHandle = osSemaphoreCreate(osSemaphore(AccelDataReady), 1);
 8001bba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 ff94 	bl	8004aee <osSemaphoreCreate>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <MX_FREERTOS_Init+0xd8>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadyToPackBin */
  osSemaphoreDef(ReadyToPackBin);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	673b      	str	r3, [r7, #112]	; 0x70
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	677b      	str	r3, [r7, #116]	; 0x74
  ReadyToPackBinHandle = osSemaphoreCreate(osSemaphore(ReadyToPackBin), 1);
 8001bd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 ff87 	bl	8004aee <osSemaphoreCreate>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <MX_FREERTOS_Init+0xdc>)
 8001be4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <MX_FREERTOS_Init+0xe0>)
 8001be8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001bec:	461d      	mov	r5, r3
 8001bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001bfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 ff14 	bl	8004a2e <osThreadCreate>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <MX_FREERTOS_Init+0xe4>)
 8001c0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadAccel */
  osThreadDef(ReadAccel, StartReadAccel, osPriorityNormal, 0, 128);
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_FREERTOS_Init+0xe8>)
 8001c0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c12:	461d      	mov	r5, r3
 8001c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadAccelHandle = osThreadCreate(osThread(ReadAccel), NULL);
 8001c20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 ff01 	bl	8004a2e <osThreadCreate>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <MX_FREERTOS_Init+0xec>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* definition and creation of CheckTaps */
  osThreadDef(CheckTaps, StartCheckTaps, osPriorityNormal, 0, 128);
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_FREERTOS_Init+0xf0>)
 8001c34:	f107 041c 	add.w	r4, r7, #28
 8001c38:	461d      	mov	r5, r3
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CheckTapsHandle = osThreadCreate(osThread(CheckTaps), NULL);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 feee 	bl	8004a2e <osThreadCreate>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_FREERTOS_Init+0xf4>)
 8001c56:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendAccel */
  osThreadDef(SendAccel, StartSendAccel, osPriorityBelowNormal, 0, 128);
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_FREERTOS_Init+0xf8>)
 8001c5a:	463c      	mov	r4, r7
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendAccelHandle = osThreadCreate(osThread(SendAccel), NULL);
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fedd 	bl	8004a2e <osThreadCreate>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <MX_FREERTOS_Init+0xfc>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c7a:	bf00      	nop
 8001c7c:	3780      	adds	r7, #128	; 0x80
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000026c 	.word	0x2000026c
 8001c88:	20000270 	.word	0x20000270
 8001c8c:	08007404 	.word	0x08007404
 8001c90:	2000025c 	.word	0x2000025c
 8001c94:	0800742c 	.word	0x0800742c
 8001c98:	20000260 	.word	0x20000260
 8001c9c:	08007454 	.word	0x08007454
 8001ca0:	20000264 	.word	0x20000264
 8001ca4:	0800747c 	.word	0x0800747c
 8001ca8:	20000268 	.word	0x20000268

08001cac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	vTaskSetApplicationTaskTag(NULL, (void *) 4);
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f004 fa1c 	bl	80060f4 <vTaskSetApplicationTaskTag>
	/* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <StartDefaultTask+0x24>)
 8001cc2:	f000 febd 	bl	8002a40 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cca:	f002 fefc 	bl	8004ac6 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001cce:	e7f5      	b.n	8001cbc <StartDefaultTask+0x10>
 8001cd0:	40011000 	.word	0x40011000

08001cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a45      	ldr	r2, [pc, #276]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d06:	f043 0320 	orr.w	r3, r3, #32
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <MX_GPIO_Init+0x148>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d4e:	4834      	ldr	r0, [pc, #208]	; (8001e20 <MX_GPIO_Init+0x14c>)
 8001d50:	f000 fe5e 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_SPI1_CS_GPIO_Port, ADXL_SPI1_CS_Pin, GPIO_PIN_SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2110      	movs	r1, #16
 8001d58:	4832      	ldr	r0, [pc, #200]	; (8001e24 <MX_GPIO_Init+0x150>)
 8001d5a:	f000 fe59 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_TAG1_Pin|DEBUG_TAG2_Pin|DEBUG_IDLE_Pin|DEBUG_TAG3_Pin
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001d64:	4830      	ldr	r0, [pc, #192]	; (8001e28 <MX_GPIO_Init+0x154>)
 8001d66:	f000 fe53 	bl	8002a10 <HAL_GPIO_WritePin>
                          |DEBUG_TAG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4827      	ldr	r0, [pc, #156]	; (8001e20 <MX_GPIO_Init+0x14c>)
 8001d84:	f000 fcc0 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_SPI1_CS_Pin;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADXL_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4821      	ldr	r0, [pc, #132]	; (8001e24 <MX_GPIO_Init+0x150>)
 8001da0:	f000 fcb2 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_INT1_Pin;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <MX_GPIO_Init+0x158>)
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADXL_INT1_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	481c      	ldr	r0, [pc, #112]	; (8001e28 <MX_GPIO_Init+0x154>)
 8001db8:	f000 fca6 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_INT2_Pin;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_GPIO_Init+0x158>)
 8001dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADXL_INT2_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4816      	ldr	r0, [pc, #88]	; (8001e28 <MX_GPIO_Init+0x154>)
 8001dd0:	f000 fc9a 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DEBUG_TAG1_Pin|DEBUG_TAG2_Pin|DEBUG_IDLE_Pin|DEBUG_TAG3_Pin
 8001dd4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001dd8:	613b      	str	r3, [r7, #16]
                          |DEBUG_TAG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4619      	mov	r1, r3
 8001dec:	480e      	ldr	r0, [pc, #56]	; (8001e28 <MX_GPIO_Init+0x154>)
 8001dee:	f000 fc8b 	bl	8002708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	2006      	movs	r0, #6
 8001df8:	f000 fc5b 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dfc:	2006      	movs	r0, #6
 8001dfe:	f000 fc74 	bl	80026ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2105      	movs	r1, #5
 8001e06:	2007      	movs	r0, #7
 8001e08:	f000 fc53 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e0c:	2007      	movs	r0, #7
 8001e0e:	f000 fc6c 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 8001e12:	bf00      	nop
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	10110000 	.word	0x10110000

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e34:	f000 fb56 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e38:	f000 f812 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3c:	f7ff ff4a 	bl	8001cd4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e40:	f000 fab4 	bl	80023ac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001e44:	f000 fa40 	bl	80022c8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001e48:	f000 f8d6 	bl	8001ff8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <main+0x2c>)
 8001e4e:	f002 f841 	bl	8003ed4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e52:	f7ff feab 	bl	8001bac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e56:	f002 fde3 	bl	8004a20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <main+0x2a>
 8001e5c:	200005b8 	.word	0x200005b8

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b090      	sub	sp, #64	; 0x40
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	2228      	movs	r2, #40	; 0x28
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 f9cc 	bl	800720c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e94:	2302      	movs	r3, #2
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea4:	f107 0318 	add.w	r3, r7, #24
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fdfb 	bl	8002aa4 <HAL_RCC_OscConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001eb4:	f000 f89a 	bl	8001fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb8:	230f      	movs	r3, #15
 8001eba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 f868 	bl	8002fa8 <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ede:	f000 f885 	bl	8001fec <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3740      	adds	r7, #64	; 0x40
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <TaskSwitchedIn>:

/* USER CODE BEGIN 4 */
void TaskSwitchedIn(uint32_t tag)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	switch (tag)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d81d      	bhi.n	8001f38 <TaskSwitchedIn+0x4c>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <TaskSwitchedIn+0x18>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f2f 	.word	0x08001f2f
	{
	case 1:
		DEBUG_TAG1_GPIO_Port->BSRR = DEBUG_TAG1_Pin;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <TaskSwitchedIn+0x58>)
 8001f16:	2220      	movs	r2, #32
 8001f18:	611a      	str	r2, [r3, #16]
		break;
 8001f1a:	e00d      	b.n	8001f38 <TaskSwitchedIn+0x4c>
	case 2:
		DEBUG_TAG2_GPIO_Port->BSRR = DEBUG_TAG2_Pin;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <TaskSwitchedIn+0x58>)
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	611a      	str	r2, [r3, #16]
		break;
 8001f22:	e009      	b.n	8001f38 <TaskSwitchedIn+0x4c>
	case 3:
		DEBUG_TAG3_GPIO_Port->BSRR = DEBUG_TAG3_Pin;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <TaskSwitchedIn+0x58>)
 8001f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f2a:	611a      	str	r2, [r3, #16]
		break;
 8001f2c:	e004      	b.n	8001f38 <TaskSwitchedIn+0x4c>
	case 4:
		DEBUG_TAG4_GPIO_Port->BSRR = DEBUG_TAG4_Pin;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <TaskSwitchedIn+0x58>)
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	611a      	str	r2, [r3, #16]
		break;
 8001f36:	bf00      	nop
	}
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010c00 	.word	0x40010c00

08001f48 <TaskSwitchedOut>:


void TaskSwitchedOut(uint32_t tag)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	switch (tag)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d81f      	bhi.n	8001f98 <TaskSwitchedOut+0x50>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <TaskSwitchedOut+0x18>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f7b 	.word	0x08001f7b
 8001f68:	08001f85 	.word	0x08001f85
 8001f6c:	08001f8f 	.word	0x08001f8f
	{
	case 1:
		DEBUG_TAG1_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG1_Pin << 16U;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <TaskSwitchedOut+0x5c>)
 8001f72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f76:	611a      	str	r2, [r3, #16]
		break;
 8001f78:	e00e      	b.n	8001f98 <TaskSwitchedOut+0x50>
	case 2:
		DEBUG_TAG2_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG2_Pin << 16U;
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <TaskSwitchedOut+0x5c>)
 8001f7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f80:	611a      	str	r2, [r3, #16]
		break;
 8001f82:	e009      	b.n	8001f98 <TaskSwitchedOut+0x50>
	case 3:
		DEBUG_TAG3_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG3_Pin << 16U;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <TaskSwitchedOut+0x5c>)
 8001f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8a:	611a      	str	r2, [r3, #16]
		break;
 8001f8c:	e004      	b.n	8001f98 <TaskSwitchedOut+0x50>
	case 4:
		DEBUG_TAG4_GPIO_Port->BSRR = (uint32_t)DEBUG_TAG4_Pin << 16U;
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <TaskSwitchedOut+0x5c>)
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	611a      	str	r2, [r3, #16]
		break;
 8001f96:	bf00      	nop
	}
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010c00 	.word	0x40010c00

08001fa8 <vApplicationIdleHook>:

void vApplicationIdleHook (void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	DEBUG_IDLE_GPIO_Port->BSRR = DEBUG_IDLE_Pin;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <vApplicationIdleHook+0x1c>)
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	611a      	str	r2, [r3, #16]
	__NOP();
 8001fb2:	bf00      	nop
	DEBUG_IDLE_GPIO_Port->BSRR = (uint32_t)DEBUG_IDLE_Pin << 16U;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <vApplicationIdleHook+0x1c>)
 8001fb6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fba:	611a      	str	r2, [r3, #16]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fda:	f000 fa99 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
//  if (htim->Instance == TIM2) {
//
//  	}
  /* USER CODE END Callback 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40012c00 	.word	0x40012c00

08001fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
}
 8001ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <Error_Handler+0x8>
	...

08001ff8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_SPI1_Init+0x64>)
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <MX_SPI1_Init+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_SPI1_Init+0x64>)
 8002004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_SPI1_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_SPI1_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_SPI1_Init+0x64>)
 8002018:	2202      	movs	r2, #2
 800201a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_SPI1_Init+0x64>)
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_SPI1_Init+0x64>)
 8002024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_SPI1_Init+0x64>)
 800202c:	2218      	movs	r2, #24
 800202e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <MX_SPI1_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_SPI1_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <MX_SPI1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_SPI1_Init+0x64>)
 8002044:	220a      	movs	r2, #10
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_SPI1_Init+0x64>)
 800204a:	f001 f96b 	bl	8003324 <HAL_SPI_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002054:	f7ff ffca 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000518 	.word	0x20000518
 8002060:	40013000 	.word	0x40013000

08002064 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_SPI_MspInit+0x88>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12f      	bne.n	80020e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_SPI_MspInit+0x8c>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_SPI_MspInit+0x8c>)
 800208a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_SPI_MspInit+0x8c>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_SPI_MspInit+0x8c>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <HAL_SPI_MspInit+0x8c>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_SPI_MspInit+0x8c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADXL_SPI1_SCK_Pin|ADXL_SPI1_MOSI_Pin;
 80020b4:	23a0      	movs	r3, #160	; 0xa0
 80020b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	480b      	ldr	r0, [pc, #44]	; (80020f4 <HAL_SPI_MspInit+0x90>)
 80020c8:	f000 fb1e 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADXL_SPI1_MISO_Pin;
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ADXL_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4619      	mov	r1, r3
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_SPI_MspInit+0x90>)
 80020e0:	f000 fb12 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020e4:	bf00      	nop
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40013000 	.word	0x40013000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010800 	.word	0x40010800

080020f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_MspInit+0x68>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_MspInit+0x68>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6193      	str	r3, [r2, #24]
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_MspInit+0x68>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_MspInit+0x68>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_MspInit+0x68>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_MspInit+0x68>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	f06f 0001 	mvn.w	r0, #1
 8002136:	f000 fabc 	bl	80026b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_MspInit+0x6c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_MspInit+0x6c>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000

08002168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_InitTick+0xd0>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <HAL_InitTick+0xd0>)
 8002184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_InitTick+0xd0>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 f871 	bl	8003288 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021a6:	f001 f85b 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80021aa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_InitTick+0xd4>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	3b01      	subs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_InitTick+0xd8>)
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <HAL_InitTick+0xdc>)
 80021be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_InitTick+0xd8>)
 80021c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021c6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_InitTick+0xd8>)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_InitTick+0xd8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_InitTick+0xd8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_InitTick+0xd8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80021e0:	4817      	ldr	r0, [pc, #92]	; (8002240 <HAL_InitTick+0xd8>)
 80021e2:	f001 fe27 	bl	8003e34 <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d11b      	bne.n	800222c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021f4:	4812      	ldr	r0, [pc, #72]	; (8002240 <HAL_InitTick+0xd8>)
 80021f6:	f001 fe6d 	bl	8003ed4 <HAL_TIM_Base_Start_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002208:	2019      	movs	r0, #25
 800220a:	f000 fa6e 	bl	80026ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d808      	bhi.n	8002226 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	2019      	movs	r0, #25
 800221a:	f000 fa4a 	bl	80026b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_InitTick+0xe0>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e002      	b.n	800222c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800222c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002230:	4618      	mov	r0, r3
 8002232:	3730      	adds	r7, #48	; 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	431bde83 	.word	0x431bde83
 8002240:	20000570 	.word	0x20000570
 8002244:	40012c00 	.word	0x40012c00
 8002248:	20000008 	.word	0x20000008

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler+0x4>

08002252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADXL_INT1_Pin);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 fbfa 	bl	8002a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADXL_INT2_Pin);
 8002288:	2002      	movs	r0, #2
 800228a:	f000 fbf3 	bl	8002a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM1_UP_IRQHandler+0x10>)
 800229a:	f001 fe6d 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000570 	.word	0x20000570

080022a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM2_IRQHandler+0x10>)
 80022ae:	f001 fe63 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200005b8 	.word	0x200005b8

080022bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022dc:	463b      	mov	r3, r7
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_TIM2_Init+0x98>)
 80022e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <MX_TIM2_Init+0x98>)
 80022ee:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MX_TIM2_Init+0x98>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <MX_TIM2_Init+0x98>)
 80022fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002300:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <MX_TIM2_Init+0x98>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_TIM2_Init+0x98>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800230e:	4814      	ldr	r0, [pc, #80]	; (8002360 <MX_TIM2_Init+0x98>)
 8002310:	f001 fd90 	bl	8003e34 <HAL_TIM_Base_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800231a:	f7ff fe67 	bl	8001fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4619      	mov	r1, r3
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <MX_TIM2_Init+0x98>)
 800232c:	f001 ff2c 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002336:	f7ff fe59 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM2_Init+0x98>)
 8002348:	f002 f902 	bl	8004550 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002352:	f7ff fe4b 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200005b8 	.word	0x200005b8

08002364 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002374:	d113      	bne.n	800239e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_TIM_Base_MspInit+0x44>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_TIM_Base_MspInit+0x44>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_TIM_Base_MspInit+0x44>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2105      	movs	r1, #5
 8002392:	201c      	movs	r0, #28
 8002394:	f000 f98d 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002398:	201c      	movs	r0, #28
 800239a:	f000 f9a6 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000

080023ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <MX_USART1_UART_Init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023e4:	f002 f924 	bl	8004630 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ee:	f7ff fdfd 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000600 	.word	0x20000600
 80023fc:	40013800 	.word	0x40013800

08002400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_UART_MspInit+0x8c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d131      	bne.n	8002484 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x90>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x90>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x90>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	4619      	mov	r1, r3
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <HAL_UART_MspInit+0x94>)
 8002466:	f000 f94f 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800246a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_UART_MspInit+0x94>)
 8002480:	f000 f942 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002484:	bf00      	nop
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40013800 	.word	0x40013800
 8002490:	40021000 	.word	0x40021000
 8002494:	40010800 	.word	0x40010800

08002498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002498:	f7ff ff10 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800249e:	490c      	ldr	r1, [pc, #48]	; (80024d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024b4:	4c09      	ldr	r4, [pc, #36]	; (80024dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f004 ff01 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024c6:	f7ff fcb3 	bl	8001e30 <main>
  bx lr
 80024ca:	4770      	bx	lr
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80024d4:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 80024d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80024dc:	200014d8 	.word	0x200014d8

080024e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC1_2_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_Init+0x28>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_Init+0x28>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f000 f8d1 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fa:	200f      	movs	r0, #15
 80024fc:	f7ff fe34 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002500:	f7ff fdfa 	bl	80020f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x1c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x20>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a03      	ldr	r2, [pc, #12]	; (8002530 <HAL_IncTick+0x20>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	2000000c 	.word	0x2000000c
 8002530:	20000648 	.word	0x20000648

08002534 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <HAL_GetTick+0x10>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000648 	.word	0x20000648

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4906      	ldr	r1, [pc, #24]	; (80025e0 <__NVIC_EnableIRQ+0x34>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff4f 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff64 	bl	8002590 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ffb2 	bl	8002638 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff81 	bl	80025e4 <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff57 	bl	80025ac <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b08b      	sub	sp, #44	; 0x2c
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	e169      	b.n	80029f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800271c:	2201      	movs	r2, #1
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8158 	bne.w	80029ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a9a      	ldr	r2, [pc, #616]	; (80029a8 <HAL_GPIO_Init+0x2a0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05e      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002744:	4a98      	ldr	r2, [pc, #608]	; (80029a8 <HAL_GPIO_Init+0x2a0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d875      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 800274a:	4a98      	ldr	r2, [pc, #608]	; (80029ac <HAL_GPIO_Init+0x2a4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d058      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002750:	4a96      	ldr	r2, [pc, #600]	; (80029ac <HAL_GPIO_Init+0x2a4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d86f      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 8002756:	4a96      	ldr	r2, [pc, #600]	; (80029b0 <HAL_GPIO_Init+0x2a8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d052      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 800275c:	4a94      	ldr	r2, [pc, #592]	; (80029b0 <HAL_GPIO_Init+0x2a8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d869      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 8002762:	4a94      	ldr	r2, [pc, #592]	; (80029b4 <HAL_GPIO_Init+0x2ac>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d04c      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002768:	4a92      	ldr	r2, [pc, #584]	; (80029b4 <HAL_GPIO_Init+0x2ac>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d863      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 800276e:	4a92      	ldr	r2, [pc, #584]	; (80029b8 <HAL_GPIO_Init+0x2b0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d046      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002774:	4a90      	ldr	r2, [pc, #576]	; (80029b8 <HAL_GPIO_Init+0x2b0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d85d      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d82a      	bhi.n	80027d4 <HAL_GPIO_Init+0xcc>
 800277e:	2b12      	cmp	r3, #18
 8002780:	d859      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 8002782:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_GPIO_Init+0x80>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002803 	.word	0x08002803
 800278c:	080027dd 	.word	0x080027dd
 8002790:	080027ef 	.word	0x080027ef
 8002794:	08002831 	.word	0x08002831
 8002798:	08002837 	.word	0x08002837
 800279c:	08002837 	.word	0x08002837
 80027a0:	08002837 	.word	0x08002837
 80027a4:	08002837 	.word	0x08002837
 80027a8:	08002837 	.word	0x08002837
 80027ac:	08002837 	.word	0x08002837
 80027b0:	08002837 	.word	0x08002837
 80027b4:	08002837 	.word	0x08002837
 80027b8:	08002837 	.word	0x08002837
 80027bc:	08002837 	.word	0x08002837
 80027c0:	08002837 	.word	0x08002837
 80027c4:	08002837 	.word	0x08002837
 80027c8:	08002837 	.word	0x08002837
 80027cc:	080027e5 	.word	0x080027e5
 80027d0:	080027f9 	.word	0x080027f9
 80027d4:	4a79      	ldr	r2, [pc, #484]	; (80029bc <HAL_GPIO_Init+0x2b4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027da:	e02c      	b.n	8002836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	623b      	str	r3, [r7, #32]
          break;
 80027e2:	e029      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	3304      	adds	r3, #4
 80027ea:	623b      	str	r3, [r7, #32]
          break;
 80027ec:	e024      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	3308      	adds	r3, #8
 80027f4:	623b      	str	r3, [r7, #32]
          break;
 80027f6:	e01f      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	330c      	adds	r3, #12
 80027fe:	623b      	str	r3, [r7, #32]
          break;
 8002800:	e01a      	b.n	8002838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800280a:	2304      	movs	r3, #4
 800280c:	623b      	str	r3, [r7, #32]
          break;
 800280e:	e013      	b.n	8002838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002818:	2308      	movs	r3, #8
 800281a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	611a      	str	r2, [r3, #16]
          break;
 8002822:	e009      	b.n	8002838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002824:	2308      	movs	r3, #8
 8002826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	615a      	str	r2, [r3, #20]
          break;
 800282e:	e003      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
          break;
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x130>
          break;
 8002836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2bff      	cmp	r3, #255	; 0xff
 800283c:	d801      	bhi.n	8002842 <HAL_GPIO_Init+0x13a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	e001      	b.n	8002846 <HAL_GPIO_Init+0x13e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2bff      	cmp	r3, #255	; 0xff
 800284c:	d802      	bhi.n	8002854 <HAL_GPIO_Init+0x14c>
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	e002      	b.n	800285a <HAL_GPIO_Init+0x152>
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3b08      	subs	r3, #8
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	210f      	movs	r1, #15
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	6a39      	ldr	r1, [r7, #32]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80b1 	beq.w	80029ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002888:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_GPIO_Init+0x2b8>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x2b8>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_GPIO_Init+0x2b8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028a0:	4a48      	ldr	r2, [pc, #288]	; (80029c4 <HAL_GPIO_Init+0x2bc>)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <HAL_GPIO_Init+0x2c0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_GPIO_Init+0x1ec>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	; (80029cc <HAL_GPIO_Init+0x2c4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00d      	beq.n	80028f0 <HAL_GPIO_Init+0x1e8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <HAL_GPIO_Init+0x2c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x1e4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <HAL_GPIO_Init+0x2cc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_GPIO_Init+0x1e0>
 80028e4:	2303      	movs	r3, #3
 80028e6:	e006      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e004      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e002      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028f4:	2300      	movs	r3, #0
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002906:	492f      	ldr	r1, [pc, #188]	; (80029c4 <HAL_GPIO_Init+0x2bc>)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002920:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	492c      	ldr	r1, [pc, #176]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	4928      	ldr	r1, [pc, #160]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002938:	4013      	ands	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	4922      	ldr	r1, [pc, #136]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	43db      	mvns	r3, r3
 800295e:	491e      	ldr	r1, [pc, #120]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002960:	4013      	ands	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4918      	ldr	r1, [pc, #96]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	43db      	mvns	r3, r3
 8002986:	4914      	ldr	r1, [pc, #80]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002988:	4013      	ands	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d021      	beq.n	80029dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_GPIO_Init+0x2d0>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
 80029a4:	e021      	b.n	80029ea <HAL_GPIO_Init+0x2e2>
 80029a6:	bf00      	nop
 80029a8:	10320000 	.word	0x10320000
 80029ac:	10310000 	.word	0x10310000
 80029b0:	10220000 	.word	0x10220000
 80029b4:	10210000 	.word	0x10210000
 80029b8:	10120000 	.word	0x10120000
 80029bc:	10110000 	.word	0x10110000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40010800 	.word	0x40010800
 80029cc:	40010c00 	.word	0x40010c00
 80029d0:	40011000 	.word	0x40011000
 80029d4:	40011400 	.word	0x40011400
 80029d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4909      	ldr	r1, [pc, #36]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f47f ae8e 	bne.w	800271c <HAL_GPIO_Init+0x14>
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	372c      	adds	r7, #44	; 0x2c
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4013      	ands	r3, r2
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43d9      	mvns	r1, r3
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	400b      	ands	r3, r1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fe6c 	bl	8001770 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e272      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac4:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d112      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5e>
 8002adc:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x12c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d168      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e24c      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x76>
 8002b0c:	4b80      	ldr	r3, [pc, #512]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a7f      	ldr	r2, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e02e      	b.n	8002b78 <HAL_RCC_OscConfig+0xd4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x98>
 8002b22:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7a      	ldr	r2, [pc, #488]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a77      	ldr	r2, [pc, #476]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xd4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0xbc>
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a71      	ldr	r2, [pc, #452]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xd4>
 8002b60:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b68      	ldr	r3, [pc, #416]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7ff fcd8 	bl	8002534 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7ff fcd4 	bl	8002534 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e200      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe4>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fcc4 	bl	8002534 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff fcc0 	bl	8002534 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1ec      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x10c>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d063      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bea:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x18c>
 8002bf6:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x176>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1c0      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4939      	ldr	r1, [pc, #228]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	e03a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7ff fc79 	bl	8002534 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c46:	f7ff fc75 	bl	8002534 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1a1      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c64:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4927      	ldr	r1, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fc58 	bl	8002534 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c88:	f7ff fc54 	bl	8002534 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e180      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d03a      	beq.n	8002d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d019      	beq.n	8002cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7ff fc38 	bl	8002534 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7ff fc34 	bl	8002534 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e160      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f000 fafe 	bl	80032e8 <RCC_Delay>
 8002cec:	e01c      	b.n	8002d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf4:	f7ff fc1e 	bl	8002534 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfa:	e00f      	b.n	8002d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fc1a 	bl	8002534 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d908      	bls.n	8002d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e146      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	42420000 	.word	0x42420000
 8002d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e9      	bne.n	8002cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a6 	beq.w	8002e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a87      	ldr	r2, [pc, #540]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b85      	ldr	r3, [pc, #532]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d118      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7e      	ldr	r2, [pc, #504]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff fbdb 	bl	8002534 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d82:	f7ff fbd7 	bl	8002534 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e103      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x312>
 8002da8:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a6e      	ldr	r2, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e02d      	b.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x334>
 8002dbe:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6213      	str	r3, [r2, #32]
 8002dca:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	e01c      	b.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCC_OscConfig+0x356>
 8002de0:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a60      	ldr	r2, [pc, #384]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e00b      	b.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4a5a      	ldr	r2, [pc, #360]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6213      	str	r3, [r2, #32]
 8002e06:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d015      	beq.n	8002e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7ff fb8b 	bl	8002534 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7ff fb87 	bl	8002534 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0b1      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCC_OscConfig+0x37e>
 8002e44:	e014      	b.n	8002e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7ff fb75 	bl	8002534 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7ff fb71 	bl	8002534 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e09b      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ee      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e76:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a3b      	ldr	r2, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8087 	beq.w	8002f9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d061      	beq.n	8002f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d146      	bne.n	8002f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7ff fb45 	bl	8002534 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7ff fb41 	bl	8002534 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e06d      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4921      	ldr	r1, [pc, #132]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a19      	ldr	r1, [r3, #32]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7ff fb15 	bl	8002534 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7ff fb11 	bl	8002534 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e03d      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x46a>
 8002f2c:	e035      	b.n	8002f9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7ff fafe 	bl	8002534 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7ff fafa 	bl	8002534 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e026      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x498>
 8002f5a:	e01e      	b.n	8002f9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e019      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x500>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0d0      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d910      	bls.n	8002fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4965      	ldr	r1, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800300e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003026:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d040      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d115      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e073      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4936      	ldr	r1, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7ff fa4c 	bl	8002534 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7ff fa48 	bl	8002534 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e053      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d210      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4922      	ldr	r1, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1cc>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1d0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f806 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40022000 	.word	0x40022000
 800316c:	40021000 	.word	0x40021000
 8003170:	080074a0 	.word	0x080074a0
 8003174:	20000004 	.word	0x20000004
 8003178:	20000008 	.word	0x20000008

0800317c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_GetSysClockFreq+0x94>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x30>
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d003      	beq.n	80031b2 <HAL_RCC_GetSysClockFreq+0x36>
 80031aa:	e027      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	613b      	str	r3, [r7, #16]
      break;
 80031b0:	e027      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	0c9b      	lsrs	r3, r3, #18
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_RCC_GetSysClockFreq+0x94>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	0c5b      	lsrs	r3, r3, #17
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_RCC_GetSysClockFreq+0xa0>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_RCC_GetSysClockFreq+0x98>)
 80031de:	fb03 f202 	mul.w	r2, r3, r2
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e004      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	613b      	str	r3, [r7, #16]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fe:	613b      	str	r3, [r7, #16]
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	693b      	ldr	r3, [r7, #16]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	007a1200 	.word	0x007a1200
 8003218:	080074b8 	.word	0x080074b8
 800321c:	080074c8 	.word	0x080074c8
 8003220:	003d0900 	.word	0x003d0900

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b02      	ldr	r3, [pc, #8]	; (8003234 <HAL_RCC_GetHCLKFreq+0x10>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff2 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	080074b0 	.word	0x080074b0

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffde 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	080074b0 	.word	0x080074b0

08003288 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	220f      	movs	r2, #15
 8003296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_GetClockConfig+0x5c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40022000 	.word	0x40022000

080032e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <RCC_Delay+0x34>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <RCC_Delay+0x38>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a5b      	lsrs	r3, r3, #9
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003304:	bf00      	nop
  }
  while (Delay --);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <RCC_Delay+0x1c>
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000004 	.word	0x20000004
 8003320:	10624dd3 	.word	0x10624dd3

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e076      	b.n	8003424 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fe74 	bl	8002064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0c1a      	lsrs	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f002 0204 	and.w	r2, r2, #4
 8003402:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_SPI_Transmit+0x22>
 800344a:	2302      	movs	r3, #2
 800344c:	e12d      	b.n	80036aa <HAL_SPI_Transmit+0x27e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003456:	f7ff f86d 	bl	8002534 <HAL_GetTick>
 800345a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800346c:	2302      	movs	r3, #2
 800346e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003470:	e116      	b.n	80036a0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit+0x52>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003482:	e10d      	b.n	80036a0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2203      	movs	r2, #3
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ca:	d10f      	bne.n	80034ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d007      	beq.n	800350a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d14f      	bne.n	80035b4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_SPI_Transmit+0xf6>
 800351c:	8afb      	ldrh	r3, [r7, #22]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d142      	bne.n	80035a8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003546:	e02f      	b.n	80035a8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d112      	bne.n	800357c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36
 800357a:	e015      	b.n	80035a8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357c:	f7fe ffda 	bl	8002534 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d803      	bhi.n	8003594 <HAL_SPI_Transmit+0x168>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003592:	d102      	bne.n	800359a <HAL_SPI_Transmit+0x16e>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80035a6:	e07b      	b.n	80036a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ca      	bne.n	8003548 <HAL_SPI_Transmit+0x11c>
 80035b2:	e050      	b.n	8003656 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Transmit+0x196>
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d144      	bne.n	800364c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035e8:	e030      	b.n	800364c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d113      	bne.n	8003620 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	86da      	strh	r2, [r3, #54]	; 0x36
 800361e:	e015      	b.n	800364c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003620:	f7fe ff88 	bl	8002534 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d803      	bhi.n	8003638 <HAL_SPI_Transmit+0x20c>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003636:	d102      	bne.n	800363e <HAL_SPI_Transmit+0x212>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800364a:	e029      	b.n	80036a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1c9      	bne.n	80035ea <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fbcc 	bl	8003df8 <SPI_EndRxTxTransaction>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e003      	b.n	80036a0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b088      	sub	sp, #32
 80036b6:	af02      	add	r7, sp, #8
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036d6:	e0fb      	b.n	80038d0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e0:	d112      	bne.n	8003708 <HAL_SPI_Receive+0x56>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10e      	bne.n	8003708 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2204      	movs	r2, #4
 80036ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8ef 	bl	80038e2 <HAL_SPI_TransmitReceive>
 8003704:	4603      	mov	r3, r0
 8003706:	e0e8      	b.n	80038da <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Receive+0x64>
 8003712:	2302      	movs	r3, #2
 8003714:	e0e1      	b.n	80038da <HAL_SPI_Receive+0x228>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371e:	f7fe ff09 	bl	8002534 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_SPI_Receive+0x7e>
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003734:	e0cc      	b.n	80038d0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2204      	movs	r2, #4
 800373a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377c:	d10f      	bne.n	800379e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d007      	beq.n	80037bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d16a      	bne.n	800389a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037c4:	e032      	b.n	800382c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d115      	bne.n	8003800 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f103 020c 	add.w	r2, r3, #12
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fe:	e015      	b.n	800382c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003800:	f7fe fe98 	bl	8002534 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_Receive+0x166>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x16c>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800382a:	e051      	b.n	80038d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1c7      	bne.n	80037c6 <HAL_SPI_Receive+0x114>
 8003836:	e035      	b.n	80038a4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d113      	bne.n	800386e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	b292      	uxth	r2, r2
 8003852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	1c9a      	adds	r2, r3, #2
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800386c:	e015      	b.n	800389a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386e:	f7fe fe61 	bl	8002534 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d803      	bhi.n	8003886 <HAL_SPI_Receive+0x1d4>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003884:	d102      	bne.n	800388c <HAL_SPI_Receive+0x1da>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003898:	e01a      	b.n	80038d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1c9      	bne.n	8003838 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fa53 	bl	8003d54 <SPI_EndRxTransaction>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
 80038c6:	e003      	b.n	80038d0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b08c      	sub	sp, #48	; 0x30
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038f0:	2301      	movs	r3, #1
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x26>
 8003904:	2302      	movs	r3, #2
 8003906:	e198      	b.n	8003c3a <HAL_SPI_TransmitReceive+0x358>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003910:	f7fe fe10 	bl	8002534 <HAL_GetTick>
 8003914:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800392a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800392e:	2b01      	cmp	r3, #1
 8003930:	d00f      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x70>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003938:	d107      	bne.n	800394a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <HAL_SPI_TransmitReceive+0x68>
 8003942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003946:	2b04      	cmp	r3, #4
 8003948:	d003      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003950:	e16d      	b.n	8003c2e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x82>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x82>
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800396a:	e160      	b.n	8003c2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b04      	cmp	r3, #4
 8003976:	d003      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2205      	movs	r2, #5
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	887a      	ldrh	r2, [r7, #2]
 8003996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d007      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039dc:	d17c      	bne.n	8003ad8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x10a>
 80039e6:	8b7b      	ldrh	r3, [r7, #26]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d16a      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a10:	e057      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x176>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x176>
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d113      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d119      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x1b8>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d014      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a9a:	f7fe fd4b 	bl	8002534 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d80b      	bhi.n	8003ac2 <HAL_SPI_TransmitReceive+0x1e0>
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab0:	d007      	beq.n	8003ac2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ac0:	e0b5      	b.n	8003c2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1a2      	bne.n	8003a12 <HAL_SPI_TransmitReceive+0x130>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d19d      	bne.n	8003a12 <HAL_SPI_TransmitReceive+0x130>
 8003ad6:	e080      	b.n	8003bda <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x204>
 8003ae0:	8b7b      	ldrh	r3, [r7, #26]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d16f      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0c:	e05b      	b.n	8003bc6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11c      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x274>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d017      	beq.n	8003b56 <HAL_SPI_TransmitReceive+0x274>
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d114      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d119      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x2b6>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b94:	2301      	movs	r3, #1
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b98:	f7fe fccc 	bl	8002534 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d803      	bhi.n	8003bb0 <HAL_SPI_TransmitReceive+0x2ce>
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x2d4>
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003bc4:	e033      	b.n	8003c2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d19e      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x22c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d199      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f90a 	bl	8003df8 <SPI_EndRxTxTransaction>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bf6:	e01a      	b.n	8003c2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c24:	e003      	b.n	8003c2e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3730      	adds	r7, #48	; 0x30
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c54:	f7fe fc6e 	bl	8002534 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4413      	add	r3, r2
 8003c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c64:	f7fe fc66 	bl	8002534 <HAL_GetTick>
 8003c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	015b      	lsls	r3, r3, #5
 8003c70:	0d1b      	lsrs	r3, r3, #20
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7a:	e054      	b.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c82:	d050      	beq.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c84:	f7fe fc56 	bl	8002534 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d902      	bls.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d13d      	bne.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb2:	d111      	bne.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbc:	d004      	beq.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d107      	bne.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d10f      	bne.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e017      	b.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d19b      	bne.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000004 	.word	0x20000004

08003d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d68:	d111      	bne.n	8003d8e <SPI_EndRxTransaction+0x3a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d004      	beq.n	8003d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7c:	d107      	bne.n	8003d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d96:	d117      	bne.n	8003dc8 <SPI_EndRxTransaction+0x74>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d112      	bne.n	8003dc8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2101      	movs	r1, #1
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff ff49 	bl	8003c44 <SPI_WaitFlagStateUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01a      	beq.n	8003dee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e013      	b.n	8003df0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff ff36 	bl	8003c44 <SPI_WaitFlagStateUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e000      	b.n	8003df0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff18 	bl	8003c44 <SPI_WaitFlagStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e000      	b.n	8003e2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e041      	b.n	8003eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fa82 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f000 fa74 	bl	8004360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e03a      	b.n	8003f62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIM_Base_Start_IT+0x98>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x58>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x58>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x58>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d010      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e007      	b.n	8003f60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800

08003f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0202 	mvn.w	r2, #2
 8003fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9b4 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9a7 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f9b6 	bl	800433a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0204 	mvn.w	r2, #4
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f98a 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f97d 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f98c 	bl	800433a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0208 	mvn.w	r2, #8
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2204      	movs	r2, #4
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f960 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f953 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f962 	bl	800433a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f936 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f929 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f938 	bl	800433a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0201 	mvn.w	r2, #1
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd ff66 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d107      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa7b 	bl	800461e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8fc 	bl	800434c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0220 	mvn.w	r2, #32
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa46 	bl	800460c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x1c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0b4      	b.n	800430e <HAL_TIM_ConfigClockSource+0x186>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd4>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x172>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xa6>
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfa>
 8004208:	2b50      	cmp	r3, #80	; 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	f000 f968 	bl	8004512 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	f000 f951 	bl	8004512 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	461a      	mov	r2, r3
 8004290:	f000 f8c8 	bl	8004424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	; 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f91f 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 f8e6 	bl	8004480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	; 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f90f 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 f8a8 	bl	8004424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f8ff 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 f8f6 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
	...

08004360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a29      	ldr	r2, [pc, #164]	; (8004418 <TIM_Base_SetConfig+0xb8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00b      	beq.n	8004390 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d007      	beq.n	8004390 <TIM_Base_SetConfig+0x30>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a26      	ldr	r2, [pc, #152]	; (800441c <TIM_Base_SetConfig+0xbc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0x30>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a25      	ldr	r2, [pc, #148]	; (8004420 <TIM_Base_SetConfig+0xc0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d108      	bne.n	80043a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <TIM_Base_SetConfig+0xb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00b      	beq.n	80043c2 <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d007      	beq.n	80043c2 <TIM_Base_SetConfig+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <TIM_Base_SetConfig+0xbc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_Base_SetConfig+0x62>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a18      	ldr	r2, [pc, #96]	; (8004420 <TIM_Base_SetConfig+0xc0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <TIM_Base_SetConfig+0xb8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800

08004424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 030a 	bic.w	r3, r3, #10
 8004460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f023 0210 	bic.w	r2, r3, #16
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	031b      	lsls	r3, r3, #12
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f043 0307 	orr.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	021a      	lsls	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	431a      	orrs	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4313      	orrs	r3, r2
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	609a      	str	r2, [r3, #8]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004564:	2302      	movs	r3, #2
 8004566:	e046      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b4:	d009      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a10      	ldr	r2, [pc, #64]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10c      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800

0800460c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e042      	b.n	80046c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd fed2 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	; 0x24
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f91d 	bl	80048b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d16d      	bne.n	80047cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_Transmit+0x2c>
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e066      	b.n	80047ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2221      	movs	r2, #33	; 0x21
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470e:	f7fd ff11 	bl	8002534 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d108      	bne.n	800473c <HAL_UART_Transmit+0x6c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e003      	b.n	8004744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004744:	e02a      	b.n	800479c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f840 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e036      	b.n	80047ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	3302      	adds	r3, #2
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e007      	b.n	800478e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1cf      	bne.n	8004746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2140      	movs	r1, #64	; 0x40
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f810 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e006      	b.n	80047ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b090      	sub	sp, #64	; 0x40
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	e050      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ee:	d04c      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f6:	f7fd fe9d 	bl	8002534 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004802:	429a      	cmp	r2, r3
 8004804:	d241      	bcs.n	800488a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004826:	637a      	str	r2, [r7, #52]	; 0x34
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800482c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	613b      	str	r3, [r7, #16]
   return(result);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3314      	adds	r3, #20
 8004858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485a:	623a      	str	r2, [r7, #32]
 800485c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	61bb      	str	r3, [r7, #24]
   return(result);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e00f      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d09f      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3740      	adds	r7, #64	; 0x40
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048ee:	f023 030c 	bic.w	r3, r3, #12
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <UART_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7fe fca0 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	e002      	b.n	800492a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe fc88 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004928:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <UART_SetConfig+0x118>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	0119      	lsls	r1, r3, #4
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <UART_SetConfig+0x118>)
 8004962:	fba3 0302 	umull	r0, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2064      	movs	r0, #100	; 0x64
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	; 0x32
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004980:	4419      	add	r1, r3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f2f3 	udiv	r2, r2, r3
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <UART_SetConfig+0x118>)
 800499a:	fba3 0302 	umull	r0, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2064      	movs	r0, #100	; 0x64
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <UART_SetConfig+0x118>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	440a      	add	r2, r1
 80049be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40013800 	.word	0x40013800
 80049cc:	51eb851f 	.word	0x51eb851f

080049d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e2:	2b84      	cmp	r3, #132	; 0x84
 80049e4:	d005      	beq.n	80049f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	3303      	adds	r3, #3
 80049f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049f2:	68fb      	ldr	r3, [r7, #12]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a04:	f3ef 8305 	mrs	r3, IPSR
 8004a08:	607b      	str	r3, [r7, #4]
  return(result);
 8004a0a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a24:	f001 f994 	bl	8005d50 <vTaskStartScheduler>
  
  return osOK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a30:	b089      	sub	sp, #36	; 0x24
 8004a32:	af04      	add	r7, sp, #16
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <osThreadCreate+0x54>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01c      	beq.n	8004a82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685c      	ldr	r4, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691e      	ldr	r6, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ffb8 	bl	80049d0 <makeFreeRtosPriority>
 8004a60:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a6a:	9202      	str	r2, [sp, #8]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	9100      	str	r1, [sp, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4632      	mov	r2, r6
 8004a74:	4629      	mov	r1, r5
 8004a76:	4620      	mov	r0, r4
 8004a78:	f000 ff91 	bl	800599e <xTaskCreateStatic>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e01c      	b.n	8004abc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685c      	ldr	r4, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a8e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff9a 	bl	80049d0 <makeFreeRtosPriority>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	9200      	str	r2, [sp, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4629      	mov	r1, r5
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 ffd2 	bl	8005a56 <xTaskCreate>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ac6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <osDelay+0x16>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	e000      	b.n	8004ade <osDelay+0x18>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 f902 	bl	8005ce8 <vTaskDelay>
  
  return osOK;
 8004ae4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af02      	add	r7, sp, #8
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d016      	beq.n	8004b2e <osSemaphoreCreate+0x40>
    if (count == 1) {
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10a      	bne.n	8004b1c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	2001      	movs	r0, #1
 8004b14:	f000 f9c6 	bl	8004ea4 <xQueueGenericCreateStatic>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	e023      	b.n	8004b64 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004b1c:	6838      	ldr	r0, [r7, #0]
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f000 fa91 	bl	800504c <xQueueCreateCountingSemaphoreStatic>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e01a      	b.n	8004b64 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d110      	bne.n	8004b56 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8004b34:	2203      	movs	r2, #3
 8004b36:	2100      	movs	r1, #0
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f000 fa2a 	bl	8004f92 <xQueueGenericCreate>
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <osSemaphoreCreate+0x64>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fae7 	bl	8005120 <xQueueGenericSend>
      return sema;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	e006      	b.n	8004b64 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 faac 	bl	80050ba <xQueueCreateCountingSemaphore>
 8004b62:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	e03a      	b.n	8004bfa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8e:	d103      	bne.n	8004b98 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e009      	b.n	8004bac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <osSemaphoreWait+0x40>
      ticks = 1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004bac:	f7ff ff27 	bl	80049fe <inHandlerMode>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d017      	beq.n	8004be6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fd46 	bl	8005650 <xQueueReceiveFromISR>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d001      	beq.n	8004bce <osSemaphoreWait+0x62>
      return osErrorOS;
 8004bca:	23ff      	movs	r3, #255	; 0xff
 8004bcc:	e015      	b.n	8004bfa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <osSemaphoreWait+0x8c>
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <osSemaphoreWait+0x98>)
 8004bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	e008      	b.n	8004bf8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fc25 	bl	8005438 <xQueueSemaphoreTake>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d001      	beq.n	8004bf8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004bf4:	23ff      	movs	r3, #255	; 0xff
 8004bf6:	e000      	b.n	8004bfa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004c18:	f7ff fef1 	bl	80049fe <inHandlerMode>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004c22:	f107 0308 	add.w	r3, r7, #8
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fb77 	bl	800531c <xQueueGiveFromISR>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d001      	beq.n	8004c38 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004c34:	23ff      	movs	r3, #255	; 0xff
 8004c36:	e017      	b.n	8004c68 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <osSemaphoreRelease+0x5e>
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <osSemaphoreRelease+0x68>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	e00a      	b.n	8004c66 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004c50:	2300      	movs	r3, #0
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa62 	bl	8005120 <xQueueGenericSend>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d001      	beq.n	8004c66 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004c62:	23ff      	movs	r3, #255	; 0xff
 8004c64:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f103 0208 	add.w	r2, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 0208 	add.w	r2, r3, #8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f103 0208 	add.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d26:	d103      	bne.n	8004d30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e00c      	b.n	8004d4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3308      	adds	r3, #8
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e002      	b.n	8004d3e <vListInsert+0x2e>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d2f6      	bcs.n	8004d38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6892      	ldr	r2, [r2, #8]
 8004d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6852      	ldr	r2, [r2, #4]
 8004da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d103      	bne.n	8004db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
	...

08004dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dfe:	f001 ff2d 	bl	8006c5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d114      	bne.n	8004e7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 f9f3 	bl	800624c <xTaskRemoveFromEventList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <xQueueGenericReset+0xcc>)
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	e009      	b.n	8004e92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3310      	adds	r3, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fef6 	bl	8004c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fef1 	bl	8004c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e92:	f001 ff13 	bl	8006cbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	; 0x38
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <xQueueGenericCreateStatic+0x52>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <xQueueGenericCreateStatic+0x56>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueGenericCreateStatic+0x58>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	623b      	str	r3, [r7, #32]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <xQueueGenericCreateStatic+0x7e>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueGenericCreateStatic+0x82>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueGenericCreateStatic+0x84>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61fb      	str	r3, [r7, #28]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f42:	2348      	movs	r3, #72	; 0x48
 8004f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b48      	cmp	r3, #72	; 0x48
 8004f4a:	d00a      	beq.n	8004f62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61bb      	str	r3, [r7, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f843 	bl	800500e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08a      	sub	sp, #40	; 0x28
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <xQueueGenericCreate+0x2a>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	613b      	str	r3, [r7, #16]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	e004      	b.n	8004fd2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3348      	adds	r3, #72	; 0x48
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 ff40 	bl	8006e5c <pvPortMalloc>
 8004fdc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00f      	beq.n	8005004 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	3348      	adds	r3, #72	; 0x48
 8004fe8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff2:	79fa      	ldrb	r2, [r7, #7]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f805 	bl	800500e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005004:	69bb      	ldr	r3, [r7, #24]
	}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e002      	b.n	8005030 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800503c:	2101      	movs	r1, #1
 800503e:	69b8      	ldr	r0, [r7, #24]
 8005040:	f7ff fec8 	bl	8004dd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	61bb      	str	r3, [r7, #24]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d90a      	bls.n	8005092 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	617b      	str	r3, [r7, #20]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005092:	2302      	movs	r3, #2
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	2100      	movs	r1, #0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ff01 	bl	8004ea4 <xQueueGenericCreateStatic>
 80050a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80050b0:	69fb      	ldr	r3, [r7, #28]
	}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	613b      	str	r3, [r7, #16]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d90a      	bls.n	80050fe <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	60fb      	str	r3, [r7, #12]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80050fe:	2202      	movs	r2, #2
 8005100:	2100      	movs	r1, #0
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ff45 	bl	8004f92 <xQueueGenericCreate>
 8005108:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005116:	697b      	ldr	r3, [r7, #20]
	}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08e      	sub	sp, #56	; 0x38
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800512e:	2300      	movs	r3, #0
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xQueueGenericSend+0x32>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <xQueueGenericSend+0x40>
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <xQueueGenericSend+0x44>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <xQueueGenericSend+0x46>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <xQueueGenericSend+0x60>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d103      	bne.n	800518e <xQueueGenericSend+0x6e>
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <xQueueGenericSend+0x72>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <xQueueGenericSend+0x74>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	623b      	str	r3, [r7, #32]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051ae:	f001 fa13 	bl	80065d8 <xTaskGetSchedulerState>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <xQueueGenericSend+0x9e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <xQueueGenericSend+0xa2>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <xQueueGenericSend+0xa4>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <xQueueGenericSend+0xbe>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	61fb      	str	r3, [r7, #28]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051de:	f001 fd3d 	bl	8006c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <xQueueGenericSend+0xd4>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d129      	bne.n	8005248 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fa:	f000 fac0 	bl	800577e <prvCopyDataToQueue>
 80051fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d010      	beq.n	800522a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	3324      	adds	r3, #36	; 0x24
 800520c:	4618      	mov	r0, r3
 800520e:	f001 f81d 	bl	800624c <xTaskRemoveFromEventList>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005218:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <xQueueGenericSend+0x1f8>)
 800521a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	e00a      	b.n	8005240 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005230:	4b39      	ldr	r3, [pc, #228]	; (8005318 <xQueueGenericSend+0x1f8>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005240:	f001 fd3c 	bl	8006cbc <vPortExitCritical>
				return pdPASS;
 8005244:	2301      	movs	r3, #1
 8005246:	e063      	b.n	8005310 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800524e:	f001 fd35 	bl	8006cbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005252:	2300      	movs	r3, #0
 8005254:	e05c      	b.n	8005310 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f855 	bl	8006310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005266:	2301      	movs	r3, #1
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800526a:	f001 fd27 	bl	8006cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800526e:	f000 fdd9 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005272:	f001 fcf3 	bl	8006c5c <vPortEnterCritical>
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527c:	b25b      	sxtb	r3, r3
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005282:	d103      	bne.n	800528c <xQueueGenericSend+0x16c>
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005292:	b25b      	sxtb	r3, r3
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005298:	d103      	bne.n	80052a2 <xQueueGenericSend+0x182>
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a2:	f001 fd0b 	bl	8006cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052a6:	1d3a      	adds	r2, r7, #4
 80052a8:	f107 0314 	add.w	r3, r7, #20
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 f844 	bl	800633c <xTaskCheckForTimeOut>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d124      	bne.n	8005304 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052bc:	f000 fb57 	bl	800596e <prvIsQueueFull>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	3310      	adds	r3, #16
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ff98 	bl	8006204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052d6:	f000 fae2 	bl	800589e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052da:	f000 fdb1 	bl	8005e40 <xTaskResumeAll>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f47f af7c 	bne.w	80051de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <xQueueGenericSend+0x1f8>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	e772      	b.n	80051de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fa:	f000 fad0 	bl	800589e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052fe:	f000 fd9f 	bl	8005e40 <xTaskResumeAll>
 8005302:	e76c      	b.n	80051de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005306:	f000 faca 	bl	800589e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800530a:	f000 fd99 	bl	8005e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800530e:	2300      	movs	r3, #0
		}
	}
}
 8005310:	4618      	mov	r0, r3
 8005312:	3738      	adds	r7, #56	; 0x38
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08e      	sub	sp, #56	; 0x38
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	623b      	str	r3, [r7, #32]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <xQueueGiveFromISR+0x48>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61fb      	str	r3, [r7, #28]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <xQueueGiveFromISR+0x58>
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <xQueueGiveFromISR+0x5c>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <xQueueGiveFromISR+0x5e>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <xQueueGiveFromISR+0x78>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	61bb      	str	r3, [r7, #24]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005394:	f001 fd24 	bl	8006de0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005398:	f3ef 8211 	mrs	r2, BASEPRI
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	617a      	str	r2, [r7, #20]
 80053ae:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d22b      	bcs.n	800541c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053de:	d112      	bne.n	8005406 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d016      	beq.n	8005416 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	3324      	adds	r3, #36	; 0x24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 ff2d 	bl	800624c <xTaskRemoveFromEventList>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00e      	beq.n	8005416 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e007      	b.n	8005416 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540a:	3301      	adds	r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	b25a      	sxtb	r2, r3
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005416:	2301      	movs	r3, #1
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
 800541a:	e001      	b.n	8005420 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800541c:	2300      	movs	r3, #0
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800542a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800542e:	4618      	mov	r0, r3
 8005430:	3738      	adds	r7, #56	; 0x38
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	; 0x38
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005442:	2300      	movs	r3, #0
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	623b      	str	r3, [r7, #32]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61fb      	str	r3, [r7, #28]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005488:	f001 f8a6 	bl	80065d8 <xTaskGetSchedulerState>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <xQueueSemaphoreTake+0x60>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <xQueueSemaphoreTake+0x64>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <xQueueSemaphoreTake+0x66>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	61bb      	str	r3, [r7, #24]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b8:	f001 fbd0 	bl	8006c5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d024      	beq.n	8005512 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80054d8:	f001 fa48 	bl	800696c <pvTaskIncrementMutexHeldCount>
 80054dc:	4602      	mov	r2, r0
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00f      	beq.n	800550a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	3310      	adds	r3, #16
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 feac 	bl	800624c <xTaskRemoveFromEventList>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054fa:	4b54      	ldr	r3, [pc, #336]	; (800564c <xQueueSemaphoreTake+0x214>)
 80054fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800550a:	f001 fbd7 	bl	8006cbc <vPortExitCritical>
				return pdPASS;
 800550e:	2301      	movs	r3, #1
 8005510:	e097      	b.n	8005642 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d111      	bne.n	800553c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	617b      	str	r3, [r7, #20]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005534:	f001 fbc2 	bl	8006cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005538:	2300      	movs	r3, #0
 800553a:	e082      	b.n	8005642 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005542:	f107 030c 	add.w	r3, r7, #12
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fee2 	bl	8006310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005550:	f001 fbb4 	bl	8006cbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005554:	f000 fc66 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005558:	f001 fb80 	bl	8006c5c <vPortEnterCritical>
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005562:	b25b      	sxtb	r3, r3
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005568:	d103      	bne.n	8005572 <xQueueSemaphoreTake+0x13a>
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005578:	b25b      	sxtb	r3, r3
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800557e:	d103      	bne.n	8005588 <xQueueSemaphoreTake+0x150>
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005588:	f001 fb98 	bl	8006cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800558c:	463a      	mov	r2, r7
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fed1 	bl	800633c <xTaskCheckForTimeOut>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d132      	bne.n	8005606 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055a2:	f000 f9ce 	bl	8005942 <prvIsQueueEmpty>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d026      	beq.n	80055fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80055b4:	f001 fb52 	bl	8006c5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f829 	bl	8006614 <xTaskPriorityInherit>
 80055c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80055c4:	f001 fb7a 	bl	8006cbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fe17 	bl	8006204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055d8:	f000 f961 	bl	800589e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055dc:	f000 fc30 	bl	8005e40 <xTaskResumeAll>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f47f af68 	bne.w	80054b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80055e8:	4b18      	ldr	r3, [pc, #96]	; (800564c <xQueueSemaphoreTake+0x214>)
 80055ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	e75e      	b.n	80054b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055fc:	f000 f94f 	bl	800589e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005600:	f000 fc1e 	bl	8005e40 <xTaskResumeAll>
 8005604:	e758      	b.n	80054b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005608:	f000 f949 	bl	800589e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800560c:	f000 fc18 	bl	8005e40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005612:	f000 f996 	bl	8005942 <prvIsQueueEmpty>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f43f af4d 	beq.w	80054b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005624:	f001 fb1a 	bl	8006c5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800562a:	f000 f891 	bl	8005750 <prvGetDisinheritPriorityAfterTimeout>
 800562e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f8f8 	bl	800682c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800563c:	f001 fb3e 	bl	8006cbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005642:	4618      	mov	r0, r3
 8005644:	3738      	adds	r7, #56	; 0x38
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	e000ed04 	.word	0xe000ed04

08005650 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08e      	sub	sp, #56	; 0x38
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10a      	bne.n	800567c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	623b      	str	r3, [r7, #32]
}
 8005678:	bf00      	nop
 800567a:	e7fe      	b.n	800567a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueReceiveFromISR+0x3a>
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueReceiveFromISR+0x3e>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueReceiveFromISR+0x40>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	61fb      	str	r3, [r7, #28]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056aa:	f001 fb99 	bl	8006de0 <vPortValidateInterruptPriority>
	__asm volatile
 80056ae:	f3ef 8211 	mrs	r2, BASEPRI
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	61ba      	str	r2, [r7, #24]
 80056c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80056c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02f      	beq.n	8005736 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e4:	f000 f8b5 	bl	8005852 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	1e5a      	subs	r2, r3, #1
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80056f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f8:	d112      	bne.n	8005720 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	3310      	adds	r3, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fda0 	bl	800624c <xTaskRemoveFromEventList>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e007      	b.n	8005730 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005724:	3301      	adds	r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	b25a      	sxtb	r2, r3
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005730:	2301      	movs	r3, #1
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
 8005734:	e001      	b.n	800573a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005736:	2300      	movs	r3, #0
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f383 8811 	msr	BASEPRI, r3
}
 8005744:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005748:	4618      	mov	r0, r3
 800574a:	3738      	adds	r7, #56	; 0x38
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d006      	beq.n	800576e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1c3 0307 	rsb	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e001      	b.n	8005772 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005772:	68fb      	ldr	r3, [r7, #12]
	}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d14d      	bne.n	8005840 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 ffb9 	bl	8006720 <xTaskPriorityDisinherit>
 80057ae:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e043      	b.n	8005840 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d119      	bne.n	80057f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6898      	ldr	r0, [r3, #8]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	461a      	mov	r2, r3
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	f001 fda3 	bl	8007314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d32b      	bcc.n	8005840 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	e026      	b.n	8005840 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68d8      	ldr	r0, [r3, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	461a      	mov	r2, r3
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	f001 fd89 	bl	8007314 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	425b      	negs	r3, r3
 800580c:	441a      	add	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d207      	bcs.n	800582e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	425b      	negs	r3, r3
 8005828:	441a      	add	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d105      	bne.n	8005840 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3b01      	subs	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005848:	697b      	ldr	r3, [r7, #20]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d018      	beq.n	8005896 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	441a      	add	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	429a      	cmp	r2, r3
 800587c:	d303      	bcc.n	8005886 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68d9      	ldr	r1, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	461a      	mov	r2, r3
 8005890:	6838      	ldr	r0, [r7, #0]
 8005892:	f001 fd3f 	bl	8007314 <memcpy>
	}
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058a6:	f001 f9d9 	bl	8006c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b2:	e011      	b.n	80058d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d012      	beq.n	80058e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3324      	adds	r3, #36	; 0x24
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fcc3 	bl	800624c <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058cc:	f000 fd98 	bl	8006400 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dce9      	bgt.n	80058b4 <prvUnlockQueue+0x16>
 80058e0:	e000      	b.n	80058e4 <prvUnlockQueue+0x46>
					break;
 80058e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	22ff      	movs	r2, #255	; 0xff
 80058e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058ec:	f001 f9e6 	bl	8006cbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058f0:	f001 f9b4 	bl	8006c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058fc:	e011      	b.n	8005922 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d012      	beq.n	800592c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3310      	adds	r3, #16
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fc9e 	bl	800624c <xTaskRemoveFromEventList>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005916:	f000 fd73 	bl	8006400 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	3b01      	subs	r3, #1
 800591e:	b2db      	uxtb	r3, r3
 8005920:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005926:	2b00      	cmp	r3, #0
 8005928:	dce9      	bgt.n	80058fe <prvUnlockQueue+0x60>
 800592a:	e000      	b.n	800592e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800592c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	22ff      	movs	r2, #255	; 0xff
 8005932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005936:	f001 f9c1 	bl	8006cbc <vPortExitCritical>
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800594a:	f001 f987 	bl	8006c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e001      	b.n	8005960 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005960:	f001 f9ac 	bl	8006cbc <vPortExitCritical>

	return xReturn;
 8005964:	68fb      	ldr	r3, [r7, #12]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005976:	f001 f971 	bl	8006c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	429a      	cmp	r2, r3
 8005984:	d102      	bne.n	800598c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e001      	b.n	8005990 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005990:	f001 f994 	bl	8006cbc <vPortExitCritical>

	return xReturn;
 8005994:	68fb      	ldr	r3, [r7, #12]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b08e      	sub	sp, #56	; 0x38
 80059a2:	af04      	add	r7, sp, #16
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	623b      	str	r3, [r7, #32]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xTaskCreateStatic+0x46>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	61fb      	str	r3, [r7, #28]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059e4:	23a4      	movs	r3, #164	; 0xa4
 80059e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2ba4      	cmp	r3, #164	; 0xa4
 80059ec:	d00a      	beq.n	8005a04 <xTaskCreateStatic+0x66>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61bb      	str	r3, [r7, #24]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01e      	beq.n	8005a48 <xTaskCreateStatic+0xaa>
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a22:	2300      	movs	r3, #0
 8005a24:	9303      	str	r3, [sp, #12]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	9302      	str	r3, [sp, #8]
 8005a2a:	f107 0314 	add.w	r3, r7, #20
 8005a2e:	9301      	str	r3, [sp, #4]
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f850 	bl	8005ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a42:	f000 f8e7 	bl	8005c14 <prvAddNewTaskToReadyList>
 8005a46:	e001      	b.n	8005a4c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a4c:	697b      	ldr	r3, [r7, #20]
	}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3728      	adds	r7, #40	; 0x28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b08c      	sub	sp, #48	; 0x30
 8005a5a:	af04      	add	r7, sp, #16
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 f9f6 	bl	8006e5c <pvPortMalloc>
 8005a70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00e      	beq.n	8005a96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a78:	20a4      	movs	r0, #164	; 0xa4
 8005a7a:	f001 f9ef 	bl	8006e5c <pvPortMalloc>
 8005a7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a8c:	e005      	b.n	8005a9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	f001 faa8 	bl	8006fe4 <vPortFree>
 8005a94:	e001      	b.n	8005a9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d017      	beq.n	8005ad0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9303      	str	r3, [sp, #12]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	9302      	str	r3, [sp, #8]
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f80e 	bl	8005ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ac4:	69f8      	ldr	r0, [r7, #28]
 8005ac6:	f000 f8a5 	bl	8005c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e002      	b.n	8005ad6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ad4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005af8:	3b01      	subs	r3, #1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	617b      	str	r3, [r7, #20]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e012      	b.n	8005b54 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	7819      	ldrb	r1, [r3, #0]
 8005b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3334      	adds	r3, #52	; 0x34
 8005b3e:	460a      	mov	r2, r1
 8005b40:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d9e9      	bls.n	8005b2e <prvInitialiseNewTask+0x4e>
 8005b5a:	e000      	b.n	8005b5e <prvInitialiseNewTask+0x7e>
		{
			break;
 8005b5c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d901      	bls.n	8005b70 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	2200      	movs	r2, #0
 8005b80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff f893 	bl	8004cb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff f88e 	bl	8004cb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	f1c3 0207 	rsb	r2, r3, #7
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2200      	movs	r2, #0
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	3350      	adds	r3, #80	; 0x50
 8005bc6:	224c      	movs	r2, #76	; 0x4c
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fb1e 	bl	800720c <memset>
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	4a0d      	ldr	r2, [pc, #52]	; (8005c08 <prvInitialiseNewTask+0x128>)
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <prvInitialiseNewTask+0x12c>)
 8005bda:	659a      	str	r2, [r3, #88]	; 0x58
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <prvInitialiseNewTask+0x130>)
 8005be0:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	69b8      	ldr	r0, [r7, #24]
 8005be8:	f000 ff3a 	bl	8006a60 <pxPortInitialiseStack>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bfe:	bf00      	nop
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20001398 	.word	0x20001398
 8005c0c:	20001400 	.word	0x20001400
 8005c10:	20001468 	.word	0x20001468

08005c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c1c:	f001 f81e 	bl	8006c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c20:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <prvAddNewTaskToReadyList+0xb8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <prvAddNewTaskToReadyList+0xb8>)
 8005c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <prvAddNewTaskToReadyList+0xbc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c32:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <prvAddNewTaskToReadyList+0xbc>)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c38:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <prvAddNewTaskToReadyList+0xb8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d110      	bne.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c40:	f000 fc04 	bl	800644c <prvInitialiseTaskLists>
 8005c44:	e00d      	b.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c46:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <prvAddNewTaskToReadyList+0xc0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c4e:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <prvAddNewTaskToReadyList+0xbc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d802      	bhi.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <prvAddNewTaskToReadyList+0xbc>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <prvAddNewTaskToReadyList+0xc4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3301      	adds	r3, #1
 8005c68:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <prvAddNewTaskToReadyList+0xc4>)
 8005c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	2201      	movs	r2, #1
 8005c72:	409a      	lsls	r2, r3
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <prvAddNewTaskToReadyList+0xcc>)
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f7ff f818 	bl	8004cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c9a:	f001 f80f 	bl	8006cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <prvAddNewTaskToReadyList+0xc0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00e      	beq.n	8005cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <prvAddNewTaskToReadyList+0xbc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d207      	bcs.n	8005cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <prvAddNewTaskToReadyList+0xd0>)
 8005cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	2000074c 	.word	0x2000074c
 8005cd0:	2000064c 	.word	0x2000064c
 8005cd4:	20000758 	.word	0x20000758
 8005cd8:	20000768 	.word	0x20000768
 8005cdc:	20000754 	.word	0x20000754
 8005ce0:	20000650 	.word	0x20000650
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d017      	beq.n	8005d2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <vTaskDelay+0x60>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <vTaskDelay+0x30>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d18:	f000 f884 	bl	8005e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fe38 	bl	8006994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d24:	f000 f88c 	bl	8005e40 <xTaskResumeAll>
 8005d28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <vTaskDelay+0x64>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000774 	.word	0x20000774
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d5e:	463a      	mov	r2, r7
 8005d60:	1d39      	adds	r1, r7, #4
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fb ff08 	bl	8001b7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	9202      	str	r2, [sp, #8]
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	4921      	ldr	r1, [pc, #132]	; (8005e04 <vTaskStartScheduler+0xb4>)
 8005d80:	4821      	ldr	r0, [pc, #132]	; (8005e08 <vTaskStartScheduler+0xb8>)
 8005d82:	f7ff fe0c 	bl	800599e <xTaskCreateStatic>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <vTaskStartScheduler+0xbc>)
 8005d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <vTaskStartScheduler+0xbc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e001      	b.n	8005d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d11b      	bne.n	8005ddc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <vTaskStartScheduler+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3350      	adds	r3, #80	; 0x50
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <vTaskStartScheduler+0xc4>)
 8005dc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <vTaskStartScheduler+0xc8>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <vTaskStartScheduler+0xcc>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <vTaskStartScheduler+0xd0>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dd6:	f000 febf 	bl	8006b58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dda:	e00e      	b.n	8005dfa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de2:	d10a      	bne.n	8005dfa <vTaskStartScheduler+0xaa>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60fb      	str	r3, [r7, #12]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <vTaskStartScheduler+0xa8>
}
 8005dfa:	bf00      	nop
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08007498 	.word	0x08007498
 8005e08:	08006419 	.word	0x08006419
 8005e0c:	20000770 	.word	0x20000770
 8005e10:	2000064c 	.word	0x2000064c
 8005e14:	20000060 	.word	0x20000060
 8005e18:	2000076c 	.word	0x2000076c
 8005e1c:	20000758 	.word	0x20000758
 8005e20:	20000750 	.word	0x20000750

08005e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <vTaskSuspendAll+0x18>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <vTaskSuspendAll+0x18>)
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000774 	.word	0x20000774

08005e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	603b      	str	r3, [r7, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e6c:	f000 fef6 	bl	8006c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e70:	4b38      	ldr	r3, [pc, #224]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4a37      	ldr	r2, [pc, #220]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7a:	4b36      	ldr	r3, [pc, #216]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d161      	bne.n	8005f46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e82:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <xTaskResumeAll+0x118>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d05d      	beq.n	8005f46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e8a:	e02e      	b.n	8005eea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <xTaskResumeAll+0x11c>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe ff71 	bl	8004d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe ff6c 	bl	8004d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <xTaskResumeAll+0x120>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <xTaskResumeAll+0x120>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <xTaskResumeAll+0x124>)
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fe fefa 	bl	8004cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <xTaskResumeAll+0x128>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <xTaskResumeAll+0x11c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cc      	bne.n	8005e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ef8:	f000 fb4a 	bl	8006590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <xTaskResumeAll+0x130>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f08:	f000 f836 	bl	8005f78 <xTaskIncrementTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f1      	bne.n	8005f08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005f24:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <xTaskResumeAll+0x130>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <xTaskResumeAll+0x134>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f000 feb9 	bl	8006cbc <vPortExitCritical>

	return xAlreadyYielded;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000774 	.word	0x20000774
 8005f58:	2000074c 	.word	0x2000074c
 8005f5c:	2000070c 	.word	0x2000070c
 8005f60:	20000754 	.word	0x20000754
 8005f64:	20000650 	.word	0x20000650
 8005f68:	2000064c 	.word	0x2000064c
 8005f6c:	20000760 	.word	0x20000760
 8005f70:	2000075c 	.word	0x2000075c
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f82:	4b51      	ldr	r3, [pc, #324]	; (80060c8 <xTaskIncrementTick+0x150>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 808d 	bne.w	80060a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f8c:	4b4f      	ldr	r3, [pc, #316]	; (80060cc <xTaskIncrementTick+0x154>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f94:	4a4d      	ldr	r2, [pc, #308]	; (80060cc <xTaskIncrementTick+0x154>)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fa0:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <xTaskIncrementTick+0x46>
 8005fc0:	4b43      	ldr	r3, [pc, #268]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <xTaskIncrementTick+0x15c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a41      	ldr	r2, [pc, #260]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4a41      	ldr	r2, [pc, #260]	; (80060d4 <xTaskIncrementTick+0x15c>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <xTaskIncrementTick+0x160>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <xTaskIncrementTick+0x160>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	f000 fad7 	bl	8006590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fe2:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <xTaskIncrementTick+0x164>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d34d      	bcc.n	8006088 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <xTaskIncrementTick+0x82>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xTaskIncrementTick+0x84>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006000:	4b36      	ldr	r3, [pc, #216]	; (80060dc <xTaskIncrementTick+0x164>)
 8006002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006006:	601a      	str	r2, [r3, #0]
					break;
 8006008:	e03e      	b.n	8006088 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800600a:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <xTaskIncrementTick+0x158>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d203      	bcs.n	800602a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006022:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <xTaskIncrementTick+0x164>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6013      	str	r3, [r2, #0]
						break;
 8006028:	e02e      	b.n	8006088 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3304      	adds	r3, #4
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fea6 	bl	8004d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3318      	adds	r3, #24
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fe9d 	bl	8004d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	2201      	movs	r2, #1
 800604c:	409a      	lsls	r2, r3
 800604e:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <xTaskIncrementTick+0x168>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <xTaskIncrementTick+0x168>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <xTaskIncrementTick+0x16c>)
 8006066:	441a      	add	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fe2b 	bl	8004cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <xTaskIncrementTick+0x170>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d3b4      	bcc.n	8005fec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006086:	e7b1      	b.n	8005fec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006088:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <xTaskIncrementTick+0x170>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4915      	ldr	r1, [pc, #84]	; (80060e4 <xTaskIncrementTick+0x16c>)
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d907      	bls.n	80060b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e004      	b.n	80060b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <xTaskIncrementTick+0x174>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3301      	adds	r3, #1
 80060ac:	4a0f      	ldr	r2, [pc, #60]	; (80060ec <xTaskIncrementTick+0x174>)
 80060ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <xTaskIncrementTick+0x178>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060bc:	697b      	ldr	r3, [r7, #20]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000774 	.word	0x20000774
 80060cc:	20000750 	.word	0x20000750
 80060d0:	20000704 	.word	0x20000704
 80060d4:	20000708 	.word	0x20000708
 80060d8:	20000764 	.word	0x20000764
 80060dc:	2000076c 	.word	0x2000076c
 80060e0:	20000754 	.word	0x20000754
 80060e4:	20000650 	.word	0x20000650
 80060e8:	2000064c 	.word	0x2000064c
 80060ec:	2000075c 	.word	0x2000075c
 80060f0:	20000760 	.word	0x20000760

080060f4 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <vTaskSetApplicationTaskTag+0x34>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e001      	b.n	8006110 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8006110:	f000 fda4 	bl	8006c5c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 800611a:	f000 fdcf 	bl	8006cbc <vPortExitCritical>
	}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	2000064c 	.word	0x2000064c

0800612c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006132:	4b2e      	ldr	r3, [pc, #184]	; (80061ec <vTaskSwitchContext+0xc0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800613a:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <vTaskSwitchContext+0xc4>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006140:	e050      	b.n	80061e4 <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <vTaskSwitchContext+0xc4>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8006148:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <vTaskSwitchContext+0xc8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	4618      	mov	r0, r3
 8006150:	f7fb fefa 	bl	8001f48 <TaskSwitchedOut>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006154:	4b28      	ldr	r3, [pc, #160]	; (80061f8 <vTaskSwitchContext+0xcc>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	fab3 f383 	clz	r3, r3
 8006160:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	f1c3 031f 	rsb	r3, r3, #31
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	4924      	ldr	r1, [pc, #144]	; (80061fc <vTaskSwitchContext+0xd0>)
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <vTaskSwitchContext+0x68>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vTaskSwitchContext+0x66>
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4a17      	ldr	r2, [pc, #92]	; (80061fc <vTaskSwitchContext+0xd0>)
 80061a0:	4413      	add	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3308      	adds	r3, #8
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d104      	bne.n	80061c4 <vTaskSwitchContext+0x98>
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <vTaskSwitchContext+0xc8>)
 80061cc:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <vTaskSwitchContext+0xc8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fb fe89 	bl	8001eec <TaskSwitchedIn>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <vTaskSwitchContext+0xc8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3350      	adds	r3, #80	; 0x50
 80061e0:	4a07      	ldr	r2, [pc, #28]	; (8006200 <vTaskSwitchContext+0xd4>)
 80061e2:	6013      	str	r3, [r2, #0]
}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000774 	.word	0x20000774
 80061f0:	20000760 	.word	0x20000760
 80061f4:	2000064c 	.word	0x2000064c
 80061f8:	20000754 	.word	0x20000754
 80061fc:	20000650 	.word	0x20000650
 8006200:	20000060 	.word	0x20000060

08006204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <vTaskPlaceOnEventList+0x44>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3318      	adds	r3, #24
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fe fd6c 	bl	8004d10 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006238:	2101      	movs	r1, #1
 800623a:	6838      	ldr	r0, [r7, #0]
 800623c:	f000 fbaa 	bl	8006994 <prvAddCurrentTaskToDelayedList>
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	2000064c 	.word	0x2000064c

0800624c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60fb      	str	r3, [r7, #12]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	3318      	adds	r3, #24
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe fd7f 	bl	8004d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006282:	4b1d      	ldr	r3, [pc, #116]	; (80062f8 <xTaskRemoveFromEventList+0xac>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11c      	bne.n	80062c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3304      	adds	r3, #4
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fd76 	bl	8004d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	2201      	movs	r2, #1
 800629a:	409a      	lsls	r2, r3
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <xTaskRemoveFromEventList+0xb0>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <xTaskRemoveFromEventList+0xb0>)
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <xTaskRemoveFromEventList+0xb4>)
 80062b4:	441a      	add	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fe fd04 	bl	8004cca <vListInsertEnd>
 80062c2:	e005      	b.n	80062d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	3318      	adds	r3, #24
 80062c8:	4619      	mov	r1, r3
 80062ca:	480e      	ldr	r0, [pc, #56]	; (8006304 <xTaskRemoveFromEventList+0xb8>)
 80062cc:	f7fe fcfd 	bl	8004cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <xTaskRemoveFromEventList+0xbc>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	429a      	cmp	r2, r3
 80062dc:	d905      	bls.n	80062ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <xTaskRemoveFromEventList+0xc0>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e001      	b.n	80062ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000774 	.word	0x20000774
 80062fc:	20000754 	.word	0x20000754
 8006300:	20000650 	.word	0x20000650
 8006304:	2000070c 	.word	0x2000070c
 8006308:	2000064c 	.word	0x2000064c
 800630c:	20000760 	.word	0x20000760

08006310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <vTaskInternalSetTimeOutState+0x24>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <vTaskInternalSetTimeOutState+0x28>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20000764 	.word	0x20000764
 8006338:	20000750 	.word	0x20000750

0800633c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	613b      	str	r3, [r7, #16]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	60fb      	str	r3, [r7, #12]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800637e:	f000 fc6d 	bl	8006c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006382:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <xTaskCheckForTimeOut+0xbc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800639a:	d102      	bne.n	80063a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800639c:	2300      	movs	r3, #0
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	e023      	b.n	80063ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b15      	ldr	r3, [pc, #84]	; (80063fc <xTaskCheckForTimeOut+0xc0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d007      	beq.n	80063be <xTaskCheckForTimeOut+0x82>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d302      	bcc.n	80063be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e015      	b.n	80063ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d20b      	bcs.n	80063e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff ff9b 	bl	8006310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	e004      	b.n	80063ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063ea:	f000 fc67 	bl	8006cbc <vPortExitCritical>

	return xReturn;
 80063ee:	69fb      	ldr	r3, [r7, #28]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000750 	.word	0x20000750
 80063fc:	20000764 	.word	0x20000764

08006400 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006404:	4b03      	ldr	r3, [pc, #12]	; (8006414 <vTaskMissedYield+0x14>)
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000760 	.word	0x20000760

08006418 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006420:	f000 f854 	bl	80064cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <prvIdleTask+0x2c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d907      	bls.n	800643c <prvIdleTask+0x24>
			{
				taskYIELD();
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <prvIdleTask+0x30>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800643c:	f7fb fdb4 	bl	8001fa8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006440:	e7ee      	b.n	8006420 <prvIdleTask+0x8>
 8006442:	bf00      	nop
 8006444:	20000650 	.word	0x20000650
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	e00c      	b.n	8006472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <prvInitialiseTaskLists+0x60>)
 8006464:	4413      	add	r3, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fc04 	bl	8004c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3301      	adds	r3, #1
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b06      	cmp	r3, #6
 8006476:	d9ef      	bls.n	8006458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006478:	480d      	ldr	r0, [pc, #52]	; (80064b0 <prvInitialiseTaskLists+0x64>)
 800647a:	f7fe fbfb 	bl	8004c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800647e:	480d      	ldr	r0, [pc, #52]	; (80064b4 <prvInitialiseTaskLists+0x68>)
 8006480:	f7fe fbf8 	bl	8004c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006484:	480c      	ldr	r0, [pc, #48]	; (80064b8 <prvInitialiseTaskLists+0x6c>)
 8006486:	f7fe fbf5 	bl	8004c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800648a:	480c      	ldr	r0, [pc, #48]	; (80064bc <prvInitialiseTaskLists+0x70>)
 800648c:	f7fe fbf2 	bl	8004c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006490:	480b      	ldr	r0, [pc, #44]	; (80064c0 <prvInitialiseTaskLists+0x74>)
 8006492:	f7fe fbef 	bl	8004c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <prvInitialiseTaskLists+0x78>)
 8006498:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <prvInitialiseTaskLists+0x64>)
 800649a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <prvInitialiseTaskLists+0x7c>)
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <prvInitialiseTaskLists+0x68>)
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000650 	.word	0x20000650
 80064b0:	200006dc 	.word	0x200006dc
 80064b4:	200006f0 	.word	0x200006f0
 80064b8:	2000070c 	.word	0x2000070c
 80064bc:	20000720 	.word	0x20000720
 80064c0:	20000738 	.word	0x20000738
 80064c4:	20000704 	.word	0x20000704
 80064c8:	20000708 	.word	0x20000708

080064cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064d2:	e019      	b.n	8006508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064d4:	f000 fbc2 	bl	8006c5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80064d8:	4b10      	ldr	r3, [pc, #64]	; (800651c <prvCheckTasksWaitingTermination+0x50>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe fc4b 	bl	8004d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <prvCheckTasksWaitingTermination+0x54>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <prvCheckTasksWaitingTermination+0x54>)
 80064f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <prvCheckTasksWaitingTermination+0x58>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <prvCheckTasksWaitingTermination+0x58>)
 80064fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064fe:	f000 fbdd 	bl	8006cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f810 	bl	8006528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <prvCheckTasksWaitingTermination+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e1      	bne.n	80064d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000720 	.word	0x20000720
 8006520:	2000074c 	.word	0x2000074c
 8006524:	20000734 	.word	0x20000734

08006528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3350      	adds	r3, #80	; 0x50
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fe71 	bl	800721c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fd4b 	bl	8006fe4 <vPortFree>
				vPortFree( pxTCB );
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fd48 	bl	8006fe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006554:	e018      	b.n	8006588 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d103      	bne.n	8006568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fd3f 	bl	8006fe4 <vPortFree>
	}
 8006566:	e00f      	b.n	8006588 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800656e:	2b02      	cmp	r3, #2
 8006570:	d00a      	beq.n	8006588 <prvDeleteTCB+0x60>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	60fb      	str	r3, [r7, #12]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <prvDeleteTCB+0x5e>
	}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006596:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <prvResetNextTaskUnblockTime+0x40>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <prvResetNextTaskUnblockTime+0x14>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <prvResetNextTaskUnblockTime+0x16>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <prvResetNextTaskUnblockTime+0x44>)
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065b2:	e008      	b.n	80065c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <prvResetNextTaskUnblockTime+0x40>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <prvResetNextTaskUnblockTime+0x44>)
 80065c4:	6013      	str	r3, [r2, #0]
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	20000704 	.word	0x20000704
 80065d4:	2000076c 	.word	0x2000076c

080065d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065de:	4b0b      	ldr	r3, [pc, #44]	; (800660c <xTaskGetSchedulerState+0x34>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065e6:	2301      	movs	r3, #1
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e008      	b.n	80065fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ec:	4b08      	ldr	r3, [pc, #32]	; (8006610 <xTaskGetSchedulerState+0x38>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065f4:	2302      	movs	r3, #2
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	e001      	b.n	80065fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065fe:	687b      	ldr	r3, [r7, #4]
	}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000758 	.word	0x20000758
 8006610:	20000774 	.word	0x20000774

08006614 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06e      	beq.n	8006708 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662e:	4b39      	ldr	r3, [pc, #228]	; (8006714 <xTaskPriorityInherit+0x100>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	429a      	cmp	r2, r3
 8006636:	d25e      	bcs.n	80066f6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	db06      	blt.n	800664e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006640:	4b34      	ldr	r3, [pc, #208]	; (8006714 <xTaskPriorityInherit+0x100>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	f1c3 0207 	rsb	r2, r3, #7
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	6959      	ldr	r1, [r3, #20]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4a2e      	ldr	r2, [pc, #184]	; (8006718 <xTaskPriorityInherit+0x104>)
 8006660:	4413      	add	r3, r2
 8006662:	4299      	cmp	r1, r3
 8006664:	d101      	bne.n	800666a <xTaskPriorityInherit+0x56>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <xTaskPriorityInherit+0x58>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d03a      	beq.n	80066e6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3304      	adds	r3, #4
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fb83 	bl	8004d80 <uxListRemove>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d115      	bne.n	80066ac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4924      	ldr	r1, [pc, #144]	; (8006718 <xTaskPriorityInherit+0x104>)
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <xTaskPriorityInherit+0x98>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	2201      	movs	r2, #1
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43da      	mvns	r2, r3
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <xTaskPriorityInherit+0x108>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4013      	ands	r3, r2
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <xTaskPriorityInherit+0x108>)
 80066aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066ac:	4b19      	ldr	r3, [pc, #100]	; (8006714 <xTaskPriorityInherit+0x100>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	4b17      	ldr	r3, [pc, #92]	; (800671c <xTaskPriorityInherit+0x108>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <xTaskPriorityInherit+0x108>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a10      	ldr	r2, [pc, #64]	; (8006718 <xTaskPriorityInherit+0x104>)
 80066d6:	441a      	add	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7fe faf3 	bl	8004cca <vListInsertEnd>
 80066e4:	e004      	b.n	80066f0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <xTaskPriorityInherit+0x100>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e008      	b.n	8006708 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <xTaskPriorityInherit+0x100>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	429a      	cmp	r2, r3
 8006702:	d201      	bcs.n	8006708 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006704:	2301      	movs	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006708:	68fb      	ldr	r3, [r7, #12]
	}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000064c 	.word	0x2000064c
 8006718:	20000650 	.word	0x20000650
 800671c:	20000754 	.word	0x20000754

08006720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d06e      	beq.n	8006814 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006736:	4b3a      	ldr	r3, [pc, #232]	; (8006820 <xTaskPriorityDisinherit+0x100>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d00a      	beq.n	8006756 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60bb      	str	r3, [r7, #8]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	429a      	cmp	r2, r3
 8006788:	d044      	beq.n	8006814 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d140      	bne.n	8006814 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3304      	adds	r3, #4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe faf2 	bl	8004d80 <uxListRemove>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d115      	bne.n	80067ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	491f      	ldr	r1, [pc, #124]	; (8006824 <xTaskPriorityDisinherit+0x104>)
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xTaskPriorityDisinherit+0xae>
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	2201      	movs	r2, #1
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	43da      	mvns	r2, r3
 80067c4:	4b18      	ldr	r3, [pc, #96]	; (8006828 <xTaskPriorityDisinherit+0x108>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4013      	ands	r3, r2
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <xTaskPriorityDisinherit+0x108>)
 80067cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	f1c3 0207 	rsb	r2, r3, #7
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	2201      	movs	r2, #1
 80067e8:	409a      	lsls	r2, r3
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <xTaskPriorityDisinherit+0x108>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <xTaskPriorityDisinherit+0x108>)
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <xTaskPriorityDisinherit+0x104>)
 8006802:	441a      	add	r2, r3
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	3304      	adds	r3, #4
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f7fe fa5d 	bl	8004cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006810:	2301      	movs	r3, #1
 8006812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006814:	697b      	ldr	r3, [r7, #20]
	}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	2000064c 	.word	0x2000064c
 8006824:	20000650 	.word	0x20000650
 8006828:	20000754 	.word	0x20000754

0800682c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8088 	beq.w	8006956 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d902      	bls.n	8006874 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e002      	b.n	800687a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	429a      	cmp	r2, r3
 8006882:	d068      	beq.n	8006956 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d163      	bne.n	8006956 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800688e:	4b34      	ldr	r3, [pc, #208]	; (8006960 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	429a      	cmp	r2, r3
 8006896:	d10a      	bne.n	80068ae <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60bb      	str	r3, [r7, #8]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	db04      	blt.n	80068cc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f1c3 0207 	rsb	r2, r3, #7
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	6959      	ldr	r1, [r3, #20]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4a22      	ldr	r2, [pc, #136]	; (8006964 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80068dc:	4413      	add	r3, r2
 80068de:	4299      	cmp	r1, r3
 80068e0:	d101      	bne.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d034      	beq.n	8006956 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe fa45 	bl	8004d80 <uxListRemove>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d115      	bne.n	8006928 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	4918      	ldr	r1, [pc, #96]	; (8006964 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	2201      	movs	r2, #1
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43da      	mvns	r2, r3
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4013      	ands	r3, r2
 8006924:	4a10      	ldr	r2, [pc, #64]	; (8006968 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006926:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2201      	movs	r2, #1
 800692e:	409a      	lsls	r2, r3
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4313      	orrs	r3, r2
 8006936:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a07      	ldr	r2, [pc, #28]	; (8006964 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006948:	441a      	add	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	3304      	adds	r3, #4
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f7fe f9ba 	bl	8004cca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006956:	bf00      	nop
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000064c 	.word	0x2000064c
 8006964:	20000650 	.word	0x20000650
 8006968:	20000754 	.word	0x20000754

0800696c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pvTaskIncrementMutexHeldCount+0x24>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <pvTaskIncrementMutexHeldCount+0x24>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800697e:	3201      	adds	r2, #1
 8006980:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006982:	4b03      	ldr	r3, [pc, #12]	; (8006990 <pvTaskIncrementMutexHeldCount+0x24>)
 8006984:	681b      	ldr	r3, [r3, #0]
	}
 8006986:	4618      	mov	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	2000064c 	.word	0x2000064c

08006994 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800699e:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <prvAddCurrentTaskToDelayedList+0xb0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a4:	4b28      	ldr	r3, [pc, #160]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3304      	adds	r3, #4
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe f9e8 	bl	8004d80 <uxListRemove>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	2201      	movs	r2, #1
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	43da      	mvns	r2, r3
 80069c4:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xb8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4013      	ands	r3, r2
 80069ca:	4a20      	ldr	r2, [pc, #128]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xb8>)
 80069cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d4:	d10a      	bne.n	80069ec <prvAddCurrentTaskToDelayedList+0x58>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	481a      	ldr	r0, [pc, #104]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069e6:	f7fe f970 	bl	8004cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069ea:	e026      	b.n	8006a3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4413      	add	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069f4:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d209      	bcs.n	8006a18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a04:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f7fe f97d 	bl	8004d10 <vListInsert>
}
 8006a16:	e010      	b.n	8006a3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a18:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fe f973 	bl	8004d10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d202      	bcs.n	8006a3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a34:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6013      	str	r3, [r2, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000750 	.word	0x20000750
 8006a48:	2000064c 	.word	0x2000064c
 8006a4c:	20000754 	.word	0x20000754
 8006a50:	20000738 	.word	0x20000738
 8006a54:	20000708 	.word	0x20000708
 8006a58:	20000704 	.word	0x20000704
 8006a5c:	2000076c 	.word	0x2000076c

08006a60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3b04      	subs	r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3b04      	subs	r3, #4
 8006a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3b04      	subs	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a90:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <pxPortInitialiseStack+0x54>)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3b14      	subs	r3, #20
 8006a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3b20      	subs	r3, #32
 8006aa6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr
 8006ab4:	08006ab9 	.word	0x08006ab9

08006ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ac2:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <prvTaskExitError+0x54>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aca:	d00a      	beq.n	8006ae2 <prvTaskExitError+0x2a>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <prvTaskExitError+0x28>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60bb      	str	r3, [r7, #8]
}
 8006af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006af6:	bf00      	nop
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0fc      	beq.n	8006af8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000010 	.word	0x20000010

08006b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b2e:	4770      	bx	lr

08006b30 <pxCurrentTCBConst2>:
 8006b30:	2000064c 	.word	0x2000064c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b38:	4806      	ldr	r0, [pc, #24]	; (8006b54 <prvPortStartFirstTask+0x1c>)
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	6800      	ldr	r0, [r0, #0]
 8006b3e:	f380 8808 	msr	MSP, r0
 8006b42:	b662      	cpsie	i
 8006b44:	b661      	cpsie	f
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	df00      	svc	0
 8006b50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed08 	.word	0xe000ed08

08006b58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <xPortStartScheduler+0xf0>)
 8006b60:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	22ff      	movs	r2, #255	; 0xff
 8006b6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	4b32      	ldr	r3, [pc, #200]	; (8006c4c <xPortStartScheduler+0xf4>)
 8006b84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b86:	4b32      	ldr	r3, [pc, #200]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006b88:	2207      	movs	r2, #7
 8006b8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b8c:	e009      	b.n	8006ba2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b8e:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	4a2e      	ldr	r2, [pc, #184]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006b96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d0ef      	beq.n	8006b8e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8006bae:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f1c3 0307 	rsb	r3, r3, #7
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00a      	beq.n	8006bd0 <xPortStartScheduler+0x78>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	613b      	str	r3, [r7, #16]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bd0:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1c3 0307 	rsb	r3, r3, #7
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d00a      	beq.n	8006bf2 <xPortStartScheduler+0x9a>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60fb      	str	r3, [r7, #12]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xPortStartScheduler+0x98>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bf2:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006bfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bfc:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c04:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <xPortStartScheduler+0xf8>)
 8006c06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c10:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <xPortStartScheduler+0xfc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <xPortStartScheduler+0xfc>)
 8006c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <xPortStartScheduler+0xfc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <xPortStartScheduler+0xfc>)
 8006c22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c28:	f000 f8b8 	bl	8006d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <xPortStartScheduler+0x100>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c32:	f7ff ff81 	bl	8006b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c36:	f7ff fa79 	bl	800612c <vTaskSwitchContext>
	prvTaskExitError();
 8006c3a:	f7ff ff3d 	bl	8006ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	e000e400 	.word	0xe000e400
 8006c4c:	20000778 	.word	0x20000778
 8006c50:	2000077c 	.word	0x2000077c
 8006c54:	e000ed20 	.word	0xe000ed20
 8006c58:	20000010 	.word	0x20000010

08006c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	607b      	str	r3, [r7, #4]
}
 8006c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c76:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <vPortEnterCritical+0x58>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a0d      	ldr	r2, [pc, #52]	; (8006cb4 <vPortEnterCritical+0x58>)
 8006c7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c80:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <vPortEnterCritical+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10f      	bne.n	8006ca8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <vPortEnterCritical+0x5c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	603b      	str	r3, [r7, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <vPortEnterCritical+0x4a>
	}
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000010 	.word	0x20000010
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <vPortExitCritical+0x4c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <vPortExitCritical+0x24>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	607b      	str	r3, [r7, #4]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <vPortExitCritical+0x4c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <vPortExitCritical+0x4c>)
 8006ce8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <vPortExitCritical+0x4c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <vPortExitCritical+0x42>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f383 8811 	msr	BASEPRI, r3
}
 8006cfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr
 8006d08:	20000010 	.word	0x20000010
 8006d0c:	00000000 	.word	0x00000000

08006d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d10:	f3ef 8009 	mrs	r0, PSP
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <pxCurrentTCBConst>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d20:	6010      	str	r0, [r2, #0]
 8006d22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d2a:	f380 8811 	msr	BASEPRI, r0
 8006d2e:	f7ff f9fd 	bl	800612c <vTaskSwitchContext>
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	6808      	ldr	r0, [r1, #0]
 8006d42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d46:	f380 8809 	msr	PSP, r0
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	4770      	bx	lr

08006d50 <pxCurrentTCBConst>:
 8006d50:	2000064c 	.word	0x2000064c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
}
 8006d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d72:	f7ff f901 	bl	8005f78 <xTaskIncrementTick>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <SysTick_Handler+0x40>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f383 8811 	msr	BASEPRI, r3
}
 8006d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <vPortSetupTimerInterrupt+0x30>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <vPortSetupTimerInterrupt+0x34>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <vPortSetupTimerInterrupt+0x38>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <vPortSetupTimerInterrupt+0x3c>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	4a08      	ldr	r2, [pc, #32]	; (8006ddc <vPortSetupTimerInterrupt+0x40>)
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dbe:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <vPortSetupTimerInterrupt+0x30>)
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	601a      	str	r2, [r3, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr
 8006dcc:	e000e010 	.word	0xe000e010
 8006dd0:	e000e018 	.word	0xe000e018
 8006dd4:	20000004 	.word	0x20000004
 8006dd8:	10624dd3 	.word	0x10624dd3
 8006ddc:	e000e014 	.word	0xe000e014

08006de0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006de6:	f3ef 8305 	mrs	r3, IPSR
 8006dea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d914      	bls.n	8006e1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006df2:	4a16      	ldr	r2, [pc, #88]	; (8006e4c <vPortValidateInterruptPriority+0x6c>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dfc:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <vPortValidateInterruptPriority+0x70>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	7afa      	ldrb	r2, [r7, #11]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d20a      	bcs.n	8006e1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	607b      	str	r3, [r7, #4]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <vPortValidateInterruptPriority+0x74>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <vPortValidateInterruptPriority+0x78>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d90a      	bls.n	8006e42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	603b      	str	r3, [r7, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <vPortValidateInterruptPriority+0x60>
	}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	e000e3f0 	.word	0xe000e3f0
 8006e50:	20000778 	.word	0x20000778
 8006e54:	e000ed0c 	.word	0xe000ed0c
 8006e58:	2000077c 	.word	0x2000077c

08006e5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e68:	f7fe ffdc 	bl	8005e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <pvPortMalloc+0x174>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e74:	f000 f910 	bl	8007098 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e78:	4b56      	ldr	r3, [pc, #344]	; (8006fd4 <pvPortMalloc+0x178>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 808e 	bne.w	8006fa2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01d      	beq.n	8006ec8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4413      	add	r3, r2
 8006e92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d014      	beq.n	8006ec8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f023 0307 	bic.w	r3, r3, #7
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <pvPortMalloc+0x6c>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	617b      	str	r3, [r7, #20]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d069      	beq.n	8006fa2 <pvPortMalloc+0x146>
 8006ece:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <pvPortMalloc+0x17c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d864      	bhi.n	8006fa2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ed8:	4b40      	ldr	r3, [pc, #256]	; (8006fdc <pvPortMalloc+0x180>)
 8006eda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006edc:	4b3f      	ldr	r3, [pc, #252]	; (8006fdc <pvPortMalloc+0x180>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ee2:	e004      	b.n	8006eee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <pvPortMalloc+0xa4>
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1f1      	bne.n	8006ee4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <pvPortMalloc+0x174>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d04b      	beq.n	8006fa2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2208      	movs	r2, #8
 8006f10:	4413      	add	r3, r2
 8006f12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	2308      	movs	r3, #8
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d91f      	bls.n	8006f6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <pvPortMalloc+0xf8>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	613b      	str	r3, [r7, #16]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f66:	69b8      	ldr	r0, [r7, #24]
 8006f68:	f000 f8f8 	bl	800715c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <pvPortMalloc+0x17c>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <pvPortMalloc+0x17c>)
 8006f78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f7a:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <pvPortMalloc+0x17c>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <pvPortMalloc+0x184>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d203      	bcs.n	8006f8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <pvPortMalloc+0x17c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <pvPortMalloc+0x184>)
 8006f8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <pvPortMalloc+0x178>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fa2:	f7fe ff4d 	bl	8005e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <pvPortMalloc+0x16a>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60fb      	str	r3, [r7, #12]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <pvPortMalloc+0x168>
	return pvReturn;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3728      	adds	r7, #40	; 0x28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20001388 	.word	0x20001388
 8006fd4:	20001394 	.word	0x20001394
 8006fd8:	2000138c 	.word	0x2000138c
 8006fdc:	20001380 	.word	0x20001380
 8006fe0:	20001390 	.word	0x20001390

08006fe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d048      	beq.n	8007088 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <vPortFree+0xac>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4013      	ands	r3, r2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <vPortFree+0x44>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <vPortFree+0x62>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60bb      	str	r3, [r7, #8]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <vPortFree+0xac>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4013      	ands	r3, r2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d019      	beq.n	8007088 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d115      	bne.n	8007088 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <vPortFree+0xac>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	43db      	mvns	r3, r3
 8007066:	401a      	ands	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800706c:	f7fe feda 	bl	8005e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <vPortFree+0xb0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4413      	add	r3, r2
 800707a:	4a06      	ldr	r2, [pc, #24]	; (8007094 <vPortFree+0xb0>)
 800707c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800707e:	6938      	ldr	r0, [r7, #16]
 8007080:	f000 f86c 	bl	800715c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007084:	f7fe fedc 	bl	8005e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007088:	bf00      	nop
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001394 	.word	0x20001394
 8007094:	2000138c 	.word	0x2000138c

08007098 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800709e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80070a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvHeapInit+0xac>)
 80070a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3307      	adds	r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <prvHeapInit+0xac>)
 80070c8:	4413      	add	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070d0:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <prvHeapInit+0xb0>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070d6:	4b1c      	ldr	r3, [pc, #112]	; (8007148 <prvHeapInit+0xb0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070e4:	2208      	movs	r2, #8
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0307 	bic.w	r3, r3, #7
 80070f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a15      	ldr	r2, [pc, #84]	; (800714c <prvHeapInit+0xb4>)
 80070f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <prvHeapInit+0xb4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <prvHeapInit+0xb4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <prvHeapInit+0xb4>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <prvHeapInit+0xb8>)
 8007126:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a09      	ldr	r2, [pc, #36]	; (8007154 <prvHeapInit+0xbc>)
 800712e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <prvHeapInit+0xc0>)
 8007132:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000780 	.word	0x20000780
 8007148:	20001380 	.word	0x20001380
 800714c:	20001388 	.word	0x20001388
 8007150:	20001390 	.word	0x20001390
 8007154:	2000138c 	.word	0x2000138c
 8007158:	20001394 	.word	0x20001394

0800715c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007164:	4b27      	ldr	r3, [pc, #156]	; (8007204 <prvInsertBlockIntoFreeList+0xa8>)
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e002      	b.n	8007170 <prvInsertBlockIntoFreeList+0x14>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	429a      	cmp	r2, r3
 8007178:	d8f7      	bhi.n	800716a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d108      	bne.n	800719e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	441a      	add	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d118      	bne.n	80071e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvInsertBlockIntoFreeList+0xac>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d00d      	beq.n	80071da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e008      	b.n	80071ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <prvInsertBlockIntoFreeList+0xac>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e003      	b.n	80071ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d002      	beq.n	80071fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr
 8007204:	20001380 	.word	0x20001380
 8007208:	20001388 	.word	0x20001388

0800720c <memset>:
 800720c:	4603      	mov	r3, r0
 800720e:	4402      	add	r2, r0
 8007210:	4293      	cmp	r3, r2
 8007212:	d100      	bne.n	8007216 <memset+0xa>
 8007214:	4770      	bx	lr
 8007216:	f803 1b01 	strb.w	r1, [r3], #1
 800721a:	e7f9      	b.n	8007210 <memset+0x4>

0800721c <_reclaim_reent>:
 800721c:	4b29      	ldr	r3, [pc, #164]	; (80072c4 <_reclaim_reent+0xa8>)
 800721e:	b570      	push	{r4, r5, r6, lr}
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4604      	mov	r4, r0
 8007224:	4283      	cmp	r3, r0
 8007226:	d04b      	beq.n	80072c0 <_reclaim_reent+0xa4>
 8007228:	69c3      	ldr	r3, [r0, #28]
 800722a:	b143      	cbz	r3, 800723e <_reclaim_reent+0x22>
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d144      	bne.n	80072bc <_reclaim_reent+0xa0>
 8007232:	69e3      	ldr	r3, [r4, #28]
 8007234:	6819      	ldr	r1, [r3, #0]
 8007236:	b111      	cbz	r1, 800723e <_reclaim_reent+0x22>
 8007238:	4620      	mov	r0, r4
 800723a:	f000 f879 	bl	8007330 <_free_r>
 800723e:	6961      	ldr	r1, [r4, #20]
 8007240:	b111      	cbz	r1, 8007248 <_reclaim_reent+0x2c>
 8007242:	4620      	mov	r0, r4
 8007244:	f000 f874 	bl	8007330 <_free_r>
 8007248:	69e1      	ldr	r1, [r4, #28]
 800724a:	b111      	cbz	r1, 8007252 <_reclaim_reent+0x36>
 800724c:	4620      	mov	r0, r4
 800724e:	f000 f86f 	bl	8007330 <_free_r>
 8007252:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007254:	b111      	cbz	r1, 800725c <_reclaim_reent+0x40>
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f86a 	bl	8007330 <_free_r>
 800725c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800725e:	b111      	cbz	r1, 8007266 <_reclaim_reent+0x4a>
 8007260:	4620      	mov	r0, r4
 8007262:	f000 f865 	bl	8007330 <_free_r>
 8007266:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007268:	b111      	cbz	r1, 8007270 <_reclaim_reent+0x54>
 800726a:	4620      	mov	r0, r4
 800726c:	f000 f860 	bl	8007330 <_free_r>
 8007270:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007272:	b111      	cbz	r1, 800727a <_reclaim_reent+0x5e>
 8007274:	4620      	mov	r0, r4
 8007276:	f000 f85b 	bl	8007330 <_free_r>
 800727a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800727c:	b111      	cbz	r1, 8007284 <_reclaim_reent+0x68>
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f856 	bl	8007330 <_free_r>
 8007284:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007286:	b111      	cbz	r1, 800728e <_reclaim_reent+0x72>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 f851 	bl	8007330 <_free_r>
 800728e:	6a23      	ldr	r3, [r4, #32]
 8007290:	b1b3      	cbz	r3, 80072c0 <_reclaim_reent+0xa4>
 8007292:	4620      	mov	r0, r4
 8007294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007298:	4718      	bx	r3
 800729a:	5949      	ldr	r1, [r1, r5]
 800729c:	b941      	cbnz	r1, 80072b0 <_reclaim_reent+0x94>
 800729e:	3504      	adds	r5, #4
 80072a0:	69e3      	ldr	r3, [r4, #28]
 80072a2:	2d80      	cmp	r5, #128	; 0x80
 80072a4:	68d9      	ldr	r1, [r3, #12]
 80072a6:	d1f8      	bne.n	800729a <_reclaim_reent+0x7e>
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 f841 	bl	8007330 <_free_r>
 80072ae:	e7c0      	b.n	8007232 <_reclaim_reent+0x16>
 80072b0:	680e      	ldr	r6, [r1, #0]
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 f83c 	bl	8007330 <_free_r>
 80072b8:	4631      	mov	r1, r6
 80072ba:	e7ef      	b.n	800729c <_reclaim_reent+0x80>
 80072bc:	2500      	movs	r5, #0
 80072be:	e7ef      	b.n	80072a0 <_reclaim_reent+0x84>
 80072c0:	bd70      	pop	{r4, r5, r6, pc}
 80072c2:	bf00      	nop
 80072c4:	20000060 	.word	0x20000060

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	2600      	movs	r6, #0
 80072cc:	4d0c      	ldr	r5, [pc, #48]	; (8007300 <__libc_init_array+0x38>)
 80072ce:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072d0:	1b64      	subs	r4, r4, r5
 80072d2:	10a4      	asrs	r4, r4, #2
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	f000 f87e 	bl	80073d8 <_init>
 80072dc:	2600      	movs	r6, #0
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <__libc_init_array+0x40>)
 80072e0:	4c0a      	ldr	r4, [pc, #40]	; (800730c <__libc_init_array+0x44>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f0:	4798      	blx	r3
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fa:	4798      	blx	r3
 80072fc:	3601      	adds	r6, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	080074cc 	.word	0x080074cc
 8007304:	080074cc 	.word	0x080074cc
 8007308:	080074cc 	.word	0x080074cc
 800730c:	080074d0 	.word	0x080074d0

08007310 <__retarget_lock_acquire_recursive>:
 8007310:	4770      	bx	lr

08007312 <__retarget_lock_release_recursive>:
 8007312:	4770      	bx	lr

08007314 <memcpy>:
 8007314:	440a      	add	r2, r1
 8007316:	4291      	cmp	r1, r2
 8007318:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800731c:	d100      	bne.n	8007320 <memcpy+0xc>
 800731e:	4770      	bx	lr
 8007320:	b510      	push	{r4, lr}
 8007322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007326:	4291      	cmp	r1, r2
 8007328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800732c:	d1f9      	bne.n	8007322 <memcpy+0xe>
 800732e:	bd10      	pop	{r4, pc}

08007330 <_free_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4605      	mov	r5, r0
 8007334:	2900      	cmp	r1, #0
 8007336:	d040      	beq.n	80073ba <_free_r+0x8a>
 8007338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800733c:	1f0c      	subs	r4, r1, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfb8      	it	lt
 8007342:	18e4      	addlt	r4, r4, r3
 8007344:	f000 f83c 	bl	80073c0 <__malloc_lock>
 8007348:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <_free_r+0x8c>)
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	b933      	cbnz	r3, 800735c <_free_r+0x2c>
 800734e:	6063      	str	r3, [r4, #4]
 8007350:	6014      	str	r4, [r2, #0]
 8007352:	4628      	mov	r0, r5
 8007354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007358:	f000 b838 	b.w	80073cc <__malloc_unlock>
 800735c:	42a3      	cmp	r3, r4
 800735e:	d908      	bls.n	8007372 <_free_r+0x42>
 8007360:	6820      	ldr	r0, [r4, #0]
 8007362:	1821      	adds	r1, r4, r0
 8007364:	428b      	cmp	r3, r1
 8007366:	bf01      	itttt	eq
 8007368:	6819      	ldreq	r1, [r3, #0]
 800736a:	685b      	ldreq	r3, [r3, #4]
 800736c:	1809      	addeq	r1, r1, r0
 800736e:	6021      	streq	r1, [r4, #0]
 8007370:	e7ed      	b.n	800734e <_free_r+0x1e>
 8007372:	461a      	mov	r2, r3
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b10b      	cbz	r3, 800737c <_free_r+0x4c>
 8007378:	42a3      	cmp	r3, r4
 800737a:	d9fa      	bls.n	8007372 <_free_r+0x42>
 800737c:	6811      	ldr	r1, [r2, #0]
 800737e:	1850      	adds	r0, r2, r1
 8007380:	42a0      	cmp	r0, r4
 8007382:	d10b      	bne.n	800739c <_free_r+0x6c>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	4401      	add	r1, r0
 8007388:	1850      	adds	r0, r2, r1
 800738a:	4283      	cmp	r3, r0
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	d1e0      	bne.n	8007352 <_free_r+0x22>
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	4408      	add	r0, r1
 8007396:	6010      	str	r0, [r2, #0]
 8007398:	6053      	str	r3, [r2, #4]
 800739a:	e7da      	b.n	8007352 <_free_r+0x22>
 800739c:	d902      	bls.n	80073a4 <_free_r+0x74>
 800739e:	230c      	movs	r3, #12
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	e7d6      	b.n	8007352 <_free_r+0x22>
 80073a4:	6820      	ldr	r0, [r4, #0]
 80073a6:	1821      	adds	r1, r4, r0
 80073a8:	428b      	cmp	r3, r1
 80073aa:	bf01      	itttt	eq
 80073ac:	6819      	ldreq	r1, [r3, #0]
 80073ae:	685b      	ldreq	r3, [r3, #4]
 80073b0:	1809      	addeq	r1, r1, r0
 80073b2:	6021      	streq	r1, [r4, #0]
 80073b4:	6063      	str	r3, [r4, #4]
 80073b6:	6054      	str	r4, [r2, #4]
 80073b8:	e7cb      	b.n	8007352 <_free_r+0x22>
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	200014d4 	.word	0x200014d4

080073c0 <__malloc_lock>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__malloc_lock+0x8>)
 80073c2:	f7ff bfa5 	b.w	8007310 <__retarget_lock_acquire_recursive>
 80073c6:	bf00      	nop
 80073c8:	200014d0 	.word	0x200014d0

080073cc <__malloc_unlock>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__malloc_unlock+0x8>)
 80073ce:	f7ff bfa0 	b.w	8007312 <__retarget_lock_release_recursive>
 80073d2:	bf00      	nop
 80073d4:	200014d0 	.word	0x200014d0

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
